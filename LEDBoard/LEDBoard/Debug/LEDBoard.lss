
LEDBoard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004a  00800100  00001690  00001744  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001690  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000022c  0080014a  0080014a  0000178e  2**0
                  ALLOC
  3 .eeprom       00000003  00810000  00810000  0000178e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  00001791  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000017c4  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000200  00000000  00000000  00001808  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000251e  00000000  00000000  00001a08  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000ac3  00000000  00000000  00003f26  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000151a  00000000  00000000  000049e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000558  00000000  00000000  00005f04  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000008aa  00000000  00000000  0000645c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002096  00000000  00000000  00006d06  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000238  00000000  00000000  00008d9c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__ctors_end>
       4:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
       8:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
       c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      10:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      14:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      18:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      1c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      20:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      24:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      28:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      2c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      30:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      34:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      38:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      3c:	0c 94 8b 07 	jmp	0xf16	; 0xf16 <__vector_15>
      40:	0c 94 4c 07 	jmp	0xe98	; 0xe98 <__vector_16>
      44:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      48:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      4c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      50:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      54:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      58:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      5c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      60:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      64:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      68:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      6c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      70:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      74:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      78:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>

0000007c <__trampolines_end>:
      7c:	ff ea       	ldi	r31, 0xAF	; 175
      7e:	8c 5a       	subi	r24, 0xAC	; 172
      80:	3a 24       	eor	r3, r10
      82:	14 0a       	sbc	r1, r20
      84:	04 00       	.word	0x0004	; ????
      86:	00 00       	nop
      88:	02 04       	cpc	r0, r2
      8a:	08 0c       	add	r0, r8
      8c:	10 12       	cpse	r1, r16
      8e:	14 16       	cp	r1, r20
      90:	16 16       	cp	r1, r22
      92:	14 12       	cpse	r1, r20
      94:	10 0e       	add	r1, r16
      96:	0a 08       	sbc	r0, r10
      98:	04 02       	muls	r16, r20
      9a:	00 00       	nop
      9c:	00 00       	nop
      9e:	00 00       	nop
      a0:	02 04       	cpc	r0, r2
      a2:	06 08       	sbc	r0, r6
      a4:	08 0a       	sbc	r0, r24
      a6:	0a 0a       	sbc	r0, r26
      a8:	0a 0a       	sbc	r0, r26
      aa:	08 04       	cpc	r0, r8
      ac:	02 01       	movw	r0, r4
      ae:	01 00       	.word	0x0001	; ????

000000b0 <__ctors_end>:
      b0:	11 24       	eor	r1, r1
      b2:	1f be       	out	0x3f, r1	; 63
      b4:	cf ef       	ldi	r28, 0xFF	; 255
      b6:	d4 e0       	ldi	r29, 0x04	; 4
      b8:	de bf       	out	0x3e, r29	; 62
      ba:	cd bf       	out	0x3d, r28	; 61

000000bc <__do_copy_data>:
      bc:	11 e0       	ldi	r17, 0x01	; 1
      be:	a0 e0       	ldi	r26, 0x00	; 0
      c0:	b1 e0       	ldi	r27, 0x01	; 1
      c2:	e0 e9       	ldi	r30, 0x90	; 144
      c4:	f6 e1       	ldi	r31, 0x16	; 22
      c6:	02 c0       	rjmp	.+4      	; 0xcc <__do_copy_data+0x10>
      c8:	05 90       	lpm	r0, Z+
      ca:	0d 92       	st	X+, r0
      cc:	aa 34       	cpi	r26, 0x4A	; 74
      ce:	b1 07       	cpc	r27, r17
      d0:	d9 f7       	brne	.-10     	; 0xc8 <__do_copy_data+0xc>

000000d2 <__do_clear_bss>:
      d2:	23 e0       	ldi	r18, 0x03	; 3
      d4:	aa e4       	ldi	r26, 0x4A	; 74
      d6:	b1 e0       	ldi	r27, 0x01	; 1
      d8:	01 c0       	rjmp	.+2      	; 0xdc <.do_clear_bss_start>

000000da <.do_clear_bss_loop>:
      da:	1d 92       	st	X+, r1

000000dc <.do_clear_bss_start>:
      dc:	a6 37       	cpi	r26, 0x76	; 118
      de:	b2 07       	cpc	r27, r18
      e0:	e1 f7       	brne	.-8      	; 0xda <.do_clear_bss_loop>
      e2:	0e 94 ed 09 	call	0x13da	; 0x13da <main>
      e6:	0c 94 46 0b 	jmp	0x168c	; 0x168c <_exit>

000000ea <__bad_interrupt>:
      ea:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ee <sine_fade>:
  return ret;
}

uint8_t in_network() {
  return program > 7;
}
      ee:	67 2b       	or	r22, r23
      f0:	89 f0       	breq	.+34     	; 0x114 <sine_fade+0x26>
      f2:	88 0f       	add	r24, r24
      f4:	99 1f       	adc	r25, r25
      f6:	fc 01       	movw	r30, r24
      f8:	eb 56       	subi	r30, 0x6B	; 107
      fa:	fe 4f       	sbci	r31, 0xFE	; 254
      fc:	21 e0       	ldi	r18, 0x01	; 1
      fe:	30 e0       	ldi	r19, 0x00	; 0
     100:	31 83       	std	Z+1, r19	; 0x01
     102:	20 83       	st	Z, r18
     104:	fc 01       	movw	r30, r24
     106:	eb 57       	subi	r30, 0x7B	; 123
     108:	fe 4f       	sbci	r31, 0xFE	; 254
     10a:	11 82       	std	Z+1, r1	; 0x01
     10c:	10 82       	st	Z, r1
     10e:	8f ef       	ldi	r24, 0xFF	; 255
     110:	90 e0       	ldi	r25, 0x00	; 0
     112:	08 95       	ret
     114:	fc 01       	movw	r30, r24
     116:	ee 0f       	add	r30, r30
     118:	ff 1f       	adc	r31, r31
     11a:	eb 56       	subi	r30, 0x6B	; 107
     11c:	fe 4f       	sbci	r31, 0xFE	; 254
     11e:	20 81       	ld	r18, Z
     120:	31 81       	ldd	r19, Z+1	; 0x01
     122:	b9 01       	movw	r22, r18
     124:	61 50       	subi	r22, 0x01	; 1
     126:	71 09       	sbc	r23, r1
     128:	61 33       	cpi	r22, 0x31	; 49
     12a:	71 05       	cpc	r23, r1
     12c:	d8 f5       	brcc	.+118    	; 0x1a4 <sine_fade+0xb6>
     12e:	2b 30       	cpi	r18, 0x0B	; 11
     130:	31 05       	cpc	r19, r1
     132:	ac f0       	brlt	.+42     	; 0x15e <sine_fade+0x70>
     134:	fc 01       	movw	r30, r24
     136:	ee 0f       	add	r30, r30
     138:	ff 1f       	adc	r31, r31
     13a:	eb 57       	subi	r30, 0x7B	; 123
     13c:	fe 4f       	sbci	r31, 0xFE	; 254
     13e:	60 81       	ld	r22, Z
     140:	71 81       	ldd	r23, Z+1	; 0x01
     142:	62 30       	cpi	r22, 0x02	; 2
     144:	71 05       	cpc	r23, r1
     146:	5c f4       	brge	.+22     	; 0x15e <sine_fade+0x70>
     148:	88 0f       	add	r24, r24
     14a:	99 1f       	adc	r25, r25
     14c:	fc 01       	movw	r30, r24
     14e:	eb 57       	subi	r30, 0x7B	; 123
     150:	fe 4f       	sbci	r31, 0xFE	; 254
     152:	6f 5f       	subi	r22, 0xFF	; 255
     154:	7f 4f       	sbci	r23, 0xFF	; 255
     156:	71 83       	std	Z+1, r23	; 0x01
     158:	60 83       	st	Z, r22
     15a:	ca 01       	movw	r24, r20
     15c:	08 95       	ret
     15e:	fc 01       	movw	r30, r24
     160:	ee 0f       	add	r30, r30
     162:	ff 1f       	adc	r31, r31
     164:	eb 57       	subi	r30, 0x7B	; 123
     166:	fe 4f       	sbci	r31, 0xFE	; 254
     168:	11 82       	std	Z+1, r1	; 0x01
     16a:	10 82       	st	Z, r1
     16c:	f9 01       	movw	r30, r18
     16e:	e3 58       	subi	r30, 0x83	; 131
     170:	ff 4f       	sbci	r31, 0xFF	; 255
     172:	e4 91       	lpm	r30, Z
     174:	f0 e0       	ldi	r31, 0x00	; 0
     176:	4e 17       	cp	r20, r30
     178:	5f 07       	cpc	r21, r31
     17a:	1c f4       	brge	.+6      	; 0x182 <sine_fade+0x94>
     17c:	ca 01       	movw	r24, r20
     17e:	01 96       	adiw	r24, 0x01	; 1
     180:	08 95       	ret
     182:	e4 17       	cp	r30, r20
     184:	f5 07       	cpc	r31, r21
     186:	1c f4       	brge	.+6      	; 0x18e <sine_fade+0xa0>
     188:	ca 01       	movw	r24, r20
     18a:	01 97       	sbiw	r24, 0x01	; 1
     18c:	08 95       	ret
     18e:	dc 01       	movw	r26, r24
     190:	aa 0f       	add	r26, r26
     192:	bb 1f       	adc	r27, r27
     194:	ab 56       	subi	r26, 0x6B	; 107
     196:	be 4f       	sbci	r27, 0xFE	; 254
     198:	2f 5f       	subi	r18, 0xFF	; 255
     19a:	3f 4f       	sbci	r19, 0xFF	; 255
     19c:	2d 93       	st	X+, r18
     19e:	3c 93       	st	X, r19
     1a0:	cf 01       	movw	r24, r30
     1a2:	08 95       	ret
     1a4:	80 e0       	ldi	r24, 0x00	; 0
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	08 95       	ret

000001aa <quick_fade>:
     1aa:	61 15       	cp	r22, r1
     1ac:	71 05       	cpc	r23, r1
     1ae:	31 f4       	brne	.+12     	; 0x1bc <quick_fade+0x12>
     1b0:	43 30       	cpi	r20, 0x03	; 3
     1b2:	51 05       	cpc	r21, r1
     1b4:	2c f0       	brlt	.+10     	; 0x1c0 <quick_fade+0x16>
     1b6:	ca 01       	movw	r24, r20
     1b8:	03 97       	sbiw	r24, 0x03	; 3
     1ba:	08 95       	ret
     1bc:	cb 01       	movw	r24, r22
     1be:	08 95       	ret
     1c0:	80 e0       	ldi	r24, 0x00	; 0
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	08 95       	ret

000001c6 <inv_heat>:
     1c6:	67 2b       	or	r22, r23
     1c8:	19 f0       	breq	.+6      	; 0x1d0 <inv_heat+0xa>
     1ca:	ca 01       	movw	r24, r20
     1cc:	40 97       	sbiw	r24, 0x10	; 16
     1ce:	05 c0       	rjmp	.+10     	; 0x1da <inv_heat+0x14>
     1d0:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <step>
     1d4:	ca 01       	movw	r24, r20
     1d6:	82 0f       	add	r24, r18
     1d8:	91 1d       	adc	r25, r1
     1da:	99 23       	and	r25, r25
     1dc:	14 f4       	brge	.+4      	; 0x1e2 <inv_heat+0x1c>
     1de:	80 e0       	ldi	r24, 0x00	; 0
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	8f 3f       	cpi	r24, 0xFF	; 255
     1e4:	91 05       	cpc	r25, r1
     1e6:	19 f0       	breq	.+6      	; 0x1ee <inv_heat+0x28>
     1e8:	14 f0       	brlt	.+4      	; 0x1ee <inv_heat+0x28>
     1ea:	8f ef       	ldi	r24, 0xFF	; 255
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	08 95       	ret

000001f0 <inv_fade>:
     1f0:	67 2b       	or	r22, r23
     1f2:	49 f4       	brne	.+18     	; 0x206 <inv_fade+0x16>
     1f4:	ca 01       	movw	r24, r20
     1f6:	01 96       	adiw	r24, 0x01	; 1
     1f8:	8f 3f       	cpi	r24, 0xFF	; 255
     1fa:	91 05       	cpc	r25, r1
     1fc:	31 f0       	breq	.+12     	; 0x20a <inv_fade+0x1a>
     1fe:	2c f0       	brlt	.+10     	; 0x20a <inv_fade+0x1a>
     200:	8f ef       	ldi	r24, 0xFF	; 255
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	08 95       	ret
     206:	80 e0       	ldi	r24, 0x00	; 0
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	08 95       	ret

0000020c <net_repeat>:
     20c:	08 95       	ret

0000020e <net_decrement>:
     20e:	02 97       	sbiw	r24, 0x02	; 2
     210:	08 95       	ret

00000212 <saveConfig>:
     212:	cf 93       	push	r28
     214:	cf b7       	in	r28, 0x3f	; 63
     216:	f8 94       	cli
     218:	60 91 e5 01 	lds	r22, 0x01E5	; 0x8001e5 <program>
     21c:	82 e0       	ldi	r24, 0x02	; 2
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <eeprom_write_byte>
     224:	60 91 49 01 	lds	r22, 0x0149	; 0x800149 <sensitivity>
     228:	81 e0       	ldi	r24, 0x01	; 1
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <eeprom_write_byte>
     230:	60 91 e4 01 	lds	r22, 0x01E4	; 0x8001e4 <netConfig>
     234:	80 e0       	ldi	r24, 0x00	; 0
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <eeprom_write_byte>
     23c:	cf bf       	out	0x3f, r28	; 63
     23e:	cf 91       	pop	r28
     240:	08 95       	ret

00000242 <delay_ms>:
     242:	00 97       	sbiw	r24, 0x00	; 0
     244:	41 f0       	breq	.+16     	; 0x256 <delay_ms+0x14>
     246:	ef ec       	ldi	r30, 0xCF	; 207
     248:	f7 e0       	ldi	r31, 0x07	; 7
     24a:	31 97       	sbiw	r30, 0x01	; 1
     24c:	f1 f7       	brne	.-4      	; 0x24a <delay_ms+0x8>
     24e:	00 c0       	rjmp	.+0      	; 0x250 <delay_ms+0xe>
     250:	00 00       	nop
     252:	01 97       	sbiw	r24, 0x01	; 1
     254:	c1 f7       	brne	.-16     	; 0x246 <delay_ms+0x4>
     256:	08 95       	ret

00000258 <flashLeds>:
     258:	80 e0       	ldi	r24, 0x00	; 0
     25a:	90 e0       	ldi	r25, 0x00	; 0
     25c:	2f ef       	ldi	r18, 0xFF	; 255
     25e:	fc 01       	movw	r30, r24
     260:	ea 50       	subi	r30, 0x0A	; 10
     262:	fe 4f       	sbci	r31, 0xFE	; 254
     264:	20 83       	st	Z, r18
     266:	01 96       	adiw	r24, 0x01	; 1
     268:	88 30       	cpi	r24, 0x08	; 8
     26a:	91 05       	cpc	r25, r1
     26c:	c1 f7       	brne	.-16     	; 0x25e <flashLeds+0x6>
     26e:	82 e3       	ldi	r24, 0x32	; 50
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	0e 94 21 01 	call	0x242	; 0x242 <delay_ms>
     276:	80 e0       	ldi	r24, 0x00	; 0
     278:	90 e0       	ldi	r25, 0x00	; 0
     27a:	fc 01       	movw	r30, r24
     27c:	ea 50       	subi	r30, 0x0A	; 10
     27e:	fe 4f       	sbci	r31, 0xFE	; 254
     280:	10 82       	st	Z, r1
     282:	01 96       	adiw	r24, 0x01	; 1
     284:	88 30       	cpi	r24, 0x08	; 8
     286:	91 05       	cpc	r25, r1
     288:	c1 f7       	brne	.-16     	; 0x27a <flashLeds+0x22>
     28a:	08 95       	ret

0000028c <dispatch>:
     28c:	cf 93       	push	r28
     28e:	df 93       	push	r29
     290:	fb 01       	movw	r30, r22
     292:	ee 0f       	add	r30, r30
     294:	ff 1f       	adc	r31, r31
     296:	ec 52       	subi	r30, 0x2C	; 44
     298:	fe 4f       	sbci	r31, 0xFE	; 254
     29a:	51 83       	std	Z+1, r21	; 0x01
     29c:	40 83       	st	Z, r20
     29e:	80 31       	cpi	r24, 0x10	; 16
     2a0:	91 05       	cpc	r25, r1
     2a2:	7c f4       	brge	.+30     	; 0x2c2 <dispatch+0x36>
     2a4:	ea 01       	movw	r28, r20
     2a6:	db 01       	movw	r26, r22
     2a8:	fc 01       	movw	r30, r24
     2aa:	ee 0f       	add	r30, r30
     2ac:	ff 1f       	adc	r31, r31
     2ae:	e7 5d       	subi	r30, 0xD7	; 215
     2b0:	fe 4f       	sbci	r31, 0xFE	; 254
     2b2:	01 90       	ld	r0, Z+
     2b4:	f0 81       	ld	r31, Z
     2b6:	e0 2d       	mov	r30, r0
     2b8:	a9 01       	movw	r20, r18
     2ba:	be 01       	movw	r22, r28
     2bc:	cd 01       	movw	r24, r26
     2be:	09 95       	icall
     2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <dispatch+0x3a>
     2c2:	80 e0       	ldi	r24, 0x00	; 0
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	df 91       	pop	r29
     2c8:	cf 91       	pop	r28
     2ca:	08 95       	ret

000002cc <_activate>:
     2cc:	62 30       	cpi	r22, 0x02	; 2
     2ce:	71 05       	cpc	r23, r1
     2d0:	19 f4       	brne	.+6      	; 0x2d8 <_activate+0xc>
     2d2:	99 23       	and	r25, r25
     2d4:	3c f4       	brge	.+14     	; 0x2e4 <_activate+0x18>
     2d6:	1f c0       	rjmp	.+62     	; 0x316 <_activate+0x4a>
     2d8:	61 30       	cpi	r22, 0x01	; 1
     2da:	71 05       	cpc	r23, r1
     2dc:	19 f4       	brne	.+6      	; 0x2e4 <_activate+0x18>
     2de:	18 16       	cp	r1, r24
     2e0:	19 06       	cpc	r1, r25
     2e2:	e4 f0       	brlt	.+56     	; 0x31c <_activate+0x50>
     2e4:	9c 01       	movw	r18, r24
     2e6:	99 23       	and	r25, r25
     2e8:	24 f4       	brge	.+8      	; 0x2f2 <_activate+0x26>
     2ea:	22 27       	eor	r18, r18
     2ec:	33 27       	eor	r19, r19
     2ee:	28 1b       	sub	r18, r24
     2f0:	39 0b       	sbc	r19, r25
     2f2:	e0 91 49 01 	lds	r30, 0x0149	; 0x800149 <sensitivity>
     2f6:	f0 e0       	ldi	r31, 0x00	; 0
     2f8:	ec 5f       	subi	r30, 0xFC	; 252
     2fa:	fe 4f       	sbci	r31, 0xFE	; 254
     2fc:	80 81       	ld	r24, Z
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	28 17       	cp	r18, r24
     302:	39 07       	cpc	r19, r25
     304:	74 f0       	brlt	.+28     	; 0x322 <_activate+0x56>
     306:	c9 01       	movw	r24, r18
     308:	2f 3f       	cpi	r18, 0xFF	; 255
     30a:	31 05       	cpc	r19, r1
     30c:	61 f0       	breq	.+24     	; 0x326 <_activate+0x5a>
     30e:	5c f0       	brlt	.+22     	; 0x326 <_activate+0x5a>
     310:	8f ef       	ldi	r24, 0xFF	; 255
     312:	90 e0       	ldi	r25, 0x00	; 0
     314:	08 95       	ret
     316:	80 e0       	ldi	r24, 0x00	; 0
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	08 95       	ret
     31c:	80 e0       	ldi	r24, 0x00	; 0
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	08 95       	ret
     322:	80 e0       	ldi	r24, 0x00	; 0
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	08 95       	ret

00000328 <slope>:
     328:	cf 93       	push	r28
     32a:	df 93       	push	r29
     32c:	2c e1       	ldi	r18, 0x1C	; 28
     32e:	28 9f       	mul	r18, r24
     330:	f0 01       	movw	r30, r0
     332:	29 9f       	mul	r18, r25
     334:	f0 0d       	add	r31, r0
     336:	11 24       	eor	r1, r1
     338:	ef 01       	movw	r28, r30
     33a:	ca 57       	subi	r28, 0x7A	; 122
     33c:	dd 4f       	sbci	r29, 0xFD	; 253
     33e:	af 01       	movw	r20, r30
     340:	40 56       	subi	r20, 0x60	; 96
     342:	5d 4f       	sbci	r21, 0xFD	; 253
     344:	de 01       	movw	r26, r28
     346:	12 96       	adiw	r26, 0x02	; 2
     348:	2d 91       	ld	r18, X+
     34a:	3c 91       	ld	r19, X
     34c:	13 97       	sbiw	r26, 0x03	; 3
     34e:	2d 93       	st	X+, r18
     350:	3d 93       	st	X+, r19
     352:	a4 17       	cp	r26, r20
     354:	b5 07       	cpc	r27, r21
     356:	b9 f7       	brne	.-18     	; 0x346 <slope+0x1e>
     358:	2c e1       	ldi	r18, 0x1C	; 28
     35a:	28 9f       	mul	r18, r24
     35c:	d0 01       	movw	r26, r0
     35e:	29 9f       	mul	r18, r25
     360:	b0 0d       	add	r27, r0
     362:	11 24       	eor	r1, r1
     364:	aa 57       	subi	r26, 0x7A	; 122
     366:	bd 4f       	sbci	r27, 0xFD	; 253
     368:	5b 96       	adiw	r26, 0x1b	; 27
     36a:	7c 93       	st	X, r23
     36c:	6e 93       	st	-X, r22
     36e:	5a 97       	sbiw	r26, 0x1a	; 26
     370:	e0 56       	subi	r30, 0x60	; 96
     372:	fd 4f       	sbci	r31, 0xFD	; 253
     374:	80 e0       	ldi	r24, 0x00	; 0
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	20 81       	ld	r18, Z
     37a:	31 81       	ldd	r19, Z+1	; 0x01
     37c:	52 91       	ld	r21, -Z
     37e:	42 91       	ld	r20, -Z
     380:	24 1b       	sub	r18, r20
     382:	35 0b       	sbc	r19, r21
     384:	82 0f       	add	r24, r18
     386:	93 1f       	adc	r25, r19
     388:	ec 17       	cp	r30, r28
     38a:	fd 07       	cpc	r31, r29
     38c:	a9 f7       	brne	.-22     	; 0x378 <slope+0x50>
     38e:	df 91       	pop	r29
     390:	cf 91       	pop	r28
     392:	08 95       	ret

00000394 <filteredReading>:
     394:	cf 92       	push	r12
     396:	df 92       	push	r13
     398:	ef 92       	push	r14
     39a:	ff 92       	push	r15
     39c:	1f 93       	push	r17
     39e:	cf 93       	push	r28
     3a0:	df 93       	push	r29
     3a2:	ec 01       	movw	r28, r24
     3a4:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <sensitivity>
     3a8:	82 30       	cpi	r24, 0x02	; 2
     3aa:	b8 f0       	brcs	.+46     	; 0x3da <filteredReading+0x46>
     3ac:	14 e0       	ldi	r17, 0x04	; 4
     3ae:	16 c0       	rjmp	.+44     	; 0x3dc <filteredReading+0x48>
     3b0:	41 91       	ld	r20, Z+
     3b2:	51 91       	ld	r21, Z+
     3b4:	05 2e       	mov	r0, r21
     3b6:	00 0c       	add	r0, r0
     3b8:	66 0b       	sbc	r22, r22
     3ba:	77 0b       	sbc	r23, r23
     3bc:	c4 0e       	add	r12, r20
     3be:	d5 1e       	adc	r13, r21
     3c0:	e6 1e       	adc	r14, r22
     3c2:	f7 1e       	adc	r15, r23
     3c4:	2f 5f       	subi	r18, 0xFF	; 255
     3c6:	3f 4f       	sbci	r19, 0xFF	; 255
     3c8:	2a 17       	cp	r18, r26
     3ca:	3b 07       	cpc	r19, r27
     3cc:	8c f3       	brlt	.-30     	; 0x3b0 <filteredReading+0x1c>
     3ce:	18 30       	cpi	r17, 0x08	; 8
     3d0:	11 f0       	breq	.+4      	; 0x3d6 <filteredReading+0x42>
     3d2:	82 e0       	ldi	r24, 0x02	; 2
     3d4:	37 c0       	rjmp	.+110    	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     3d6:	83 e0       	ldi	r24, 0x03	; 3
     3d8:	35 c0       	rjmp	.+106    	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     3da:	18 e0       	ldi	r17, 0x08	; 8
     3dc:	c0 90 b2 01 	lds	r12, 0x01B2	; 0x8001b2 <acounter>
     3e0:	d0 90 b3 01 	lds	r13, 0x01B3	; 0x8001b3 <acounter+0x1>
     3e4:	c6 01       	movw	r24, r12
     3e6:	01 96       	adiw	r24, 0x01	; 1
     3e8:	90 93 b3 01 	sts	0x01B3, r25	; 0x8001b3 <acounter+0x1>
     3ec:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <acounter>
     3f0:	ce 01       	movw	r24, r28
     3f2:	0e 94 94 01 	call	0x328	; 0x328 <slope>
     3f6:	7c 01       	movw	r14, r24
     3f8:	a1 2f       	mov	r26, r17
     3fa:	b0 e0       	ldi	r27, 0x00	; 0
     3fc:	c6 01       	movw	r24, r12
     3fe:	9d 01       	movw	r18, r26
     400:	b9 01       	movw	r22, r18
     402:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <__udivmodhi4>
     406:	fe 01       	movw	r30, r28
     408:	ee 0f       	add	r30, r30
     40a:	ff 1f       	adc	r31, r31
     40c:	ee 0f       	add	r30, r30
     40e:	ff 1f       	adc	r31, r31
     410:	ee 0f       	add	r30, r30
     412:	ff 1f       	adc	r31, r31
     414:	e8 0f       	add	r30, r24
     416:	f9 1f       	adc	r31, r25
     418:	ee 0f       	add	r30, r30
     41a:	ff 1f       	adc	r31, r31
     41c:	e2 50       	subi	r30, 0x02	; 2
     41e:	fe 4f       	sbci	r31, 0xFE	; 254
     420:	f1 82       	std	Z+1, r15	; 0x01
     422:	e0 82       	st	Z, r14
     424:	d9 01       	movw	r26, r18
     426:	fe 01       	movw	r30, r28
     428:	e2 95       	swap	r30
     42a:	f2 95       	swap	r31
     42c:	f0 7f       	andi	r31, 0xF0	; 240
     42e:	fe 27       	eor	r31, r30
     430:	e0 7f       	andi	r30, 0xF0	; 240
     432:	fe 27       	eor	r31, r30
     434:	e2 50       	subi	r30, 0x02	; 2
     436:	fe 4f       	sbci	r31, 0xFE	; 254
     438:	c1 2c       	mov	r12, r1
     43a:	d1 2c       	mov	r13, r1
     43c:	76 01       	movw	r14, r12
     43e:	20 e0       	ldi	r18, 0x00	; 0
     440:	30 e0       	ldi	r19, 0x00	; 0
     442:	b6 cf       	rjmp	.-148    	; 0x3b0 <filteredReading+0x1c>
     444:	a7 01       	movw	r20, r14
     446:	96 01       	movw	r18, r12
     448:	04 c0       	rjmp	.+8      	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
     44a:	55 95       	asr	r21
     44c:	47 95       	ror	r20
     44e:	37 95       	ror	r19
     450:	27 95       	ror	r18
     452:	8a 95       	dec	r24
     454:	d2 f7       	brpl	.-12     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     456:	da 01       	movw	r26, r20
     458:	c9 01       	movw	r24, r18
     45a:	df 91       	pop	r29
     45c:	cf 91       	pop	r28
     45e:	1f 91       	pop	r17
     460:	ff 90       	pop	r15
     462:	ef 90       	pop	r14
     464:	df 90       	pop	r13
     466:	cf 90       	pop	r12
     468:	08 95       	ret

0000046a <activate>:
     46a:	ff 92       	push	r15
     46c:	0f 93       	push	r16
     46e:	1f 93       	push	r17
     470:	cf 93       	push	r28
     472:	df 93       	push	r29
     474:	ec 01       	movw	r28, r24
     476:	0e 94 ca 01 	call	0x394	; 0x394 <filteredReading>
     47a:	f9 2e       	mov	r15, r25
     47c:	fe 01       	movw	r30, r28
     47e:	ee 0f       	add	r30, r30
     480:	ff 1f       	adc	r31, r31
     482:	ec 54       	subi	r30, 0x4C	; 76
     484:	fe 4f       	sbci	r31, 0xFE	; 254
     486:	00 81       	ld	r16, Z
     488:	11 81       	ldd	r17, Z+1	; 0x01
     48a:	03 33       	cpi	r16, 0x33	; 51
     48c:	11 05       	cpc	r17, r1
     48e:	38 f0       	brcs	.+14     	; 0x49e <activate+0x34>
     490:	fe 01       	movw	r30, r28
     492:	ee 0f       	add	r30, r30
     494:	ff 1f       	adc	r31, r31
     496:	ec 53       	subi	r30, 0x3C	; 60
     498:	fe 4f       	sbci	r31, 0xFE	; 254
     49a:	11 82       	std	Z+1, r1	; 0x01
     49c:	10 82       	st	Z, r1
     49e:	fe 01       	movw	r30, r28
     4a0:	ee 0f       	add	r30, r30
     4a2:	ff 1f       	adc	r31, r31
     4a4:	ec 53       	subi	r30, 0x3C	; 60
     4a6:	fe 4f       	sbci	r31, 0xFE	; 254
     4a8:	60 81       	ld	r22, Z
     4aa:	71 81       	ldd	r23, Z+1	; 0x01
     4ac:	9f 2d       	mov	r25, r15
     4ae:	0e 94 66 01 	call	0x2cc	; 0x2cc <_activate>
     4b2:	00 97       	sbiw	r24, 0x00	; 0
     4b4:	99 f0       	breq	.+38     	; 0x4dc <activate+0x72>
     4b6:	ff 1c       	adc	r15, r15
     4b8:	ff 24       	eor	r15, r15
     4ba:	ff 1c       	adc	r15, r15
     4bc:	22 e0       	ldi	r18, 0x02	; 2
     4be:	30 e0       	ldi	r19, 0x00	; 0
     4c0:	2f 19       	sub	r18, r15
     4c2:	31 09       	sbc	r19, r1
     4c4:	cc 0f       	add	r28, r28
     4c6:	dd 1f       	adc	r29, r29
     4c8:	fe 01       	movw	r30, r28
     4ca:	ec 53       	subi	r30, 0x3C	; 60
     4cc:	fe 4f       	sbci	r31, 0xFE	; 254
     4ce:	31 83       	std	Z+1, r19	; 0x01
     4d0:	20 83       	st	Z, r18
     4d2:	cc 54       	subi	r28, 0x4C	; 76
     4d4:	de 4f       	sbci	r29, 0xFE	; 254
     4d6:	19 82       	std	Y+1, r1	; 0x01
     4d8:	18 82       	st	Y, r1
     4da:	08 c0       	rjmp	.+16     	; 0x4ec <activate+0x82>
     4dc:	cc 0f       	add	r28, r28
     4de:	dd 1f       	adc	r29, r29
     4e0:	cc 54       	subi	r28, 0x4C	; 76
     4e2:	de 4f       	sbci	r29, 0xFE	; 254
     4e4:	0f 5f       	subi	r16, 0xFF	; 255
     4e6:	1f 4f       	sbci	r17, 0xFF	; 255
     4e8:	19 83       	std	Y+1, r17	; 0x01
     4ea:	08 83       	st	Y, r16
     4ec:	df 91       	pop	r29
     4ee:	cf 91       	pop	r28
     4f0:	1f 91       	pop	r17
     4f2:	0f 91       	pop	r16
     4f4:	ff 90       	pop	r15
     4f6:	08 95       	ret

000004f8 <handle_ir>:
     4f8:	ef 92       	push	r14
     4fa:	ff 92       	push	r15
     4fc:	0f 93       	push	r16
     4fe:	1f 93       	push	r17
     500:	cf 93       	push	r28
     502:	df 93       	push	r29
     504:	ec 01       	movw	r28, r24
     506:	0e 94 35 02 	call	0x46a	; 0x46a <activate>
     50a:	8c 01       	movw	r16, r24
     50c:	fe 01       	movw	r30, r28
     50e:	ee 0f       	add	r30, r30
     510:	ff 1f       	adc	r31, r31
     512:	ec 52       	subi	r30, 0x2C	; 44
     514:	fe 4f       	sbci	r31, 0xFE	; 254
     516:	91 83       	std	Z+1, r25	; 0x01
     518:	80 83       	st	Z, r24
     51a:	ce 01       	movw	r24, r28
     51c:	8a 50       	subi	r24, 0x0A	; 10
     51e:	9e 4f       	sbci	r25, 0xFE	; 254
     520:	7c 01       	movw	r14, r24
     522:	fc 01       	movw	r30, r24
     524:	20 81       	ld	r18, Z
     526:	30 e0       	ldi	r19, 0x00	; 0
     528:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <program>
     52c:	a8 01       	movw	r20, r16
     52e:	be 01       	movw	r22, r28
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	0e 94 46 01 	call	0x28c	; 0x28c <dispatch>
     536:	f7 01       	movw	r30, r14
     538:	80 83       	st	Z, r24
     53a:	c8 01       	movw	r24, r16
     53c:	df 91       	pop	r29
     53e:	cf 91       	pop	r28
     540:	1f 91       	pop	r17
     542:	0f 91       	pop	r16
     544:	ff 90       	pop	r15
     546:	ef 90       	pop	r14
     548:	08 95       	ret

0000054a <s_init>:
     54a:	ae ef       	ldi	r26, 0xFE	; 254
     54c:	b1 e0       	ldi	r27, 0x01	; 1
     54e:	e6 e8       	ldi	r30, 0x86	; 134
     550:	f2 e0       	ldi	r31, 0x02	; 2
     552:	46 e6       	ldi	r20, 0x66	; 102
     554:	53 e0       	ldi	r21, 0x03	; 3
     556:	12 c0       	rjmp	.+36     	; 0x57c <s_init+0x32>
     558:	11 92       	st	Z+, r1
     55a:	11 92       	st	Z+, r1
     55c:	e8 17       	cp	r30, r24
     55e:	f9 07       	cpc	r31, r25
     560:	d9 f7       	brne	.-10     	; 0x558 <s_init+0xe>
     562:	9d 01       	movw	r18, r26
     564:	20 5f       	subi	r18, 0xF0	; 240
     566:	3f 4f       	sbci	r19, 0xFF	; 255
     568:	1d 92       	st	X+, r1
     56a:	1d 92       	st	X+, r1
     56c:	a2 17       	cp	r26, r18
     56e:	b3 07       	cpc	r27, r19
     570:	d9 f7       	brne	.-10     	; 0x568 <s_init+0x1e>
     572:	d9 01       	movw	r26, r18
     574:	fc 01       	movw	r30, r24
     576:	48 17       	cp	r20, r24
     578:	59 07       	cpc	r21, r25
     57a:	19 f0       	breq	.+6      	; 0x582 <s_init+0x38>
     57c:	cf 01       	movw	r24, r30
     57e:	4c 96       	adiw	r24, 0x1c	; 28
     580:	eb cf       	rjmp	.-42     	; 0x558 <s_init+0xe>
     582:	08 95       	ret

00000584 <_rstep>:
     584:	0e 94 bd 0a 	call	0x157a	; 0x157a <rand>
     588:	87 70       	andi	r24, 0x07	; 7
     58a:	90 78       	andi	r25, 0x80	; 128
     58c:	99 23       	and	r25, r25
     58e:	24 f4       	brge	.+8      	; 0x598 <_rstep+0x14>
     590:	01 97       	sbiw	r24, 0x01	; 1
     592:	88 6f       	ori	r24, 0xF8	; 248
     594:	9f 6f       	ori	r25, 0xFF	; 255
     596:	01 96       	adiw	r24, 0x01	; 1
     598:	03 96       	adiw	r24, 0x03	; 3
     59a:	08 95       	ret

0000059c <sparkle_fade>:
     59c:	cf 93       	push	r28
     59e:	df 93       	push	r29
     5a0:	67 2b       	or	r22, r23
     5a2:	41 f0       	breq	.+16     	; 0x5b4 <sparkle_fade+0x18>
     5a4:	20 91 e5 01 	lds	r18, 0x01E5	; 0x8001e5 <program>
     5a8:	28 30       	cpi	r18, 0x08	; 8
     5aa:	58 f0       	brcs	.+22     	; 0x5c2 <sparkle_fade+0x26>
     5ac:	fc 01       	movw	r30, r24
     5ae:	e3 58       	subi	r30, 0x83	; 131
     5b0:	fe 4f       	sbci	r31, 0xFE	; 254
     5b2:	40 83       	st	Z, r20
     5b4:	fc 01       	movw	r30, r24
     5b6:	e3 58       	subi	r30, 0x83	; 131
     5b8:	fe 4f       	sbci	r31, 0xFE	; 254
     5ba:	20 81       	ld	r18, Z
     5bc:	22 23       	and	r18, r18
     5be:	49 f0       	breq	.+18     	; 0x5d2 <sparkle_fade+0x36>
     5c0:	01 c0       	rjmp	.+2      	; 0x5c4 <sparkle_fade+0x28>
     5c2:	28 ec       	ldi	r18, 0xC8	; 200
     5c4:	21 50       	subi	r18, 0x01	; 1
     5c6:	fc 01       	movw	r30, r24
     5c8:	e3 58       	subi	r30, 0x83	; 131
     5ca:	fe 4f       	sbci	r31, 0xFE	; 254
     5cc:	20 83       	st	Z, r18
     5ce:	21 11       	cpse	r18, r1
     5d0:	04 c0       	rjmp	.+8      	; 0x5da <sparkle_fade+0x3e>
     5d2:	41 15       	cp	r20, r1
     5d4:	51 05       	cpc	r21, r1
     5d6:	09 f4       	brne	.+2      	; 0x5da <sparkle_fade+0x3e>
     5d8:	45 c0       	rjmp	.+138    	; 0x664 <sparkle_fade+0xc8>
     5da:	9c 01       	movw	r18, r24
     5dc:	22 0f       	add	r18, r18
     5de:	33 1f       	adc	r19, r19
     5e0:	f9 01       	movw	r30, r18
     5e2:	ea 59       	subi	r30, 0x9A	; 154
     5e4:	fc 4f       	sbci	r31, 0xFC	; 252
     5e6:	60 81       	ld	r22, Z
     5e8:	71 81       	ldd	r23, Z+1	; 0x01
     5ea:	f9 01       	movw	r30, r18
     5ec:	ea 51       	subi	r30, 0x1A	; 26
     5ee:	fe 4f       	sbci	r31, 0xFE	; 254
     5f0:	01 90       	ld	r0, Z+
     5f2:	f0 81       	ld	r31, Z
     5f4:	e0 2d       	mov	r30, r0
     5f6:	6e 9f       	mul	r22, r30
     5f8:	90 01       	movw	r18, r0
     5fa:	6f 9f       	mul	r22, r31
     5fc:	30 0d       	add	r19, r0
     5fe:	7e 9f       	mul	r23, r30
     600:	30 0d       	add	r19, r0
     602:	11 24       	eor	r1, r1
     604:	42 0f       	add	r20, r18
     606:	53 1f       	adc	r21, r19
     608:	4f 3f       	cpi	r20, 0xFF	; 255
     60a:	51 05       	cpc	r21, r1
     60c:	a9 f0       	breq	.+42     	; 0x638 <sparkle_fade+0x9c>
     60e:	a4 f0       	brlt	.+40     	; 0x638 <sparkle_fade+0x9c>
     610:	ec 01       	movw	r28, r24
     612:	cc 0f       	add	r28, r28
     614:	dd 1f       	adc	r29, r29
     616:	fe 01       	movw	r30, r28
     618:	ea 59       	subi	r30, 0x9A	; 154
     61a:	fc 4f       	sbci	r31, 0xFC	; 252
     61c:	71 95       	neg	r23
     61e:	61 95       	neg	r22
     620:	71 09       	sbc	r23, r1
     622:	71 83       	std	Z+1, r23	; 0x01
     624:	60 83       	st	Z, r22
     626:	0e 94 c2 02 	call	0x584	; 0x584 <_rstep>
     62a:	ca 51       	subi	r28, 0x1A	; 26
     62c:	de 4f       	sbci	r29, 0xFE	; 254
     62e:	99 83       	std	Y+1, r25	; 0x01
     630:	88 83       	st	Y, r24
     632:	8f ef       	ldi	r24, 0xFF	; 255
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	1b c0       	rjmp	.+54     	; 0x66e <sparkle_fade+0xd2>
     638:	55 23       	and	r21, r21
     63a:	bc f4       	brge	.+46     	; 0x66a <sparkle_fade+0xce>
     63c:	ec 01       	movw	r28, r24
     63e:	cc 0f       	add	r28, r28
     640:	dd 1f       	adc	r29, r29
     642:	fe 01       	movw	r30, r28
     644:	ea 59       	subi	r30, 0x9A	; 154
     646:	fc 4f       	sbci	r31, 0xFC	; 252
     648:	71 95       	neg	r23
     64a:	61 95       	neg	r22
     64c:	71 09       	sbc	r23, r1
     64e:	71 83       	std	Z+1, r23	; 0x01
     650:	60 83       	st	Z, r22
     652:	0e 94 c2 02 	call	0x584	; 0x584 <_rstep>
     656:	ca 51       	subi	r28, 0x1A	; 26
     658:	de 4f       	sbci	r29, 0xFE	; 254
     65a:	99 83       	std	Y+1, r25	; 0x01
     65c:	88 83       	st	Y, r24
     65e:	80 e0       	ldi	r24, 0x00	; 0
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	05 c0       	rjmp	.+10     	; 0x66e <sparkle_fade+0xd2>
     664:	80 e0       	ldi	r24, 0x00	; 0
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	02 c0       	rjmp	.+4      	; 0x66e <sparkle_fade+0xd2>
     66a:	84 2f       	mov	r24, r20
     66c:	95 2f       	mov	r25, r21
     66e:	df 91       	pop	r29
     670:	cf 91       	pop	r28
     672:	08 95       	ret

00000674 <_slow_fade>:
     674:	67 2b       	or	r22, r23
     676:	51 f0       	breq	.+20     	; 0x68c <_slow_fade+0x18>
     678:	fc 01       	movw	r30, r24
     67a:	eb 58       	subi	r30, 0x8B	; 139
     67c:	fe 4f       	sbci	r31, 0xFE	; 254
     67e:	10 82       	st	Z, r1
     680:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <program>
     684:	88 30       	cpi	r24, 0x08	; 8
     686:	f0 f0       	brcs	.+60     	; 0x6c4 <_slow_fade+0x50>
     688:	ca 01       	movw	r24, r20
     68a:	08 95       	ret
     68c:	fc 01       	movw	r30, r24
     68e:	eb 58       	subi	r30, 0x8B	; 139
     690:	fe 4f       	sbci	r31, 0xFE	; 254
     692:	30 81       	ld	r19, Z
     694:	3f 5f       	subi	r19, 0xFF	; 255
     696:	32 17       	cp	r19, r18
     698:	30 f4       	brcc	.+12     	; 0x6a6 <_slow_fade+0x32>
     69a:	fc 01       	movw	r30, r24
     69c:	eb 58       	subi	r30, 0x8B	; 139
     69e:	fe 4f       	sbci	r31, 0xFE	; 254
     6a0:	30 83       	st	Z, r19
     6a2:	ca 01       	movw	r24, r20
     6a4:	08 95       	ret
     6a6:	fc 01       	movw	r30, r24
     6a8:	eb 58       	subi	r30, 0x8B	; 139
     6aa:	fe 4f       	sbci	r31, 0xFE	; 254
     6ac:	10 82       	st	Z, r1
     6ae:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <step>
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	84 17       	cp	r24, r20
     6b6:	95 07       	cpc	r25, r21
     6b8:	44 f4       	brge	.+16     	; 0x6ca <_slow_fade+0x56>
     6ba:	9a 01       	movw	r18, r20
     6bc:	28 1b       	sub	r18, r24
     6be:	39 0b       	sbc	r19, r25
     6c0:	c9 01       	movw	r24, r18
     6c2:	08 95       	ret
     6c4:	8f ef       	ldi	r24, 0xFF	; 255
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	08 95       	ret
     6ca:	80 e0       	ldi	r24, 0x00	; 0
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	08 95       	ret

000006d0 <flash_fade>:
     6d0:	2a e0       	ldi	r18, 0x0A	; 10
     6d2:	0e 94 3a 03 	call	0x674	; 0x674 <_slow_fade>
     6d6:	08 95       	ret

000006d8 <basic_fade>:
     6d8:	21 e0       	ldi	r18, 0x01	; 1
     6da:	0e 94 3a 03 	call	0x674	; 0x674 <_slow_fade>
     6de:	08 95       	ret

000006e0 <slow_fade>:
     6e0:	23 e0       	ldi	r18, 0x03	; 3
     6e2:	0e 94 3a 03 	call	0x674	; 0x674 <_slow_fade>
     6e6:	08 95       	ret

000006e8 <init_sparkle>:
     6e8:	af 92       	push	r10
     6ea:	bf 92       	push	r11
     6ec:	cf 92       	push	r12
     6ee:	df 92       	push	r13
     6f0:	ef 92       	push	r14
     6f2:	ff 92       	push	r15
     6f4:	0f 93       	push	r16
     6f6:	1f 93       	push	r17
     6f8:	cf 93       	push	r28
     6fa:	df 93       	push	r29
     6fc:	c6 e6       	ldi	r28, 0x66	; 102
     6fe:	d3 e0       	ldi	r29, 0x03	; 3
     700:	06 ee       	ldi	r16, 0xE6	; 230
     702:	11 e0       	ldi	r17, 0x01	; 1
     704:	0f 2e       	mov	r0, r31
     706:	f6 e7       	ldi	r31, 0x76	; 118
     708:	ef 2e       	mov	r14, r31
     70a:	f3 e0       	ldi	r31, 0x03	; 3
     70c:	ff 2e       	mov	r15, r31
     70e:	f0 2d       	mov	r31, r0
     710:	aa 24       	eor	r10, r10
     712:	aa 94       	dec	r10
     714:	bb 24       	eor	r11, r11
     716:	ba 94       	dec	r11
     718:	cc 24       	eor	r12, r12
     71a:	c3 94       	inc	r12
     71c:	d1 2c       	mov	r13, r1
     71e:	0e 94 bd 0a 	call	0x157a	; 0x157a <rand>
     722:	81 70       	andi	r24, 0x01	; 1
     724:	90 78       	andi	r25, 0x80	; 128
     726:	99 23       	and	r25, r25
     728:	24 f4       	brge	.+8      	; 0x732 <init_sparkle+0x4a>
     72a:	01 97       	sbiw	r24, 0x01	; 1
     72c:	8e 6f       	ori	r24, 0xFE	; 254
     72e:	9f 6f       	ori	r25, 0xFF	; 255
     730:	01 96       	adiw	r24, 0x01	; 1
     732:	89 2b       	or	r24, r25
     734:	19 f4       	brne	.+6      	; 0x73c <init_sparkle+0x54>
     736:	8c 2d       	mov	r24, r12
     738:	9d 2d       	mov	r25, r13
     73a:	02 c0       	rjmp	.+4      	; 0x740 <init_sparkle+0x58>
     73c:	8a 2d       	mov	r24, r10
     73e:	9b 2d       	mov	r25, r11
     740:	89 93       	st	Y+, r24
     742:	99 93       	st	Y+, r25
     744:	0e 94 c2 02 	call	0x584	; 0x584 <_rstep>
     748:	f8 01       	movw	r30, r16
     74a:	81 93       	st	Z+, r24
     74c:	91 93       	st	Z+, r25
     74e:	8f 01       	movw	r16, r30
     750:	ce 15       	cp	r28, r14
     752:	df 05       	cpc	r29, r15
     754:	21 f7       	brne	.-56     	; 0x71e <init_sparkle+0x36>
     756:	df 91       	pop	r29
     758:	cf 91       	pop	r28
     75a:	1f 91       	pop	r17
     75c:	0f 91       	pop	r16
     75e:	ff 90       	pop	r15
     760:	ef 90       	pop	r14
     762:	df 90       	pop	r13
     764:	cf 90       	pop	r12
     766:	bf 90       	pop	r11
     768:	af 90       	pop	r10
     76a:	08 95       	ret

0000076c <setup>:
     76c:	e1 e6       	ldi	r30, 0x61	; 97
     76e:	f0 e0       	ldi	r31, 0x00	; 0
     770:	80 e8       	ldi	r24, 0x80	; 128
     772:	80 83       	st	Z, r24
     774:	10 82       	st	Z, r1
     776:	a8 95       	wdr
     778:	84 b7       	in	r24, 0x34	; 52
     77a:	87 7f       	andi	r24, 0xF7	; 247
     77c:	84 bf       	out	0x34, r24	; 52
     77e:	e0 e6       	ldi	r30, 0x60	; 96
     780:	f0 e0       	ldi	r31, 0x00	; 0
     782:	80 81       	ld	r24, Z
     784:	88 61       	ori	r24, 0x18	; 24
     786:	80 83       	st	Z, r24
     788:	10 82       	st	Z, r1
     78a:	ee e7       	ldi	r30, 0x7E	; 126
     78c:	f2 e0       	ldi	r31, 0x02	; 2
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	11 92       	st	Z+, r1
     794:	dc 01       	movw	r26, r24
     796:	aa 50       	subi	r26, 0x0A	; 10
     798:	be 4f       	sbci	r27, 0xFE	; 254
     79a:	1c 92       	st	X, r1
     79c:	01 96       	adiw	r24, 0x01	; 1
     79e:	88 30       	cpi	r24, 0x08	; 8
     7a0:	91 05       	cpc	r25, r1
     7a2:	b9 f7       	brne	.-18     	; 0x792 <setup+0x26>
     7a4:	81 e0       	ldi	r24, 0x01	; 1
     7a6:	84 b9       	out	0x04, r24	; 4
     7a8:	9f e3       	ldi	r25, 0x3F	; 63
     7aa:	95 b9       	out	0x05, r25	; 5
     7ac:	9f ef       	ldi	r25, 0xFF	; 255
     7ae:	9a b9       	out	0x0a, r25	; 10
     7b0:	1b b8       	out	0x0b, r1	; 11
     7b2:	97 b9       	out	0x07, r25	; 7
     7b4:	18 b8       	out	0x08, r1	; 8
     7b6:	11 b8       	out	0x01, r1	; 1
     7b8:	12 b8       	out	0x02, r1	; 2
     7ba:	97 e8       	ldi	r25, 0x87	; 135
     7bc:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     7c0:	92 e0       	ldi	r25, 0x02	; 2
     7c2:	94 bd       	out	0x24, r25	; 36
     7c4:	20 e8       	ldi	r18, 0x80	; 128
     7c6:	27 bd       	out	0x27, r18	; 39
     7c8:	85 bb       	out	0x15, r24	; 21
     7ca:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
     7ce:	85 bd       	out	0x25, r24	; 37
     7d0:	86 bb       	out	0x16, r24	; 22
     7d2:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
     7d6:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     7da:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     7de:	78 94       	sei
     7e0:	82 e0       	ldi	r24, 0x02	; 2
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	0e 94 cd 0a 	call	0x159a	; 0x159a <eeprom_read_byte>
     7e8:	80 31       	cpi	r24, 0x10	; 16
     7ea:	18 f4       	brcc	.+6      	; 0x7f2 <setup+0x86>
     7ec:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <program>
     7f0:	02 c0       	rjmp	.+4      	; 0x7f6 <setup+0x8a>
     7f2:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <program>
     7f6:	81 e0       	ldi	r24, 0x01	; 1
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	0e 94 cd 0a 	call	0x159a	; 0x159a <eeprom_read_byte>
     7fe:	84 30       	cpi	r24, 0x04	; 4
     800:	18 f4       	brcc	.+6      	; 0x808 <setup+0x9c>
     802:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <sensitivity>
     806:	03 c0       	rjmp	.+6      	; 0x80e <setup+0xa2>
     808:	82 e0       	ldi	r24, 0x02	; 2
     80a:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <sensitivity>
     80e:	80 e0       	ldi	r24, 0x00	; 0
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	0e 94 cd 0a 	call	0x159a	; 0x159a <eeprom_read_byte>
     816:	82 30       	cpi	r24, 0x02	; 2
     818:	18 f4       	brcc	.+6      	; 0x820 <setup+0xb4>
     81a:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <netConfig>
     81e:	02 c0       	rjmp	.+4      	; 0x824 <setup+0xb8>
     820:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <netConfig>
     824:	0e 94 74 03 	call	0x6e8	; 0x6e8 <init_sparkle>
     828:	0e 94 a5 02 	call	0x54a	; 0x54a <s_init>
     82c:	08 95       	ret

0000082e <_readIR>:
     82e:	20 91 4d 01 	lds	r18, 0x014D	; 0x80014d <started.2463>
     832:	30 91 4e 01 	lds	r19, 0x014E	; 0x80014e <started.2463+0x1>
     836:	23 2b       	or	r18, r19
     838:	81 f4       	brne	.+32     	; 0x85a <_readIR+0x2c>
     83a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     83e:	ea e7       	ldi	r30, 0x7A	; 122
     840:	f0 e0       	ldi	r31, 0x00	; 0
     842:	80 81       	ld	r24, Z
     844:	80 64       	ori	r24, 0x40	; 64
     846:	80 83       	st	Z, r24
     848:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <started.2463>
     84c:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <started.2463+0x1>
     850:	01 96       	adiw	r24, 0x01	; 1
     852:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <started.2463+0x1>
     856:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <started.2463>
     85a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     85e:	86 fd       	sbrc	r24, 6
     860:	0b c0       	rjmp	.+22     	; 0x878 <_readIR+0x4a>
     862:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     866:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     86a:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <started.2463+0x1>
     86e:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <started.2463>
     872:	82 2f       	mov	r24, r18
     874:	93 2f       	mov	r25, r19
     876:	08 95       	ret
     878:	8f ef       	ldi	r24, 0xFF	; 255
     87a:	9f ef       	ldi	r25, 0xFF	; 255
     87c:	08 95       	ret

0000087e <readIR>:
     87e:	1f 93       	push	r17
     880:	cf 93       	push	r28
     882:	df 93       	push	r29
     884:	18 2f       	mov	r17, r24
     886:	c0 91 53 01 	lds	r28, 0x0153	; 0x800153 <started.2452>
     88a:	d0 91 54 01 	lds	r29, 0x0154	; 0x800154 <started.2452+0x1>
     88e:	20 97       	sbiw	r28, 0x00	; 0
     890:	d9 f4       	brne	.+54     	; 0x8c8 <readIR+0x4a>
     892:	81 e0       	ldi	r24, 0x01	; 1
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	01 2e       	mov	r0, r17
     898:	02 c0       	rjmp	.+4      	; 0x89e <readIR+0x20>
     89a:	88 0f       	add	r24, r24
     89c:	99 1f       	adc	r25, r25
     89e:	0a 94       	dec	r0
     8a0:	e2 f7       	brpl	.-8      	; 0x89a <readIR+0x1c>
     8a2:	88 b9       	out	0x08, r24	; 8
     8a4:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <sum.2454+0x1>
     8a8:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <sum.2454>
     8ac:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <i.2453+0x1>
     8b0:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <i.2453>
     8b4:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <started.2452>
     8b8:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <started.2452+0x1>
     8bc:	01 96       	adiw	r24, 0x01	; 1
     8be:	90 93 54 01 	sts	0x0154, r25	; 0x800154 <started.2452+0x1>
     8c2:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <started.2452>
     8c6:	07 c0       	rjmp	.+14     	; 0x8d6 <readIR+0x58>
     8c8:	c0 91 4f 01 	lds	r28, 0x014F	; 0x80014f <i.2453>
     8cc:	d0 91 50 01 	lds	r29, 0x0150	; 0x800150 <i.2453+0x1>
     8d0:	ce 30       	cpi	r28, 0x0E	; 14
     8d2:	d1 05       	cpc	r29, r1
     8d4:	bc f4       	brge	.+46     	; 0x904 <readIR+0x86>
     8d6:	81 2f       	mov	r24, r17
     8d8:	0e 94 17 04 	call	0x82e	; 0x82e <_readIR>
     8dc:	99 23       	and	r25, r25
     8de:	f4 f0       	brlt	.+60     	; 0x91c <readIR+0x9e>
     8e0:	20 91 51 01 	lds	r18, 0x0151	; 0x800151 <sum.2454>
     8e4:	30 91 52 01 	lds	r19, 0x0152	; 0x800152 <sum.2454+0x1>
     8e8:	82 0f       	add	r24, r18
     8ea:	93 1f       	adc	r25, r19
     8ec:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <sum.2454+0x1>
     8f0:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <sum.2454>
     8f4:	21 96       	adiw	r28, 0x01	; 1
     8f6:	d0 93 50 01 	sts	0x0150, r29	; 0x800150 <i.2453+0x1>
     8fa:	c0 93 4f 01 	sts	0x014F, r28	; 0x80014f <i.2453>
     8fe:	ce 30       	cpi	r28, 0x0E	; 14
     900:	d1 05       	cpc	r29, r1
     902:	4c f3       	brlt	.-46     	; 0x8d6 <readIR+0x58>
     904:	18 b8       	out	0x08, r1	; 8
     906:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <started.2452+0x1>
     90a:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <started.2452>
     90e:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <sum.2454>
     912:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <sum.2454+0x1>
     916:	96 95       	lsr	r25
     918:	87 95       	ror	r24
     91a:	02 c0       	rjmp	.+4      	; 0x920 <readIR+0xa2>
     91c:	8f ef       	ldi	r24, 0xFF	; 255
     91e:	9f ef       	ldi	r25, 0xFF	; 255
     920:	df 91       	pop	r29
     922:	cf 91       	pop	r28
     924:	1f 91       	pop	r17
     926:	08 95       	ret

00000928 <readButton>:
     928:	83 b1       	in	r24, 0x03	; 3
     92a:	82 95       	swap	r24
     92c:	86 95       	lsr	r24
     92e:	87 70       	andi	r24, 0x07	; 7
     930:	91 e0       	ldi	r25, 0x01	; 1
     932:	89 27       	eor	r24, r25
     934:	81 70       	andi	r24, 0x01	; 1
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	08 95       	ret

0000093a <changeProgram>:
     93a:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <program>
     93e:	8f 5f       	subi	r24, 0xFF	; 255
     940:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <program>
     944:	90 91 e4 01 	lds	r25, 0x01E4	; 0x8001e4 <netConfig>
     948:	91 11       	cpse	r25, r1
     94a:	05 c0       	rjmp	.+10     	; 0x956 <changeProgram+0x1c>
     94c:	88 30       	cpi	r24, 0x08	; 8
     94e:	48 f0       	brcs	.+18     	; 0x962 <changeProgram+0x28>
     950:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <program>
     954:	08 95       	ret
     956:	91 30       	cpi	r25, 0x01	; 1
     958:	21 f4       	brne	.+8      	; 0x962 <changeProgram+0x28>
     95a:	80 31       	cpi	r24, 0x10	; 16
     95c:	10 f0       	brcs	.+4      	; 0x962 <changeProgram+0x28>
     95e:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <program>
     962:	08 95       	ret

00000964 <netConfigOn>:
     964:	1f 93       	push	r17
     966:	cf 93       	push	r28
     968:	df 93       	push	r29
     96a:	81 11       	cpse	r24, r1
     96c:	0c c0       	rjmp	.+24     	; 0x986 <netConfigOn+0x22>
     96e:	e6 ef       	ldi	r30, 0xF6	; 246
     970:	f1 e0       	ldi	r31, 0x01	; 1
     972:	10 82       	st	Z, r1
     974:	8f ef       	ldi	r24, 0xFF	; 255
     976:	81 83       	std	Z+1, r24	; 0x01
     978:	82 83       	std	Z+2, r24	; 0x02
     97a:	13 82       	std	Z+3, r1	; 0x03
     97c:	14 82       	std	Z+4, r1	; 0x04
     97e:	85 83       	std	Z+5, r24	; 0x05
     980:	86 83       	std	Z+6, r24	; 0x06
     982:	17 82       	std	Z+7, r1	; 0x07
     984:	35 c0       	rjmp	.+106    	; 0x9f0 <netConfigOn+0x8c>
     986:	80 e0       	ldi	r24, 0x00	; 0
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	fc 01       	movw	r30, r24
     98c:	ea 50       	subi	r30, 0x0A	; 10
     98e:	fe 4f       	sbci	r31, 0xFE	; 254
     990:	10 82       	st	Z, r1
     992:	01 96       	adiw	r24, 0x01	; 1
     994:	88 30       	cpi	r24, 0x08	; 8
     996:	91 05       	cpc	r25, r1
     998:	c1 f7       	brne	.-16     	; 0x98a <netConfigOn+0x26>
     99a:	c6 ef       	ldi	r28, 0xF6	; 246
     99c:	d1 e0       	ldi	r29, 0x01	; 1
     99e:	1f ef       	ldi	r17, 0xFF	; 255
     9a0:	18 83       	st	Y, r17
     9a2:	84 e1       	ldi	r24, 0x14	; 20
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	0e 94 21 01 	call	0x242	; 0x242 <delay_ms>
     9aa:	19 83       	std	Y+1, r17	; 0x01
     9ac:	84 e1       	ldi	r24, 0x14	; 20
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	0e 94 21 01 	call	0x242	; 0x242 <delay_ms>
     9b4:	1a 83       	std	Y+2, r17	; 0x02
     9b6:	84 e1       	ldi	r24, 0x14	; 20
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	0e 94 21 01 	call	0x242	; 0x242 <delay_ms>
     9be:	1b 83       	std	Y+3, r17	; 0x03
     9c0:	84 e1       	ldi	r24, 0x14	; 20
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	0e 94 21 01 	call	0x242	; 0x242 <delay_ms>
     9c8:	1f 83       	std	Y+7, r17	; 0x07
     9ca:	84 e1       	ldi	r24, 0x14	; 20
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	0e 94 21 01 	call	0x242	; 0x242 <delay_ms>
     9d2:	1e 83       	std	Y+6, r17	; 0x06
     9d4:	84 e1       	ldi	r24, 0x14	; 20
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	0e 94 21 01 	call	0x242	; 0x242 <delay_ms>
     9dc:	1d 83       	std	Y+5, r17	; 0x05
     9de:	84 e1       	ldi	r24, 0x14	; 20
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	0e 94 21 01 	call	0x242	; 0x242 <delay_ms>
     9e6:	1c 83       	std	Y+4, r17	; 0x04
     9e8:	84 e1       	ldi	r24, 0x14	; 20
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	0e 94 21 01 	call	0x242	; 0x242 <delay_ms>
     9f0:	df 91       	pop	r29
     9f2:	cf 91       	pop	r28
     9f4:	1f 91       	pop	r17
     9f6:	08 95       	ret

000009f8 <programOn>:
     9f8:	20 e0       	ldi	r18, 0x00	; 0
     9fa:	30 e0       	ldi	r19, 0x00	; 0
     9fc:	f9 01       	movw	r30, r18
     9fe:	ea 50       	subi	r30, 0x0A	; 10
     a00:	fe 4f       	sbci	r31, 0xFE	; 254
     a02:	10 82       	st	Z, r1
     a04:	2f 5f       	subi	r18, 0xFF	; 255
     a06:	3f 4f       	sbci	r19, 0xFF	; 255
     a08:	28 30       	cpi	r18, 0x08	; 8
     a0a:	31 05       	cpc	r19, r1
     a0c:	b9 f7       	brne	.-18     	; 0x9fc <programOn+0x4>
     a0e:	88 30       	cpi	r24, 0x08	; 8
     a10:	38 f4       	brcc	.+14     	; 0xa20 <programOn+0x28>
     a12:	e8 2f       	mov	r30, r24
     a14:	f0 e0       	ldi	r31, 0x00	; 0
     a16:	ea 50       	subi	r30, 0x0A	; 10
     a18:	fe 4f       	sbci	r31, 0xFE	; 254
     a1a:	8f ef       	ldi	r24, 0xFF	; 255
     a1c:	80 83       	st	Z, r24
     a1e:	08 95       	ret
     a20:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <counter.2480>
     a24:	21 e0       	ldi	r18, 0x01	; 1
     a26:	29 0f       	add	r18, r25
     a28:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <counter.2480>
     a2c:	93 33       	cpi	r25, 0x33	; 51
     a2e:	40 f0       	brcs	.+16     	; 0xa40 <programOn+0x48>
     a30:	20 91 4b 01 	lds	r18, 0x014B	; 0x80014b <state.2479>
     a34:	91 e0       	ldi	r25, 0x01	; 1
     a36:	92 1b       	sub	r25, r18
     a38:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <state.2479>
     a3c:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <counter.2480>
     a40:	e8 ef       	ldi	r30, 0xF8	; 248
     a42:	e8 0f       	add	r30, r24
     a44:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <state.2479>
     a48:	88 23       	and	r24, r24
     a4a:	31 f0       	breq	.+12     	; 0xa58 <programOn+0x60>
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	ea 50       	subi	r30, 0x0A	; 10
     a50:	fe 4f       	sbci	r31, 0xFE	; 254
     a52:	8f ef       	ldi	r24, 0xFF	; 255
     a54:	80 83       	st	Z, r24
     a56:	08 95       	ret
     a58:	f0 e0       	ldi	r31, 0x00	; 0
     a5a:	ea 50       	subi	r30, 0x0A	; 10
     a5c:	fe 4f       	sbci	r31, 0xFE	; 254
     a5e:	10 82       	st	Z, r1
     a60:	08 95       	ret

00000a62 <changeSensitivity>:
     a62:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <sensitivity>
     a66:	8f 5f       	subi	r24, 0xFF	; 255
     a68:	84 30       	cpi	r24, 0x04	; 4
     a6a:	18 f4       	brcc	.+6      	; 0xa72 <changeSensitivity+0x10>
     a6c:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <sensitivity>
     a70:	08 95       	ret
     a72:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <sensitivity>
     a76:	08 95       	ret

00000a78 <sensitivityOn>:
     a78:	44 e0       	ldi	r20, 0x04	; 4
     a7a:	50 e0       	ldi	r21, 0x00	; 0
     a7c:	20 e0       	ldi	r18, 0x00	; 0
     a7e:	30 e0       	ldi	r19, 0x00	; 0
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	6f ef       	ldi	r22, 0xFF	; 255
     a84:	82 17       	cp	r24, r18
     a86:	93 07       	cpc	r25, r19
     a88:	4c f0       	brlt	.+18     	; 0xa9c <sensitivityOn+0x24>
     a8a:	f9 01       	movw	r30, r18
     a8c:	ea 50       	subi	r30, 0x0A	; 10
     a8e:	fe 4f       	sbci	r31, 0xFE	; 254
     a90:	60 83       	st	Z, r22
     a92:	fa 01       	movw	r30, r20
     a94:	ea 50       	subi	r30, 0x0A	; 10
     a96:	fe 4f       	sbci	r31, 0xFE	; 254
     a98:	60 83       	st	Z, r22
     a9a:	08 c0       	rjmp	.+16     	; 0xaac <sensitivityOn+0x34>
     a9c:	f9 01       	movw	r30, r18
     a9e:	ea 50       	subi	r30, 0x0A	; 10
     aa0:	fe 4f       	sbci	r31, 0xFE	; 254
     aa2:	10 82       	st	Z, r1
     aa4:	fa 01       	movw	r30, r20
     aa6:	ea 50       	subi	r30, 0x0A	; 10
     aa8:	fe 4f       	sbci	r31, 0xFE	; 254
     aaa:	10 82       	st	Z, r1
     aac:	2f 5f       	subi	r18, 0xFF	; 255
     aae:	3f 4f       	sbci	r19, 0xFF	; 255
     ab0:	4f 5f       	subi	r20, 0xFF	; 255
     ab2:	5f 4f       	sbci	r21, 0xFF	; 255
     ab4:	24 30       	cpi	r18, 0x04	; 4
     ab6:	31 05       	cpc	r19, r1
     ab8:	29 f7       	brne	.-54     	; 0xa84 <sensitivityOn+0xc>
     aba:	08 95       	ret

00000abc <start_transfer>:
     abc:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <transfer_state>
     ac0:	91 11       	cpse	r25, r1
     ac2:	1b c0       	rjmp	.+54     	; 0xafa <start_transfer+0x3e>
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	9c 01       	movw	r18, r24
     ac8:	22 0f       	add	r18, r18
     aca:	33 1f       	adc	r19, r19
     acc:	88 0f       	add	r24, r24
     ace:	99 1f       	adc	r25, r25
     ad0:	88 0f       	add	r24, r24
     ad2:	99 1f       	adc	r25, r25
     ad4:	88 0f       	add	r24, r24
     ad6:	99 1f       	adc	r25, r25
     ad8:	82 0f       	add	r24, r18
     ada:	93 1f       	adc	r25, r19
     adc:	90 93 b0 01 	sts	0x01B0, r25	; 0x8001b0 <transfer_buffer+0x1>
     ae0:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <transfer_buffer>
     ae4:	40 93 ab 01 	sts	0x01AB, r20	; 0x8001ab <transfer_last>
     ae8:	50 93 ac 01 	sts	0x01AC, r21	; 0x8001ac <transfer_last+0x1>
     aec:	60 93 ad 01 	sts	0x01AD, r22	; 0x8001ad <transfer_last+0x2>
     af0:	70 93 ae 01 	sts	0x01AE, r23	; 0x8001ae <transfer_last+0x3>
     af4:	81 e0       	ldi	r24, 0x01	; 1
     af6:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <transfer_state>
     afa:	08 95       	ret

00000afc <receive_from>:
  continue_transfer(clock);
  do_receive(clock);  
}

int receive_from(uint8_t dir) {
  if ((dir == 0 || dir == 1) && bit_is_clear(PINB, PB1)) {
     afc:	82 30       	cpi	r24, 0x02	; 2
     afe:	10 f4       	brcc	.+4      	; 0xb04 <receive_from+0x8>
     b00:	19 9b       	sbis	0x03, 1	; 3
     b02:	15 c0       	rjmp	.+42     	; 0xb2e <receive_from+0x32>
    return 1;
  }

  if ((dir == 0 || dir == 2) && bit_is_clear(PINB, PB2)) {
     b04:	98 2f       	mov	r25, r24
     b06:	9d 7f       	andi	r25, 0xFD	; 253
     b08:	21 f4       	brne	.+8      	; 0xb12 <receive_from+0x16>
     b0a:	1a 9b       	sbis	0x03, 2	; 3
     b0c:	13 c0       	rjmp	.+38     	; 0xb34 <receive_from+0x38>
    return 2;
  }

  if ((dir == 0 || dir == 3) && bit_is_clear(PINB, PB3)) {
     b0e:	88 23       	and	r24, r24
     b10:	01 f1       	breq	.+64     	; 0xb52 <receive_from+0x56>
     b12:	83 30       	cpi	r24, 0x03	; 3
     b14:	29 f4       	brne	.+10     	; 0xb20 <receive_from+0x24>
     b16:	1b 99       	sbic	0x03, 3	; 3
     b18:	10 c0       	rjmp	.+32     	; 0xb3a <receive_from+0x3e>
    return 3;
     b1a:	83 e0       	ldi	r24, 0x03	; 3
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	08 95       	ret
  }

  if ((dir == 0 || dir == 4) && bit_is_clear(PINB, PB4)) {
     b20:	84 30       	cpi	r24, 0x04	; 4
     b22:	71 f4       	brne	.+28     	; 0xb40 <receive_from+0x44>
     b24:	1c 99       	sbic	0x03, 4	; 3
     b26:	0f c0       	rjmp	.+30     	; 0xb46 <receive_from+0x4a>
    return 4;
     b28:	84 e0       	ldi	r24, 0x04	; 4
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	08 95       	ret
  do_receive(clock);  
}

int receive_from(uint8_t dir) {
  if ((dir == 0 || dir == 1) && bit_is_clear(PINB, PB1)) {
    return 1;
     b2e:	81 e0       	ldi	r24, 0x01	; 1
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	08 95       	ret
  }

  if ((dir == 0 || dir == 2) && bit_is_clear(PINB, PB2)) {
    return 2;
     b34:	82 e0       	ldi	r24, 0x02	; 2
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	08 95       	ret

  if ((dir == 0 || dir == 4) && bit_is_clear(PINB, PB4)) {
    return 4;
  }

  return 0;
     b3a:	80 e0       	ldi	r24, 0x00	; 0
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	08 95       	ret
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	08 95       	ret
     b46:	80 e0       	ldi	r24, 0x00	; 0
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	08 95       	ret
  if ((dir == 0 || dir == 2) && bit_is_clear(PINB, PB2)) {
    return 2;
  }

  if ((dir == 0 || dir == 3) && bit_is_clear(PINB, PB3)) {
    return 3;
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	08 95       	ret

  if ((dir == 0 || dir == 2) && bit_is_clear(PINB, PB2)) {
    return 2;
  }

  if ((dir == 0 || dir == 3) && bit_is_clear(PINB, PB3)) {
     b52:	1b 9b       	sbis	0x03, 3	; 3
     b54:	fb cf       	rjmp	.-10     	; 0xb4c <receive_from+0x50>
     b56:	e6 cf       	rjmp	.-52     	; 0xb24 <receive_from+0x28>

00000b58 <receive>:
long receive_last = 0;


// transmission receive_val = { -1, -1 };

transmission receive(long clock) {
     b58:	cf 92       	push	r12
     b5a:	df 92       	push	r13
     b5c:	ef 92       	push	r14
     b5e:	ff 92       	push	r15
  transmission ret = {0, 0};

  if (transfer_state == t_send) {
     b60:	20 91 b1 01 	lds	r18, 0x01B1	; 0x8001b1 <transfer_state>
     b64:	21 30       	cpi	r18, 0x01	; 1
     b66:	19 f4       	brne	.+6      	; 0xb6e <receive+0x16>
    return ret;
     b68:	80 e0       	ldi	r24, 0x00	; 0
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	47 c0       	rjmp	.+142    	; 0xbfc <receive+0xa4>
  }

  if (clock - transfer_last < 100) {
     b6e:	c0 90 ab 01 	lds	r12, 0x01AB	; 0x8001ab <transfer_last>
     b72:	d0 90 ac 01 	lds	r13, 0x01AC	; 0x8001ac <transfer_last+0x1>
     b76:	e0 90 ad 01 	lds	r14, 0x01AD	; 0x8001ad <transfer_last+0x2>
     b7a:	f0 90 ae 01 	lds	r15, 0x01AE	; 0x8001ae <transfer_last+0x3>
     b7e:	dc 01       	movw	r26, r24
     b80:	cb 01       	movw	r24, r22
     b82:	8c 19       	sub	r24, r12
     b84:	9d 09       	sbc	r25, r13
     b86:	ae 09       	sbc	r26, r14
     b88:	bf 09       	sbc	r27, r15
     b8a:	84 36       	cpi	r24, 0x64	; 100
     b8c:	91 05       	cpc	r25, r1
     b8e:	a1 05       	cpc	r26, r1
     b90:	b1 05       	cpc	r27, r1
     b92:	1c f4       	brge	.+6      	; 0xb9a <receive+0x42>
    return ret;
     b94:	80 e0       	ldi	r24, 0x00	; 0
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	31 c0       	rjmp	.+98     	; 0xbfc <receive+0xa4>
  }

  // in receive
  if (transfer_state == t_recv) {
     b9a:	22 30       	cpi	r18, 0x02	; 2
     b9c:	f1 f4       	brne	.+60     	; 0xbda <receive+0x82>
    int val = receive_from(receive_dir);
     b9e:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <receive_dir>
     ba2:	0e 94 7e 05 	call	0xafc	; 0xafc <receive_from>

    // transfer ended
    if (val == 0) {
     ba6:	89 2b       	or	r24, r25
     ba8:	81 f4       	brne	.+32     	; 0xbca <receive+0x72>
      ret.val = receive_buffer / 9;
     baa:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <receive_buffer>
     bae:	99 e3       	ldi	r25, 0x39	; 57
     bb0:	89 9f       	mul	r24, r25
     bb2:	81 2d       	mov	r24, r1
     bb4:	11 24       	eor	r1, r1
      ret.dir = receive_dir;
     bb6:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <receive_dir>

      receive_dir = 0;
     bba:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <receive_dir>
      receive_buffer = 0;
     bbe:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <receive_buffer>
      transfer_state = t_idle;
     bc2:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <transfer_state>
      return ret;
     bc6:	86 95       	lsr	r24
     bc8:	19 c0       	rjmp	.+50     	; 0xbfc <receive+0xa4>
    }

    // ongoing
    receive_buffer++;
     bca:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <receive_buffer>
     bce:	8f 5f       	subi	r24, 0xFF	; 255
     bd0:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <receive_buffer>
    return ret;
     bd4:	80 e0       	ldi	r24, 0x00	; 0
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	11 c0       	rjmp	.+34     	; 0xbfc <receive+0xa4>
  }

  // idle, check for receive...
  receive_dir = receive_from(0);
     bda:	80 e0       	ldi	r24, 0x00	; 0
     bdc:	0e 94 7e 05 	call	0xafc	; 0xafc <receive_from>
     be0:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <receive_dir>
  if (receive_dir > 0) {
     be4:	88 23       	and	r24, r24
     be6:	41 f0       	breq	.+16     	; 0xbf8 <receive+0xa0>
    transfer_state = t_recv;
     be8:	82 e0       	ldi	r24, 0x02	; 2
     bea:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <transfer_state>
    receive_buffer++;
     bee:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <receive_buffer>
     bf2:	8f 5f       	subi	r24, 0xFF	; 255
     bf4:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <receive_buffer>
  }

  return ret;
     bf8:	80 e0       	ldi	r24, 0x00	; 0
     bfa:	90 e0       	ldi	r25, 0x00	; 0
}
     bfc:	ff 90       	pop	r15
     bfe:	ef 90       	pop	r14
     c00:	df 90       	pop	r13
     c02:	cf 90       	pop	r12
     c04:	08 95       	ret

00000c06 <is_idle>:
}

uint8_t is_idle() {
  int i;
  for (i=0; i< 8; i++) {
    if (compbuff[i] > 0) {
     c06:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <compbuff>
     c0a:	81 11       	cpse	r24, r1
     c0c:	0f c0       	rjmp	.+30     	; 0xc2c <is_idle+0x26>
     c0e:	21 e0       	ldi	r18, 0x01	; 1
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	f9 01       	movw	r30, r18
     c14:	ea 50       	subi	r30, 0x0A	; 10
     c16:	fe 4f       	sbci	r31, 0xFE	; 254
     c18:	90 81       	ld	r25, Z
     c1a:	91 11       	cpse	r25, r1
     c1c:	08 c0       	rjmp	.+16     	; 0xc2e <is_idle+0x28>
  }
}

uint8_t is_idle() {
  int i;
  for (i=0; i< 8; i++) {
     c1e:	2f 5f       	subi	r18, 0xFF	; 255
     c20:	3f 4f       	sbci	r19, 0xFF	; 255
     c22:	28 30       	cpi	r18, 0x08	; 8
     c24:	31 05       	cpc	r19, r1
     c26:	a9 f7       	brne	.-22     	; 0xc12 <is_idle+0xc>
    if (compbuff[i] > 0) {
      return 0;
    }
  }
  return 1;
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	08 95       	ret

uint8_t is_idle() {
  int i;
  for (i=0; i< 8; i++) {
    if (compbuff[i] > 0) {
      return 0;
     c2c:	80 e0       	ldi	r24, 0x00	; 0
    }
  }
  return 1;
}
     c2e:	08 95       	ret

00000c30 <net_dispatch>:

int net_dispatch(int val) {
  int _program = program - 8;
     c30:	20 91 e5 01 	lds	r18, 0x01E5	; 0x8001e5 <program>
     c34:	30 e0       	ldi	r19, 0x00	; 0
     c36:	28 50       	subi	r18, 0x08	; 8
     c38:	31 09       	sbc	r19, r1

  if (_program >= 0 && _program < 8) {
     c3a:	28 30       	cpi	r18, 0x08	; 8
     c3c:	31 05       	cpc	r19, r1
     c3e:	50 f4       	brcc	.+20     	; 0xc54 <net_dispatch+0x24>
    return netHandlers[_program](val);
     c40:	22 0f       	add	r18, r18
     c42:	33 1f       	adc	r19, r19
     c44:	f9 01       	movw	r30, r18
     c46:	e7 5e       	subi	r30, 0xE7	; 231
     c48:	fe 4f       	sbci	r31, 0xFE	; 254
     c4a:	01 90       	ld	r0, Z+
     c4c:	f0 81       	ld	r31, Z
     c4e:	e0 2d       	mov	r30, r0
     c50:	09 95       	icall
     c52:	08 95       	ret
  }
  
  return 0;
     c54:	80 e0       	ldi	r24, 0x00	; 0
     c56:	90 e0       	ldi	r25, 0x00	; 0
}
     c58:	08 95       	ret

00000c5a <broadcast>:
int net_decrement(int val) {
  return val - 2;
}

void broadcast(int val) {
  if (val) {
     c5a:	89 2b       	or	r24, r25
     c5c:	11 f0       	breq	.+4      	; 0xc62 <broadcast+0x8>
    PORTB &= ~(1);
     c5e:	28 98       	cbi	0x05, 0	; 5
     c60:	08 95       	ret
  } else {
    PORTB |= 1;
     c62:	28 9a       	sbi	0x05, 0	; 5
     c64:	08 95       	ret

00000c66 <continue_transfer>:
    transfer_state = t_send;
  }
}

void continue_transfer(long clock) {
  if (transfer_state == t_send) {
     c66:	20 91 b1 01 	lds	r18, 0x01B1	; 0x8001b1 <transfer_state>
     c6a:	21 30       	cpi	r18, 0x01	; 1
     c6c:	21 f5       	brne	.+72     	; 0xcb6 <continue_transfer+0x50>
     c6e:	dc 01       	movw	r26, r24
     c70:	cb 01       	movw	r24, r22
    transfer_last = clock;
     c72:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <transfer_last>
     c76:	90 93 ac 01 	sts	0x01AC, r25	; 0x8001ac <transfer_last+0x1>
     c7a:	a0 93 ad 01 	sts	0x01AD, r26	; 0x8001ad <transfer_last+0x2>
     c7e:	b0 93 ae 01 	sts	0x01AE, r27	; 0x8001ae <transfer_last+0x3>

    if (transfer_buffer > 0) {
     c82:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <transfer_buffer>
     c86:	90 91 b0 01 	lds	r25, 0x01B0	; 0x8001b0 <transfer_buffer+0x1>
     c8a:	89 2b       	or	r24, r25
     c8c:	71 f0       	breq	.+28     	; 0xcaa <continue_transfer+0x44>
      broadcast(1);
     c8e:	81 e0       	ldi	r24, 0x01	; 1
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	0e 94 2d 06 	call	0xc5a	; 0xc5a <broadcast>
      transfer_buffer--;
     c96:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <transfer_buffer>
     c9a:	90 91 b0 01 	lds	r25, 0x01B0	; 0x8001b0 <transfer_buffer+0x1>
     c9e:	01 97       	sbiw	r24, 0x01	; 1
     ca0:	90 93 b0 01 	sts	0x01B0, r25	; 0x8001b0 <transfer_buffer+0x1>
     ca4:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <transfer_buffer>
     ca8:	08 95       	ret
    } else {
      transfer_state = t_idle;
     caa:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <transfer_state>
      broadcast(0);
     cae:	80 e0       	ldi	r24, 0x00	; 0
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	0e 94 2d 06 	call	0xc5a	; 0xc5a <broadcast>
     cb6:	08 95       	ret

00000cb8 <setFromDir>:
    PORTB |= 1;
  }
}


void setFromDir(uint8_t dir, uint8_t val) {
     cb8:	cf 93       	push	r28
     cba:	df 93       	push	r29
  if ((dir == 4) || (dir == 1)) {
     cbc:	84 30       	cpi	r24, 0x04	; 4
     cbe:	11 f0       	breq	.+4      	; 0xcc4 <setFromDir+0xc>
     cc0:	81 30       	cpi	r24, 0x01	; 1
     cc2:	59 f5       	brne	.+86     	; 0xd1a <setFromDir+0x62>
    dispatch(program, 0, 1, val);
     cc4:	c6 2f       	mov	r28, r22
     cc6:	d0 e0       	ldi	r29, 0x00	; 0
     cc8:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <program>
     ccc:	9e 01       	movw	r18, r28
     cce:	41 e0       	ldi	r20, 0x01	; 1
     cd0:	50 e0       	ldi	r21, 0x00	; 0
     cd2:	60 e0       	ldi	r22, 0x00	; 0
     cd4:	70 e0       	ldi	r23, 0x00	; 0
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	0e 94 46 01 	call	0x28c	; 0x28c <dispatch>
    dispatch(program, 1, 1, val);
     cdc:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <program>
     ce0:	9e 01       	movw	r18, r28
     ce2:	41 e0       	ldi	r20, 0x01	; 1
     ce4:	50 e0       	ldi	r21, 0x00	; 0
     ce6:	61 e0       	ldi	r22, 0x01	; 1
     ce8:	70 e0       	ldi	r23, 0x00	; 0
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	0e 94 46 01 	call	0x28c	; 0x28c <dispatch>
    dispatch(program, 4, 1, val);
     cf0:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <program>
     cf4:	9e 01       	movw	r18, r28
     cf6:	41 e0       	ldi	r20, 0x01	; 1
     cf8:	50 e0       	ldi	r21, 0x00	; 0
     cfa:	64 e0       	ldi	r22, 0x04	; 4
     cfc:	70 e0       	ldi	r23, 0x00	; 0
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	0e 94 46 01 	call	0x28c	; 0x28c <dispatch>
    dispatch(program, 5, 1, val);
     d04:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <program>
     d08:	9e 01       	movw	r18, r28
     d0a:	41 e0       	ldi	r20, 0x01	; 1
     d0c:	50 e0       	ldi	r21, 0x00	; 0
     d0e:	65 e0       	ldi	r22, 0x05	; 5
     d10:	70 e0       	ldi	r23, 0x00	; 0
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	0e 94 46 01 	call	0x28c	; 0x28c <dispatch>
     d18:	2d c0       	rjmp	.+90     	; 0xd74 <setFromDir+0xbc>
  } else if ((dir == 2) || (dir == 3)) {
     d1a:	82 50       	subi	r24, 0x02	; 2
     d1c:	82 30       	cpi	r24, 0x02	; 2
     d1e:	50 f5       	brcc	.+84     	; 0xd74 <setFromDir+0xbc>
    dispatch(program, 2, 1, val);
     d20:	c6 2f       	mov	r28, r22
     d22:	d0 e0       	ldi	r29, 0x00	; 0
     d24:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <program>
     d28:	9e 01       	movw	r18, r28
     d2a:	41 e0       	ldi	r20, 0x01	; 1
     d2c:	50 e0       	ldi	r21, 0x00	; 0
     d2e:	62 e0       	ldi	r22, 0x02	; 2
     d30:	70 e0       	ldi	r23, 0x00	; 0
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	0e 94 46 01 	call	0x28c	; 0x28c <dispatch>
    dispatch(program, 3, 1, val);
     d38:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <program>
     d3c:	9e 01       	movw	r18, r28
     d3e:	41 e0       	ldi	r20, 0x01	; 1
     d40:	50 e0       	ldi	r21, 0x00	; 0
     d42:	63 e0       	ldi	r22, 0x03	; 3
     d44:	70 e0       	ldi	r23, 0x00	; 0
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	0e 94 46 01 	call	0x28c	; 0x28c <dispatch>
    dispatch(program, 6, 1, val);
     d4c:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <program>
     d50:	9e 01       	movw	r18, r28
     d52:	41 e0       	ldi	r20, 0x01	; 1
     d54:	50 e0       	ldi	r21, 0x00	; 0
     d56:	66 e0       	ldi	r22, 0x06	; 6
     d58:	70 e0       	ldi	r23, 0x00	; 0
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	0e 94 46 01 	call	0x28c	; 0x28c <dispatch>
    dispatch(program, 7, 1, val);
     d60:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <program>
     d64:	9e 01       	movw	r18, r28
     d66:	41 e0       	ldi	r20, 0x01	; 1
     d68:	50 e0       	ldi	r21, 0x00	; 0
     d6a:	67 e0       	ldi	r22, 0x07	; 7
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	0e 94 46 01 	call	0x28c	; 0x28c <dispatch>
  }
}
     d74:	df 91       	pop	r29
     d76:	cf 91       	pop	r28
     d78:	08 95       	ret

00000d7a <setAll>:

void setAll(uint8_t val) {
     d7a:	0f 93       	push	r16
     d7c:	1f 93       	push	r17
     d7e:	cf 93       	push	r28
     d80:	df 93       	push	r29
  int i;
  for (i=0; i< 8; i++) {
     d82:	c0 e0       	ldi	r28, 0x00	; 0
     d84:	d0 e0       	ldi	r29, 0x00	; 0
    compbuff[i] = dispatch(program, i, 1, val);
     d86:	08 2f       	mov	r16, r24
     d88:	10 e0       	ldi	r17, 0x00	; 0
     d8a:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <program>
     d8e:	98 01       	movw	r18, r16
     d90:	41 e0       	ldi	r20, 0x01	; 1
     d92:	50 e0       	ldi	r21, 0x00	; 0
     d94:	be 01       	movw	r22, r28
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	0e 94 46 01 	call	0x28c	; 0x28c <dispatch>
     d9c:	fe 01       	movw	r30, r28
     d9e:	ea 50       	subi	r30, 0x0A	; 10
     da0:	fe 4f       	sbci	r31, 0xFE	; 254
     da2:	80 83       	st	Z, r24
  }
}

void setAll(uint8_t val) {
  int i;
  for (i=0; i< 8; i++) {
     da4:	21 96       	adiw	r28, 0x01	; 1
     da6:	c8 30       	cpi	r28, 0x08	; 8
     da8:	d1 05       	cpc	r29, r1
     daa:	79 f7       	brne	.-34     	; 0xd8a <setAll+0x10>
    compbuff[i] = dispatch(program, i, 1, val);
  }
}
     dac:	df 91       	pop	r29
     dae:	cf 91       	pop	r28
     db0:	1f 91       	pop	r17
     db2:	0f 91       	pop	r16
     db4:	08 95       	ret

00000db6 <do_send>:

  return ret;
}

uint8_t in_network() {
  return program > 7;
     db6:	e0 91 e5 01 	lds	r30, 0x01E5	; 0x8001e5 <program>
}

void do_send(int act, long clock) {
  if (! in_network()) {
     dba:	e8 30       	cpi	r30, 0x08	; 8
     dbc:	60 f0       	brcs	.+24     	; 0xdd6 <do_send+0x20>
    return;
  }

  uint8_t val = netDistance[program - 8];

  if (act > 0) {
     dbe:	18 16       	cp	r1, r24
     dc0:	19 06       	cpc	r1, r25
     dc2:	4c f4       	brge	.+18     	; 0xdd6 <do_send+0x20>
void do_send(int act, long clock) {
  if (! in_network()) {
    return;
  }

  uint8_t val = netDistance[program - 8];
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	e7 5f       	subi	r30, 0xF7	; 247
     dc8:	fe 4f       	sbci	r31, 0xFE	; 254

  if (act > 0) {
    start_transfer(val, clock);
     dca:	80 81       	ld	r24, Z
     dcc:	0e 94 5e 05 	call	0xabc	; 0xabc <start_transfer>
    setAll(255);
     dd0:	8f ef       	ldi	r24, 0xFF	; 255
     dd2:	0e 94 bd 06 	call	0xd7a	; 0xd7a <setAll>
     dd6:	08 95       	ret

00000dd8 <do_receive>:
  }

  return 0;
}

void do_receive(unsigned long clock) {
     dd8:	bf 92       	push	r11
     dda:	cf 92       	push	r12
     ddc:	df 92       	push	r13
     dde:	ef 92       	push	r14
     de0:	ff 92       	push	r15
     de2:	0f 93       	push	r16
     de4:	1f 93       	push	r17
     de6:	cf 93       	push	r28
     de8:	df 93       	push	r29
     dea:	6b 01       	movw	r12, r22
     dec:	7c 01       	movw	r14, r24
  transmission trans = receive(clock);
     dee:	0e 94 ac 05 	call	0xb58	; 0xb58 <receive>
     df2:	b9 2e       	mov	r11, r25
  int val = trans.val;
     df4:	c8 2f       	mov	r28, r24
     df6:	d0 e0       	ldi	r29, 0x00	; 0
  if (val <= 0) {
     df8:	1c 16       	cp	r1, r28
     dfa:	1d 06       	cpc	r1, r29
     dfc:	74 f5       	brge	.+92     	; 0xe5a <do_receive+0x82>
    return;
  }

  if (! is_idle()) {
     dfe:	0e 94 03 06 	call	0xc06	; 0xc06 <is_idle>
     e02:	88 23       	and	r24, r24
     e04:	51 f1       	breq	.+84     	; 0xe5a <do_receive+0x82>
     e06:	c9 30       	cpi	r28, 0x09	; 9
     e08:	d1 05       	cpc	r29, r1
     e0a:	14 f0       	brlt	.+4      	; 0xe10 <do_receive+0x38>
     e0c:	c8 e0       	ldi	r28, 0x08	; 8
     e0e:	d0 e0       	ldi	r29, 0x00	; 0

  if (val > 8) {
    val = 8;
  }

  int next = net_dispatch(val);
     e10:	ce 01       	movw	r24, r28
     e12:	0e 94 18 06 	call	0xc30	; 0xc30 <net_dispatch>
     e16:	8c 01       	movw	r16, r24
  
  if (next > 0) {
     e18:	18 16       	cp	r1, r24
     e1a:	19 06       	cpc	r1, r25
     e1c:	24 f4       	brge	.+8      	; 0xe26 <do_receive+0x4e>
    start_transfer(next, clock);
     e1e:	b7 01       	movw	r22, r14
     e20:	a6 01       	movw	r20, r12
     e22:	0e 94 5e 05 	call	0xabc	; 0xabc <start_transfer>
  }

  int level = 255;
  if (dynamicLevel[program - 8]) {
     e26:	e0 91 e5 01 	lds	r30, 0x01E5	; 0x8001e5 <program>
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	ef 5f       	subi	r30, 0xFF	; 255
     e2e:	fe 4f       	sbci	r31, 0xFE	; 254
     e30:	80 81       	ld	r24, Z
     e32:	88 23       	and	r24, r24
     e34:	39 f0       	breq	.+14     	; 0xe44 <do_receive+0x6c>
    level = 31 * val;
     e36:	2f e1       	ldi	r18, 0x1F	; 31
     e38:	2c 9f       	mul	r18, r28
     e3a:	c0 01       	movw	r24, r0
     e3c:	2d 9f       	mul	r18, r29
     e3e:	90 0d       	add	r25, r0
     e40:	11 24       	eor	r1, r1
     e42:	02 c0       	rjmp	.+4      	; 0xe48 <do_receive+0x70>
  
  if (next > 0) {
    start_transfer(next, clock);
  }

  int level = 255;
     e44:	8f ef       	ldi	r24, 0xFF	; 255
     e46:	90 e0       	ldi	r25, 0x00	; 0
  if (dynamicLevel[program - 8]) {
    level = 31 * val;
  }

  if (next < 0) {
     e48:	11 23       	and	r17, r17
     e4a:	2c f4       	brge	.+10     	; 0xe56 <do_receive+0x7e>
    setFromDir(trans.dir, level);
     e4c:	68 2f       	mov	r22, r24
     e4e:	8b 2d       	mov	r24, r11
     e50:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <setFromDir>
     e54:	02 c0       	rjmp	.+4      	; 0xe5a <do_receive+0x82>
  } else {
    setAll(level);
     e56:	0e 94 bd 06 	call	0xd7a	; 0xd7a <setAll>
  }
}
     e5a:	df 91       	pop	r29
     e5c:	cf 91       	pop	r28
     e5e:	1f 91       	pop	r17
     e60:	0f 91       	pop	r16
     e62:	ff 90       	pop	r15
     e64:	ef 90       	pop	r14
     e66:	df 90       	pop	r13
     e68:	cf 90       	pop	r12
     e6a:	bf 90       	pop	r11
     e6c:	08 95       	ret

00000e6e <handle_network>:
    start_transfer(val, clock);
    setAll(255);
  }
}

void handle_network(long clock) {
     e6e:	cf 92       	push	r12
     e70:	df 92       	push	r13
     e72:	ef 92       	push	r14
     e74:	ff 92       	push	r15
  if (! in_network()) {
     e76:	20 91 e5 01 	lds	r18, 0x01E5	; 0x8001e5 <program>
     e7a:	28 30       	cpi	r18, 0x08	; 8
     e7c:	40 f0       	brcs	.+16     	; 0xe8e <handle_network+0x20>
     e7e:	6b 01       	movw	r12, r22
     e80:	7c 01       	movw	r14, r24
    return;
  }

  continue_transfer(clock);
     e82:	0e 94 33 06 	call	0xc66	; 0xc66 <continue_transfer>
  do_receive(clock);  
     e86:	c7 01       	movw	r24, r14
     e88:	b6 01       	movw	r22, r12
     e8a:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <do_receive>
}
     e8e:	ff 90       	pop	r15
     e90:	ef 90       	pop	r14
     e92:	df 90       	pop	r13
     e94:	cf 90       	pop	r12
     e96:	08 95       	ret

00000e98 <__vector_16>:
  }
}

// interrupts

ISR (TIMER0_COMPA_vect) {
     e98:	1f 92       	push	r1
     e9a:	0f 92       	push	r0
     e9c:	0f b6       	in	r0, 0x3f	; 63
     e9e:	0f 92       	push	r0
     ea0:	11 24       	eor	r1, r1
     ea2:	2f 93       	push	r18
     ea4:	8f 93       	push	r24
     ea6:	9f 93       	push	r25
  static uint8_t pwmCnt = 0;

  pwmCnt++;
     ea8:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <__data_end>
     eac:	8f 5f       	subi	r24, 0xFF	; 255
     eae:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <__data_end>

  uint8_t pd = 0;

  if (compbuff[0]  > pwmCnt) {
     eb2:	20 91 f6 01 	lds	r18, 0x01F6	; 0x8001f6 <compbuff>
ISR (TIMER0_COMPA_vect) {
  static uint8_t pwmCnt = 0;

  pwmCnt++;

  uint8_t pd = 0;
     eb6:	91 e0       	ldi	r25, 0x01	; 1
     eb8:	82 17       	cp	r24, r18
     eba:	08 f0       	brcs	.+2      	; 0xebe <__vector_16+0x26>
     ebc:	90 e0       	ldi	r25, 0x00	; 0

  if (compbuff[0]  > pwmCnt) {
    pd = 1;
  }

  if (compbuff[1]  > pwmCnt) {
     ebe:	20 91 f7 01 	lds	r18, 0x01F7	; 0x8001f7 <compbuff+0x1>
     ec2:	82 17       	cp	r24, r18
     ec4:	08 f4       	brcc	.+2      	; 0xec8 <__vector_16+0x30>
    pd |= 2;
     ec6:	92 60       	ori	r25, 0x02	; 2
  }

  if (compbuff[2]  > pwmCnt) {
     ec8:	20 91 f8 01 	lds	r18, 0x01F8	; 0x8001f8 <compbuff+0x2>
     ecc:	82 17       	cp	r24, r18
     ece:	08 f4       	brcc	.+2      	; 0xed2 <__vector_16+0x3a>
    pd |= 4;
     ed0:	94 60       	ori	r25, 0x04	; 4
  }

  if (compbuff[3]  > pwmCnt) {
     ed2:	20 91 f9 01 	lds	r18, 0x01F9	; 0x8001f9 <compbuff+0x3>
     ed6:	82 17       	cp	r24, r18
     ed8:	08 f4       	brcc	.+2      	; 0xedc <__vector_16+0x44>
    pd |= 8;
     eda:	98 60       	ori	r25, 0x08	; 8
  }

  if (compbuff[4]  > pwmCnt) {
     edc:	20 91 fa 01 	lds	r18, 0x01FA	; 0x8001fa <compbuff+0x4>
     ee0:	82 17       	cp	r24, r18
     ee2:	08 f4       	brcc	.+2      	; 0xee6 <__vector_16+0x4e>
    pd |= 16;
     ee4:	90 61       	ori	r25, 0x10	; 16
  }

  if (compbuff[5]  > pwmCnt) {
     ee6:	20 91 fb 01 	lds	r18, 0x01FB	; 0x8001fb <compbuff+0x5>
     eea:	82 17       	cp	r24, r18
     eec:	08 f4       	brcc	.+2      	; 0xef0 <__vector_16+0x58>
    pd |= 32;
     eee:	90 62       	ori	r25, 0x20	; 32
  }

  if (compbuff[6]  > pwmCnt) {
     ef0:	20 91 fc 01 	lds	r18, 0x01FC	; 0x8001fc <compbuff+0x6>
     ef4:	82 17       	cp	r24, r18
     ef6:	08 f4       	brcc	.+2      	; 0xefa <__vector_16+0x62>
    pd |= 64;
     ef8:	90 64       	ori	r25, 0x40	; 64
  }

  if (compbuff[7]  > pwmCnt) {
     efa:	20 91 fd 01 	lds	r18, 0x01FD	; 0x8001fd <compbuff+0x7>
     efe:	82 17       	cp	r24, r18
     f00:	08 f4       	brcc	.+2      	; 0xf04 <__vector_16+0x6c>
    pd |= 128;
     f02:	90 68       	ori	r25, 0x80	; 128
  }

  PORTD = pd;
     f04:	9b b9       	out	0x0b, r25	; 11
}
     f06:	9f 91       	pop	r25
     f08:	8f 91       	pop	r24
     f0a:	2f 91       	pop	r18
     f0c:	0f 90       	pop	r0
     f0e:	0f be       	out	0x3f, r0	; 63
     f10:	0f 90       	pop	r0
     f12:	1f 90       	pop	r1
     f14:	18 95       	reti

00000f16 <__vector_15>:

unsigned long timer_clock = 0;
ISR (TIMER1_OVF_vect) {
     f16:	1f 92       	push	r1
     f18:	0f 92       	push	r0
     f1a:	0f b6       	in	r0, 0x3f	; 63
     f1c:	0f 92       	push	r0
     f1e:	11 24       	eor	r1, r1
     f20:	8f 93       	push	r24
     f22:	9f 93       	push	r25
     f24:	af 93       	push	r26
     f26:	bf 93       	push	r27
  timer_clock++;
     f28:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <timer_clock>
     f2c:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <timer_clock+0x1>
     f30:	a0 91 a7 01 	lds	r26, 0x01A7	; 0x8001a7 <timer_clock+0x2>
     f34:	b0 91 a8 01 	lds	r27, 0x01A8	; 0x8001a8 <timer_clock+0x3>
     f38:	01 96       	adiw	r24, 0x01	; 1
     f3a:	a1 1d       	adc	r26, r1
     f3c:	b1 1d       	adc	r27, r1
     f3e:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <timer_clock>
     f42:	90 93 a6 01 	sts	0x01A6, r25	; 0x8001a6 <timer_clock+0x1>
     f46:	a0 93 a7 01 	sts	0x01A7, r26	; 0x8001a7 <timer_clock+0x2>
     f4a:	b0 93 a8 01 	sts	0x01A8, r27	; 0x8001a8 <timer_clock+0x3>
}
     f4e:	bf 91       	pop	r27
     f50:	af 91       	pop	r26
     f52:	9f 91       	pop	r25
     f54:	8f 91       	pop	r24
     f56:	0f 90       	pop	r0
     f58:	0f be       	out	0x3f, r0	; 63
     f5a:	0f 90       	pop	r0
     f5c:	1f 90       	pop	r1
     f5e:	18 95       	reti

00000f60 <tclock>:

unsigned long tclock() {
  unsigned long m;
  uint8_t oldSREG = SREG;
     f60:	2f b7       	in	r18, 0x3f	; 63
  
  cli();
     f62:	f8 94       	cli
  m = timer_clock;
     f64:	60 91 a5 01 	lds	r22, 0x01A5	; 0x8001a5 <timer_clock>
     f68:	70 91 a6 01 	lds	r23, 0x01A6	; 0x8001a6 <timer_clock+0x1>
     f6c:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <timer_clock+0x2>
     f70:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <timer_clock+0x3>
  SREG = oldSREG;
     f74:	2f bf       	out	0x3f, r18	; 63

  return m;
}
     f76:	08 95       	ret

00000f78 <loop>:

int last_act[] = {0,0,0,0,0,0,0,0};

#define configTime 40

void loop() {
     f78:	cf 93       	push	r28
     f7a:	df 93       	push	r29
     f7c:	cd b7       	in	r28, 0x3d	; 61
     f7e:	de b7       	in	r29, 0x3e	; 62
     f80:	2e 97       	sbiw	r28, 0x0e	; 14
     f82:	0f b6       	in	r0, 0x3f	; 63
     f84:	f8 94       	cli
     f86:	de bf       	out	0x3e, r29	; 62
     f88:	0f be       	out	0x3f, r0	; 63
     f8a:	cd bf       	out	0x3d, r28	; 61

  int in_config = 0;
  int last_button = 0;
  int switched = 0;

  unsigned long buttonStart = 0;
     f8c:	19 86       	std	Y+9, r1	; 0x09
     f8e:	1a 86       	std	Y+10, r1	; 0x0a
     f90:	1b 86       	std	Y+11, r1	; 0x0b
     f92:	1c 86       	std	Y+12, r1	; 0x0c

  int16_t bright = 0;

  int in_config = 0;
  int last_button = 0;
  int switched = 0;
     f94:	18 86       	std	Y+8, r1	; 0x08
     f96:	1f 82       	std	Y+7, r1	; 0x07
  unsigned long lastButton = 0;

  int16_t bright = 0;

  int in_config = 0;
  int last_button = 0;
     f98:	1e 82       	std	Y+6, r1	; 0x06
     f9a:	1d 82       	std	Y+5, r1	; 0x05
  unsigned long buttonInterval = 100;
  unsigned long lastButton = 0;

  int16_t bright = 0;

  int in_config = 0;
     f9c:	21 2c       	mov	r2, r1
     f9e:	31 2c       	mov	r3, r1
  unsigned long dimInterval = 75;
  unsigned long lastDim = 0;

  // track button readings
  unsigned long buttonInterval = 100;
  unsigned long lastButton = 0;
     fa0:	41 2c       	mov	r4, r1
     fa2:	51 2c       	mov	r5, r1
     fa4:	32 01       	movw	r6, r4
void loop() {
  unsigned long clock = 0;

  // track fade steps
  unsigned long dimInterval = 75;
  unsigned long lastDim = 0;
     fa6:	19 82       	std	Y+1, r1	; 0x01
     fa8:	1a 82       	std	Y+2, r1	; 0x02
     faa:	1b 82       	std	Y+3, r1	; 0x03
     fac:	1c 82       	std	Y+4, r1	; 0x04
int last_act[] = {0,0,0,0,0,0,0,0};

#define configTime 40

void loop() {
  unsigned long clock = 0;
     fae:	81 2c       	mov	r8, r1
     fb0:	91 2c       	mov	r9, r1
     fb2:	54 01       	movw	r10, r8
  int switched = 0;

  unsigned long buttonStart = 0;

  while (1) {
    int ir = 0;
     fb4:	c1 2c       	mov	r12, r1
     fb6:	d1 2c       	mov	r13, r1
  
    while (ir < 8) {
      if (! in_config) {
     fb8:	21 14       	cp	r2, r1
     fba:	31 04       	cpc	r3, r1
     fbc:	09 f0       	breq	.+2      	; 0xfc0 <loop+0x48>
     fbe:	4d c0       	rjmp	.+154    	; 0x105a <loop+0xe2>
	bright = readIR(ir);
     fc0:	8c 2d       	mov	r24, r12
     fc2:	0e 94 3f 04 	call	0x87e	; 0x87e <readIR>

	if (bright >= 0) {
     fc6:	99 23       	and	r25, r25
     fc8:	0c f4       	brge	.+2      	; 0xfcc <loop+0x54>
     fca:	ab c1       	rjmp	.+854    	; 0x1322 <loop+0x3aa>
	  // got a reading (ADC finished), process signal and increment
	  int act = handle_ir(ir, bright);
     fcc:	bc 01       	movw	r22, r24
     fce:	c6 01       	movw	r24, r12
     fd0:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <handle_ir>

	  do_send(act, clock);
     fd4:	b5 01       	movw	r22, r10
     fd6:	a4 01       	movw	r20, r8
     fd8:	0e 94 db 06 	call	0xdb6	; 0xdb6 <do_send>

	  ir++;
     fdc:	2f ef       	ldi	r18, 0xFF	; 255
     fde:	c2 1a       	sub	r12, r18
     fe0:	d2 0a       	sbc	r13, r18
	}

	handle_network(clock);
     fe2:	c5 01       	movw	r24, r10
     fe4:	b4 01       	movw	r22, r8
     fe6:	0e 94 37 07 	call	0xe6e	; 0xe6e <handle_network>

	if (clock - lastDim > dimInterval) {
     fea:	d5 01       	movw	r26, r10
     fec:	c4 01       	movw	r24, r8
     fee:	29 81       	ldd	r18, Y+1	; 0x01
     ff0:	3a 81       	ldd	r19, Y+2	; 0x02
     ff2:	4b 81       	ldd	r20, Y+3	; 0x03
     ff4:	5c 81       	ldd	r21, Y+4	; 0x04
     ff6:	82 1b       	sub	r24, r18
     ff8:	93 0b       	sbc	r25, r19
     ffa:	a4 0b       	sbc	r26, r20
     ffc:	b5 0b       	sbc	r27, r21
     ffe:	8c 34       	cpi	r24, 0x4C	; 76
    1000:	91 05       	cpc	r25, r1
    1002:	a1 05       	cpc	r26, r1
    1004:	b1 05       	cpc	r27, r1
    1006:	48 f1       	brcs	.+82     	; 0x105a <loop+0xe2>
    1008:	0f 2e       	mov	r0, r31
    100a:	f4 ed       	ldi	r31, 0xD4	; 212
    100c:	ef 2e       	mov	r14, r31
    100e:	f1 e0       	ldi	r31, 0x01	; 1
    1010:	ff 2e       	mov	r15, r31
    1012:	f0 2d       	mov	r31, r0
  int switched = 0;

  unsigned long buttonStart = 0;

  while (1) {
    int ir = 0;
    1014:	1a 82       	std	Y+2, r1	; 0x02
    1016:	19 82       	std	Y+1, r1	; 0x01
	if (clock - lastDim > dimInterval) {
	  // step fade routines
	  lastDim = clock;
	  int j;
	  for (j = 0; j< 8; j++) {
	    compbuff[j] = dispatch(program, j, last_act[j], compbuff[j]);
    1018:	09 81       	ldd	r16, Y+1	; 0x01
    101a:	1a 81       	ldd	r17, Y+2	; 0x02
    101c:	0a 50       	subi	r16, 0x0A	; 10
    101e:	1e 4f       	sbci	r17, 0xFE	; 254
    1020:	f8 01       	movw	r30, r16
    1022:	20 81       	ld	r18, Z
    1024:	f7 01       	movw	r30, r14
    1026:	41 91       	ld	r20, Z+
    1028:	51 91       	ld	r21, Z+
    102a:	7f 01       	movw	r14, r30
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <program>
    1032:	69 81       	ldd	r22, Y+1	; 0x01
    1034:	7a 81       	ldd	r23, Y+2	; 0x02
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	0e 94 46 01 	call	0x28c	; 0x28c <dispatch>
    103c:	f8 01       	movw	r30, r16
    103e:	80 83       	st	Z, r24

	if (clock - lastDim > dimInterval) {
	  // step fade routines
	  lastDim = clock;
	  int j;
	  for (j = 0; j< 8; j++) {
    1040:	29 81       	ldd	r18, Y+1	; 0x01
    1042:	3a 81       	ldd	r19, Y+2	; 0x02
    1044:	2f 5f       	subi	r18, 0xFF	; 255
    1046:	3f 4f       	sbci	r19, 0xFF	; 255
    1048:	3a 83       	std	Y+2, r19	; 0x02
    104a:	29 83       	std	Y+1, r18	; 0x01
    104c:	28 30       	cpi	r18, 0x08	; 8
    104e:	31 05       	cpc	r19, r1
    1050:	19 f7       	brne	.-58     	; 0x1018 <loop+0xa0>
    1052:	89 82       	std	Y+1, r8	; 0x01
    1054:	9a 82       	std	Y+2, r9	; 0x02
    1056:	ab 82       	std	Y+3, r10	; 0x03
    1058:	bc 82       	std	Y+4, r11	; 0x04
	    compbuff[j] = dispatch(program, j, last_act[j], compbuff[j]);
	  }
	}
      }

      clock++;
    105a:	3f ef       	ldi	r19, 0xFF	; 255
    105c:	83 1a       	sub	r8, r19
    105e:	93 0a       	sbc	r9, r19
    1060:	a3 0a       	sbc	r10, r19
    1062:	b3 0a       	sbc	r11, r19

      if (clock - lastButton > buttonInterval) {
    1064:	d5 01       	movw	r26, r10
    1066:	c4 01       	movw	r24, r8
    1068:	84 19       	sub	r24, r4
    106a:	95 09       	sbc	r25, r5
    106c:	a6 09       	sbc	r26, r6
    106e:	b7 09       	sbc	r27, r7
    1070:	85 36       	cpi	r24, 0x65	; 101
    1072:	91 05       	cpc	r25, r1
    1074:	a1 05       	cpc	r26, r1
    1076:	b1 05       	cpc	r27, r1
    1078:	08 f4       	brcc	.+2      	; 0x107c <loop+0x104>
    107a:	4d c1       	rjmp	.+666    	; 0x1316 <loop+0x39e>
	lastButton = clock;
	int button = readButton();
    107c:	0e 94 94 04 	call	0x928	; 0x928 <readButton>
    1080:	9e 87       	std	Y+14, r25	; 0x0e
    1082:	8d 87       	std	Y+13, r24	; 0x0d

	// single button press, not in another config mode, enter program config
	if (button && (! last_button)) {
    1084:	89 2b       	or	r24, r25
    1086:	09 f4       	brne	.+2      	; 0x108a <loop+0x112>
    1088:	69 c1       	rjmp	.+722    	; 0x135c <loop+0x3e4>
    108a:	4d 81       	ldd	r20, Y+5	; 0x05
    108c:	5e 81       	ldd	r21, Y+6	; 0x06
    108e:	45 2b       	or	r20, r21
    1090:	71 f4       	brne	.+28     	; 0x10ae <loop+0x136>
	  buttonStart = tclock();
    1092:	0e 94 b0 07 	call	0xf60	; 0xf60 <tclock>
    1096:	69 87       	std	Y+9, r22	; 0x09
    1098:	7a 87       	std	Y+10, r23	; 0x0a
    109a:	8b 87       	std	Y+11, r24	; 0x0b
    109c:	9c 87       	std	Y+12, r25	; 0x0c
	  switched = 0;

	  if (in_config == 0) {
    109e:	21 14       	cp	r2, r1
    10a0:	31 04       	cpc	r3, r1
    10a2:	09 f0       	breq	.+2      	; 0x10a6 <loop+0x12e>
    10a4:	53 c1       	rjmp	.+678    	; 0x134c <loop+0x3d4>
	    in_config = 1;
    10a6:	22 24       	eor	r2, r2
    10a8:	23 94       	inc	r2
    10aa:	31 2c       	mov	r3, r1
    10ac:	4f c1       	rjmp	.+670    	; 0x134c <loop+0x3d4>
	  }
	}

	// program config stable, switch out of config mode
	if ((in_config) && (! button) && (! last_button)) {
    10ae:	21 14       	cp	r2, r1
    10b0:	31 04       	cpc	r3, r1
    10b2:	09 f4       	brne	.+2      	; 0x10b6 <loop+0x13e>
    10b4:	58 c1       	rjmp	.+688    	; 0x1366 <loop+0x3ee>
    10b6:	5a c1       	rjmp	.+692    	; 0x136c <loop+0x3f4>
    10b8:	8d 81       	ldd	r24, Y+5	; 0x05
    10ba:	9e 81       	ldd	r25, Y+6	; 0x06
    10bc:	89 2b       	or	r24, r25
    10be:	09 f0       	breq	.+2      	; 0x10c2 <loop+0x14a>
    10c0:	5a c1       	rjmp	.+692    	; 0x1376 <loop+0x3fe>

	  unsigned long diff = tclock() - buttonStart;
    10c2:	0e 94 b0 07 	call	0xf60	; 0xf60 <tclock>
    10c6:	dc 01       	movw	r26, r24
    10c8:	cb 01       	movw	r24, r22
    10ca:	29 85       	ldd	r18, Y+9	; 0x09
    10cc:	3a 85       	ldd	r19, Y+10	; 0x0a
    10ce:	4b 85       	ldd	r20, Y+11	; 0x0b
    10d0:	5c 85       	ldd	r21, Y+12	; 0x0c
    10d2:	82 1b       	sub	r24, r18
    10d4:	93 0b       	sbc	r25, r19
    10d6:	a4 0b       	sbc	r26, r20
    10d8:	b5 0b       	sbc	r27, r21
	  if ((in_config == 1 && (diff > configTime)) ||
    10da:	31 e0       	ldi	r19, 0x01	; 1
    10dc:	23 16       	cp	r2, r19
    10de:	31 04       	cpc	r3, r1
    10e0:	09 f0       	breq	.+2      	; 0x10e4 <loop+0x16c>
    10e2:	62 c1       	rjmp	.+708    	; 0x13a8 <loop+0x430>
    10e4:	89 32       	cpi	r24, 0x29	; 41
    10e6:	91 05       	cpc	r25, r1
    10e8:	a1 05       	cpc	r26, r1
    10ea:	b1 05       	cpc	r27, r1
    10ec:	08 f4       	brcc	.+2      	; 0x10f0 <loop+0x178>
    10ee:	55 c1       	rjmp	.+682    	; 0x139a <loop+0x422>
	      (in_config && (diff > (configTime << 1)))) {
	  in_config = 0;
	  switched = 0;
	  saveConfig();
    10f0:	0e 94 09 01 	call	0x212	; 0x212 <saveConfig>
	  flashLeds();
    10f4:	0e 94 2c 01 	call	0x258	; 0x258 <flashLeds>

	  unsigned long diff = tclock() - buttonStart;
	  if ((in_config == 1 && (diff > configTime)) ||
	      (in_config && (diff > (configTime << 1)))) {
	  in_config = 0;
	  switched = 0;
    10f8:	18 86       	std	Y+8, r1	; 0x08
    10fa:	1f 82       	std	Y+7, r1	; 0x07
    10fc:	34 c1       	rjmp	.+616    	; 0x1366 <loop+0x3ee>

	// program config
	if (in_config == 1) {
	  // button was released, advance program
	  if ((button == 0) && (last_button)) {
	    if (tclock() - buttonStart < configTime) {
    10fe:	0e 94 b0 07 	call	0xf60	; 0xf60 <tclock>
    1102:	dc 01       	movw	r26, r24
    1104:	cb 01       	movw	r24, r22
    1106:	29 85       	ldd	r18, Y+9	; 0x09
    1108:	3a 85       	ldd	r19, Y+10	; 0x0a
    110a:	4b 85       	ldd	r20, Y+11	; 0x0b
    110c:	5c 85       	ldd	r21, Y+12	; 0x0c
    110e:	82 1b       	sub	r24, r18
    1110:	93 0b       	sbc	r25, r19
    1112:	a4 0b       	sbc	r26, r20
    1114:	b5 0b       	sbc	r27, r21
    1116:	88 97       	sbiw	r24, 0x28	; 40
    1118:	a1 05       	cpc	r26, r1
    111a:	b1 05       	cpc	r27, r1
    111c:	58 f4       	brcc	.+22     	; 0x1134 <loop+0x1bc>
	      changeProgram();
    111e:	0e 94 9d 04 	call	0x93a	; 0x93a <changeProgram>
	      buttonStart = tclock();
    1122:	0e 94 b0 07 	call	0xf60	; 0xf60 <tclock>
    1126:	69 87       	std	Y+9, r22	; 0x09
    1128:	7a 87       	std	Y+10, r23	; 0x0a
    112a:	8b 87       	std	Y+11, r24	; 0x0b
    112c:	9c 87       	std	Y+12, r25	; 0x0c
    112e:	02 c0       	rjmp	.+4      	; 0x1134 <loop+0x1bc>
	  flashLeds();
	}
	}

	// program config
	if (in_config == 1) {
    1130:	18 86       	std	Y+8, r1	; 0x08
    1132:	1f 82       	std	Y+7, r1	; 0x07
	      changeProgram();
	      buttonStart = tclock();
	    }
	  }

	  programOn(program);
    1134:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <program>
    1138:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <programOn>
    113c:	22 24       	eor	r2, r2
    113e:	23 94       	inc	r2
    1140:	31 2c       	mov	r3, r1
    1142:	6a c0       	rjmp	.+212    	; 0x1218 <loop+0x2a0>
	}

	// sensitivity config
	if (in_config == 2) {
    1144:	32 e0       	ldi	r19, 0x02	; 2
    1146:	23 16       	cp	r2, r19
    1148:	31 04       	cpc	r3, r1
    114a:	69 f5       	brne	.+90     	; 0x11a6 <loop+0x22e>
	  // button was released, change sensitivity
	  if ((button == 0) && (last_button)) {
    114c:	4d 85       	ldd	r20, Y+13	; 0x0d
    114e:	5e 85       	ldd	r21, Y+14	; 0x0e
    1150:	45 2b       	or	r20, r21
    1152:	01 f5       	brne	.+64     	; 0x1194 <loop+0x21c>
    1154:	8d 81       	ldd	r24, Y+5	; 0x05
    1156:	9e 81       	ldd	r25, Y+6	; 0x06
    1158:	89 2b       	or	r24, r25
    115a:	e1 f0       	breq	.+56     	; 0x1194 <loop+0x21c>
	    if ((! switched) && tclock() - buttonStart < configTime) {
    115c:	ef 81       	ldd	r30, Y+7	; 0x07
    115e:	f8 85       	ldd	r31, Y+8	; 0x08
    1160:	ef 2b       	or	r30, r31
    1162:	c1 f4       	brne	.+48     	; 0x1194 <loop+0x21c>
    1164:	0e 94 b0 07 	call	0xf60	; 0xf60 <tclock>
    1168:	dc 01       	movw	r26, r24
    116a:	cb 01       	movw	r24, r22
    116c:	29 85       	ldd	r18, Y+9	; 0x09
    116e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1170:	4b 85       	ldd	r20, Y+11	; 0x0b
    1172:	5c 85       	ldd	r21, Y+12	; 0x0c
    1174:	82 1b       	sub	r24, r18
    1176:	93 0b       	sbc	r25, r19
    1178:	a4 0b       	sbc	r26, r20
    117a:	b5 0b       	sbc	r27, r21
    117c:	88 97       	sbiw	r24, 0x28	; 40
    117e:	a1 05       	cpc	r26, r1
    1180:	b1 05       	cpc	r27, r1
    1182:	40 f4       	brcc	.+16     	; 0x1194 <loop+0x21c>
	      changeSensitivity();
    1184:	0e 94 31 05 	call	0xa62	; 0xa62 <changeSensitivity>
	      buttonStart = tclock();
    1188:	0e 94 b0 07 	call	0xf60	; 0xf60 <tclock>
    118c:	69 87       	std	Y+9, r22	; 0x09
    118e:	7a 87       	std	Y+10, r23	; 0x0a
    1190:	8b 87       	std	Y+11, r24	; 0x0b
    1192:	9c 87       	std	Y+12, r25	; 0x0c
	    }
	  }

	  sensitivityOn(sensitivity);
    1194:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <sensitivity>
    1198:	0e 94 3c 05 	call	0xa78	; 0xa78 <sensitivityOn>
    119c:	68 94       	set
    119e:	22 24       	eor	r2, r2
    11a0:	21 f8       	bld	r2, 1
    11a2:	31 2c       	mov	r3, r1
    11a4:	39 c0       	rjmp	.+114    	; 0x1218 <loop+0x2a0>
	}

	if (in_config == 3) {
    11a6:	33 e0       	ldi	r19, 0x03	; 3
    11a8:	23 16       	cp	r2, r19
    11aa:	31 04       	cpc	r3, r1
    11ac:	a9 f5       	brne	.+106    	; 0x1218 <loop+0x2a0>
	  // button was released, change net config
	  if ((button == 0) && (last_button)) {
    11ae:	4d 85       	ldd	r20, Y+13	; 0x0d
    11b0:	5e 85       	ldd	r21, Y+14	; 0x0e
    11b2:	45 2b       	or	r20, r21
    11b4:	09 f0       	breq	.+2      	; 0x11b8 <loop+0x240>
    11b6:	05 c1       	rjmp	.+522    	; 0x13c2 <loop+0x44a>
    11b8:	8d 81       	ldd	r24, Y+5	; 0x05
    11ba:	9e 81       	ldd	r25, Y+6	; 0x06
    11bc:	89 2b       	or	r24, r25
    11be:	09 f4       	brne	.+2      	; 0x11c2 <loop+0x24a>
    11c0:	e0 c0       	rjmp	.+448    	; 0x1382 <loop+0x40a>
	    if ((! switched) && tclock() - buttonStart < configTime) {
    11c2:	ef 81       	ldd	r30, Y+7	; 0x07
    11c4:	f8 85       	ldd	r31, Y+8	; 0x08
    11c6:	ef 2b       	or	r30, r31
    11c8:	09 f0       	breq	.+2      	; 0x11cc <loop+0x254>
    11ca:	db c0       	rjmp	.+438    	; 0x1382 <loop+0x40a>
    11cc:	0e 94 b0 07 	call	0xf60	; 0xf60 <tclock>
    11d0:	dc 01       	movw	r26, r24
    11d2:	cb 01       	movw	r24, r22
    11d4:	29 85       	ldd	r18, Y+9	; 0x09
    11d6:	3a 85       	ldd	r19, Y+10	; 0x0a
    11d8:	4b 85       	ldd	r20, Y+11	; 0x0b
    11da:	5c 85       	ldd	r21, Y+12	; 0x0c
    11dc:	82 1b       	sub	r24, r18
    11de:	93 0b       	sbc	r25, r19
    11e0:	a4 0b       	sbc	r26, r20
    11e2:	b5 0b       	sbc	r27, r21
    11e4:	88 97       	sbiw	r24, 0x28	; 40
    11e6:	a1 05       	cpc	r26, r1
    11e8:	b1 05       	cpc	r27, r1
    11ea:	08 f0       	brcs	.+2      	; 0x11ee <loop+0x276>
    11ec:	ca c0       	rjmp	.+404    	; 0x1382 <loop+0x40a>
	      netConfig++;
    11ee:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <netConfig>
    11f2:	8f 5f       	subi	r24, 0xFF	; 255
	      if (netConfig > 1) {
    11f4:	82 30       	cpi	r24, 0x02	; 2
    11f6:	18 f4       	brcc	.+6      	; 0x11fe <loop+0x286>

	if (in_config == 3) {
	  // button was released, change net config
	  if ((button == 0) && (last_button)) {
	    if ((! switched) && tclock() - buttonStart < configTime) {
	      netConfig++;
    11f8:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <netConfig>
    11fc:	02 c0       	rjmp	.+4      	; 0x1202 <loop+0x28a>
	      if (netConfig > 1) {
		netConfig = 0;
    11fe:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <netConfig>
	      }
	      netConfigOn(netConfig);
    1202:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <netConfig>
    1206:	0e 94 b2 04 	call	0x964	; 0x964 <netConfigOn>
	      buttonStart = tclock();
    120a:	0e 94 b0 07 	call	0xf60	; 0xf60 <tclock>
    120e:	69 87       	std	Y+9, r22	; 0x09
    1210:	7a 87       	std	Y+10, r23	; 0x0a
    1212:	8b 87       	std	Y+11, r24	; 0x0b
    1214:	9c 87       	std	Y+12, r25	; 0x0c
    1216:	b5 c0       	rjmp	.+362    	; 0x1382 <loop+0x40a>
	    }
	  }	  
	}

	// button depressed for a bit, switch to sensitivity adjustment
	if (button && last_button) {
    1218:	4d 85       	ldd	r20, Y+13	; 0x0d
    121a:	5e 85       	ldd	r21, Y+14	; 0x0e
    121c:	45 2b       	or	r20, r21
    121e:	09 f4       	brne	.+2      	; 0x1222 <loop+0x2aa>
    1220:	5f c0       	rjmp	.+190    	; 0x12e0 <loop+0x368>
    1222:	8d 81       	ldd	r24, Y+5	; 0x05
    1224:	9e 81       	ldd	r25, Y+6	; 0x06
    1226:	89 2b       	or	r24, r25
    1228:	09 f4       	brne	.+2      	; 0x122c <loop+0x2b4>
    122a:	61 c0       	rjmp	.+194    	; 0x12ee <loop+0x376>

	  if ((in_config == 2) && tclock() - buttonStart > (configTime * 2)) {
    122c:	92 e0       	ldi	r25, 0x02	; 2
    122e:	29 16       	cp	r2, r25
    1230:	31 04       	cpc	r3, r1
    1232:	31 f5       	brne	.+76     	; 0x1280 <loop+0x308>
    1234:	0e 94 b0 07 	call	0xf60	; 0xf60 <tclock>
    1238:	dc 01       	movw	r26, r24
    123a:	cb 01       	movw	r24, r22
    123c:	29 85       	ldd	r18, Y+9	; 0x09
    123e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1240:	4b 85       	ldd	r20, Y+11	; 0x0b
    1242:	5c 85       	ldd	r21, Y+12	; 0x0c
    1244:	82 1b       	sub	r24, r18
    1246:	93 0b       	sbc	r25, r19
    1248:	a4 0b       	sbc	r26, r20
    124a:	b5 0b       	sbc	r27, r21
    124c:	81 35       	cpi	r24, 0x51	; 81
    124e:	91 05       	cpc	r25, r1
    1250:	a1 05       	cpc	r26, r1
    1252:	b1 05       	cpc	r27, r1
    1254:	a8 f0       	brcs	.+42     	; 0x1280 <loop+0x308>
	    in_config = 3;
	    netConfigOn(netConfig);
    1256:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <netConfig>
    125a:	0e 94 b2 04 	call	0x964	; 0x964 <netConfigOn>
	    buttonStart = tclock();
    125e:	0e 94 b0 07 	call	0xf60	; 0xf60 <tclock>
    1262:	69 87       	std	Y+9, r22	; 0x09
    1264:	7a 87       	std	Y+10, r23	; 0x0a
    1266:	8b 87       	std	Y+11, r24	; 0x0b
    1268:	9c 87       	std	Y+12, r25	; 0x0c
	    switched++;
    126a:	4f 81       	ldd	r20, Y+7	; 0x07
    126c:	58 85       	ldd	r21, Y+8	; 0x08
    126e:	4f 5f       	subi	r20, 0xFF	; 255
    1270:	5f 4f       	sbci	r21, 0xFF	; 255
    1272:	58 87       	std	Y+8, r21	; 0x08
    1274:	4f 83       	std	Y+7, r20	; 0x07

	// button depressed for a bit, switch to sensitivity adjustment
	if (button && last_button) {

	  if ((in_config == 2) && tclock() - buttonStart > (configTime * 2)) {
	    in_config = 3;
    1276:	0f 2e       	mov	r0, r31
    1278:	f3 e0       	ldi	r31, 0x03	; 3
    127a:	2f 2e       	mov	r2, r31
    127c:	f0 2d       	mov	r31, r0
    127e:	31 2c       	mov	r3, r1
	    netConfigOn(netConfig);
	    buttonStart = tclock();
	    switched++;
	  }

	  if ((! switched) && tclock() - buttonStart > configTime) {
    1280:	8f 81       	ldd	r24, Y+7	; 0x07
    1282:	98 85       	ldd	r25, Y+8	; 0x08
    1284:	89 2b       	or	r24, r25
    1286:	d1 f5       	brne	.+116    	; 0x12fc <loop+0x384>
    1288:	0e 94 b0 07 	call	0xf60	; 0xf60 <tclock>
    128c:	dc 01       	movw	r26, r24
    128e:	cb 01       	movw	r24, r22
    1290:	29 85       	ldd	r18, Y+9	; 0x09
    1292:	3a 85       	ldd	r19, Y+10	; 0x0a
    1294:	4b 85       	ldd	r20, Y+11	; 0x0b
    1296:	5c 85       	ldd	r21, Y+12	; 0x0c
    1298:	82 1b       	sub	r24, r18
    129a:	93 0b       	sbc	r25, r19
    129c:	a4 0b       	sbc	r26, r20
    129e:	b5 0b       	sbc	r27, r21
    12a0:	89 97       	sbiw	r24, 0x29	; 41
    12a2:	a1 05       	cpc	r26, r1
    12a4:	b1 05       	cpc	r27, r1
    12a6:	88 f1       	brcs	.+98     	; 0x130a <loop+0x392>
	    switched++;

	    if (in_config >= 2) {
    12a8:	32 e0       	ldi	r19, 0x02	; 2
    12aa:	23 16       	cp	r2, r19
    12ac:	31 04       	cpc	r3, r1
    12ae:	0c f0       	brlt	.+2      	; 0x12b2 <loop+0x33a>
    12b0:	6f c0       	rjmp	.+222    	; 0x1390 <loop+0x418>
	      in_config = 0;
	    } else {
	      in_config = 2;
	      buttonStart = tclock();
    12b2:	0e 94 b0 07 	call	0xf60	; 0xf60 <tclock>
    12b6:	69 87       	std	Y+9, r22	; 0x09
    12b8:	7a 87       	std	Y+10, r23	; 0x0a
    12ba:	8b 87       	std	Y+11, r24	; 0x0b
    12bc:	9c 87       	std	Y+12, r25	; 0x0c
	    switched++;

	    if (in_config >= 2) {
	      in_config = 0;
	    } else {
	      in_config = 2;
    12be:	68 94       	set
    12c0:	22 24       	eor	r2, r2
    12c2:	21 f8       	bld	r2, 1
    12c4:	31 2c       	mov	r3, r1
	    if (! in_config) {
	      // switched out of config mode, save settings...
	      saveConfig();
	    }
	    // visual feedback for mode switch ...
	    flashLeds();
    12c6:	0e 94 2c 01 	call	0x258	; 0x258 <flashLeds>
	  }
	}

	last_button = button;
    12ca:	4d 85       	ldd	r20, Y+13	; 0x0d
    12cc:	5e 85       	ldd	r21, Y+14	; 0x0e
    12ce:	5e 83       	std	Y+6, r21	; 0x06
    12d0:	4d 83       	std	Y+5, r20	; 0x05
	    compbuff[j] = dispatch(program, j, last_act[j], compbuff[j]);
	  }
	}
      }

      clock++;
    12d2:	24 01       	movw	r4, r8
    12d4:	35 01       	movw	r6, r10
	    buttonStart = tclock();
	    switched++;
	  }

	  if ((! switched) && tclock() - buttonStart > configTime) {
	    switched++;
    12d6:	81 e0       	ldi	r24, 0x01	; 1
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	98 87       	std	Y+8, r25	; 0x08
    12dc:	8f 83       	std	Y+7, r24	; 0x07
    12de:	1b c0       	rjmp	.+54     	; 0x1316 <loop+0x39e>
	    // visual feedback for mode switch ...
	    flashLeds();
	  }
	}

	last_button = button;
    12e0:	ed 85       	ldd	r30, Y+13	; 0x0d
    12e2:	fe 85       	ldd	r31, Y+14	; 0x0e
    12e4:	fe 83       	std	Y+6, r31	; 0x06
    12e6:	ed 83       	std	Y+5, r30	; 0x05
	    compbuff[j] = dispatch(program, j, last_act[j], compbuff[j]);
	  }
	}
      }

      clock++;
    12e8:	24 01       	movw	r4, r8
    12ea:	35 01       	movw	r6, r10
    12ec:	14 c0       	rjmp	.+40     	; 0x1316 <loop+0x39e>
	    // visual feedback for mode switch ...
	    flashLeds();
	  }
	}

	last_button = button;
    12ee:	2d 85       	ldd	r18, Y+13	; 0x0d
    12f0:	3e 85       	ldd	r19, Y+14	; 0x0e
    12f2:	3e 83       	std	Y+6, r19	; 0x06
    12f4:	2d 83       	std	Y+5, r18	; 0x05
	    compbuff[j] = dispatch(program, j, last_act[j], compbuff[j]);
	  }
	}
      }

      clock++;
    12f6:	24 01       	movw	r4, r8
    12f8:	35 01       	movw	r6, r10
    12fa:	0d c0       	rjmp	.+26     	; 0x1316 <loop+0x39e>
	    // visual feedback for mode switch ...
	    flashLeds();
	  }
	}

	last_button = button;
    12fc:	4d 85       	ldd	r20, Y+13	; 0x0d
    12fe:	5e 85       	ldd	r21, Y+14	; 0x0e
    1300:	5e 83       	std	Y+6, r21	; 0x06
    1302:	4d 83       	std	Y+5, r20	; 0x05
	    compbuff[j] = dispatch(program, j, last_act[j], compbuff[j]);
	  }
	}
      }

      clock++;
    1304:	24 01       	movw	r4, r8
    1306:	35 01       	movw	r6, r10
    1308:	06 c0       	rjmp	.+12     	; 0x1316 <loop+0x39e>
	    // visual feedback for mode switch ...
	    flashLeds();
	  }
	}

	last_button = button;
    130a:	8d 85       	ldd	r24, Y+13	; 0x0d
    130c:	9e 85       	ldd	r25, Y+14	; 0x0e
    130e:	9e 83       	std	Y+6, r25	; 0x06
    1310:	8d 83       	std	Y+5, r24	; 0x05
	    compbuff[j] = dispatch(program, j, last_act[j], compbuff[j]);
	  }
	}
      }

      clock++;
    1312:	24 01       	movw	r4, r8
    1314:	35 01       	movw	r6, r10
  unsigned long buttonStart = 0;

  while (1) {
    int ir = 0;
  
    while (ir < 8) {
    1316:	98 e0       	ldi	r25, 0x08	; 8
    1318:	c9 16       	cp	r12, r25
    131a:	d1 04       	cpc	r13, r1
    131c:	0c f4       	brge	.+2      	; 0x1320 <loop+0x3a8>
    131e:	4c ce       	rjmp	.-872    	; 0xfb8 <loop+0x40>
    1320:	49 ce       	rjmp	.-878    	; 0xfb4 <loop+0x3c>
	  do_send(act, clock);

	  ir++;
	}

	handle_network(clock);
    1322:	c5 01       	movw	r24, r10
    1324:	b4 01       	movw	r22, r8
    1326:	0e 94 37 07 	call	0xe6e	; 0xe6e <handle_network>

	if (clock - lastDim > dimInterval) {
    132a:	d5 01       	movw	r26, r10
    132c:	c4 01       	movw	r24, r8
    132e:	29 81       	ldd	r18, Y+1	; 0x01
    1330:	3a 81       	ldd	r19, Y+2	; 0x02
    1332:	4b 81       	ldd	r20, Y+3	; 0x03
    1334:	5c 81       	ldd	r21, Y+4	; 0x04
    1336:	82 1b       	sub	r24, r18
    1338:	93 0b       	sbc	r25, r19
    133a:	a4 0b       	sbc	r26, r20
    133c:	b5 0b       	sbc	r27, r21
    133e:	8c 34       	cpi	r24, 0x4C	; 76
    1340:	91 05       	cpc	r25, r1
    1342:	a1 05       	cpc	r26, r1
    1344:	b1 05       	cpc	r27, r1
    1346:	08 f0       	brcs	.+2      	; 0x134a <loop+0x3d2>
    1348:	5f ce       	rjmp	.-834    	; 0x1008 <loop+0x90>
    134a:	87 ce       	rjmp	.-754    	; 0x105a <loop+0xe2>
	  flashLeds();
	}
	}

	// program config
	if (in_config == 1) {
    134c:	31 e0       	ldi	r19, 0x01	; 1
    134e:	23 16       	cp	r2, r19
    1350:	31 04       	cpc	r3, r1
    1352:	09 f4       	brne	.+2      	; 0x1356 <loop+0x3de>
    1354:	ed ce       	rjmp	.-550    	; 0x1130 <loop+0x1b8>
    1356:	18 86       	std	Y+8, r1	; 0x08
    1358:	1f 82       	std	Y+7, r1	; 0x07
    135a:	f4 ce       	rjmp	.-536    	; 0x1144 <loop+0x1cc>
	    in_config = 1;
	  }
	}

	// program config stable, switch out of config mode
	if ((in_config) && (! button) && (! last_button)) {
    135c:	21 14       	cp	r2, r1
    135e:	31 04       	cpc	r3, r1
    1360:	09 f4       	brne	.+2      	; 0x1364 <loop+0x3ec>
    1362:	f0 ce       	rjmp	.-544    	; 0x1144 <loop+0x1cc>
    1364:	a9 ce       	rjmp	.-686    	; 0x10b8 <loop+0x140>
	  flashLeds();
	}
	}

	// program config
	if (in_config == 1) {
    1366:	21 2c       	mov	r2, r1
    1368:	31 2c       	mov	r3, r1
    136a:	1d cf       	rjmp	.-454    	; 0x11a6 <loop+0x22e>
    136c:	41 e0       	ldi	r20, 0x01	; 1
    136e:	24 16       	cp	r2, r20
    1370:	31 04       	cpc	r3, r1
    1372:	09 f5       	brne	.+66     	; 0x13b6 <loop+0x43e>
    1374:	df ce       	rjmp	.-578    	; 0x1134 <loop+0x1bc>
    1376:	51 e0       	ldi	r21, 0x01	; 1
    1378:	25 16       	cp	r2, r21
    137a:	31 04       	cpc	r3, r1
    137c:	09 f0       	breq	.+2      	; 0x1380 <loop+0x408>
    137e:	e2 ce       	rjmp	.-572    	; 0x1144 <loop+0x1cc>
    1380:	be ce       	rjmp	.-644    	; 0x10fe <loop+0x186>
	    // visual feedback for mode switch ...
	    flashLeds();
	  }
	}

	last_button = button;
    1382:	8d 85       	ldd	r24, Y+13	; 0x0d
    1384:	9e 85       	ldd	r25, Y+14	; 0x0e
    1386:	9e 83       	std	Y+6, r25	; 0x06
    1388:	8d 83       	std	Y+5, r24	; 0x05
	    compbuff[j] = dispatch(program, j, last_act[j], compbuff[j]);
	  }
	}
      }

      clock++;
    138a:	24 01       	movw	r4, r8
    138c:	35 01       	movw	r6, r10
    138e:	c3 cf       	rjmp	.-122    	; 0x1316 <loop+0x39e>
	      buttonStart = tclock();
	    }

	    if (! in_config) {
	      // switched out of config mode, save settings...
	      saveConfig();
    1390:	0e 94 09 01 	call	0x212	; 0x212 <saveConfig>

	  if ((! switched) && tclock() - buttonStart > configTime) {
	    switched++;

	    if (in_config >= 2) {
	      in_config = 0;
    1394:	21 2c       	mov	r2, r1
    1396:	31 2c       	mov	r3, r1
    1398:	96 cf       	rjmp	.-212    	; 0x12c6 <loop+0x34e>
	// program config stable, switch out of config mode
	if ((in_config) && (! button) && (! last_button)) {

	  unsigned long diff = tclock() - buttonStart;
	  if ((in_config == 1 && (diff > configTime)) ||
	      (in_config && (diff > (configTime << 1)))) {
    139a:	81 35       	cpi	r24, 0x51	; 81
    139c:	91 05       	cpc	r25, r1
    139e:	a1 05       	cpc	r26, r1
    13a0:	b1 05       	cpc	r27, r1
    13a2:	08 f0       	brcs	.+2      	; 0x13a6 <loop+0x42e>
    13a4:	a5 ce       	rjmp	.-694    	; 0x10f0 <loop+0x178>
    13a6:	c6 ce       	rjmp	.-628    	; 0x1134 <loop+0x1bc>
    13a8:	81 35       	cpi	r24, 0x51	; 81
    13aa:	91 05       	cpc	r25, r1
    13ac:	a1 05       	cpc	r26, r1
    13ae:	b1 05       	cpc	r27, r1
    13b0:	08 f0       	brcs	.+2      	; 0x13b4 <loop+0x43c>
    13b2:	9e ce       	rjmp	.-708    	; 0x10f0 <loop+0x178>
    13b4:	c7 ce       	rjmp	.-626    	; 0x1144 <loop+0x1cc>

	  programOn(program);
	}

	// sensitivity config
	if (in_config == 2) {
    13b6:	92 e0       	ldi	r25, 0x02	; 2
    13b8:	29 16       	cp	r2, r25
    13ba:	31 04       	cpc	r3, r1
    13bc:	09 f4       	brne	.+2      	; 0x13c0 <loop+0x448>
    13be:	ea ce       	rjmp	.-556    	; 0x1194 <loop+0x21c>
    13c0:	f2 ce       	rjmp	.-540    	; 0x11a6 <loop+0x22e>
	    }
	  }	  
	}

	// button depressed for a bit, switch to sensitivity adjustment
	if (button && last_button) {
    13c2:	ed 81       	ldd	r30, Y+5	; 0x05
    13c4:	fe 81       	ldd	r31, Y+6	; 0x06
    13c6:	ef 2b       	or	r30, r31
    13c8:	09 f0       	breq	.+2      	; 0x13cc <loop+0x454>
    13ca:	5a cf       	rjmp	.-332    	; 0x1280 <loop+0x308>
	    // visual feedback for mode switch ...
	    flashLeds();
	  }
	}

	last_button = button;
    13cc:	2d 85       	ldd	r18, Y+13	; 0x0d
    13ce:	3e 85       	ldd	r19, Y+14	; 0x0e
    13d0:	3e 83       	std	Y+6, r19	; 0x06
    13d2:	2d 83       	std	Y+5, r18	; 0x05
	    compbuff[j] = dispatch(program, j, last_act[j], compbuff[j]);
	  }
	}
      }

      clock++;
    13d4:	24 01       	movw	r4, r8
    13d6:	35 01       	movw	r6, r10
    13d8:	9e cf       	rjmp	.-196    	; 0x1316 <loop+0x39e>

000013da <main>:
int sparkle_dir[8];
int sparkle_step[8];

int main (void)
{ 
  setup();
    13da:	0e 94 b6 03 	call	0x76c	; 0x76c <setup>
  loop();
    13de:	0e 94 bc 07 	call	0xf78	; 0xf78 <loop>

000013e2 <heat_fade>:
  }

  return ret;
}

int heat_fade(int ir, int activated, int current_val) {
    13e2:	8f 92       	push	r8
    13e4:	9f 92       	push	r9
    13e6:	af 92       	push	r10
    13e8:	bf 92       	push	r11
    13ea:	cf 92       	push	r12
    13ec:	df 92       	push	r13
    13ee:	ef 92       	push	r14
    13f0:	ff 92       	push	r15
    13f2:	0f 93       	push	r16
    13f4:	1f 93       	push	r17
    13f6:	cf 93       	push	r28
    13f8:	df 93       	push	r29
    13fa:	ec 01       	movw	r28, r24
    13fc:	6b 01       	movw	r12, r22
    13fe:	8a 01       	movw	r16, r20
  static unsigned long msteps[8] = {0, 0, 0, 0, 0, 0, 0, 0};
  int ret;

  if (activated) {
    1400:	67 2b       	or	r22, r23
    1402:	d1 f1       	breq	.+116    	; 0x1478 <heat_fade+0x96>
    if (tclock() - msteps[ir] > 0) {
    1404:	0e 94 b0 07 	call	0xf60	; 0xf60 <tclock>
    1408:	fe 01       	movw	r30, r28
    140a:	ee 0f       	add	r30, r30
    140c:	ff 1f       	adc	r31, r31
    140e:	ee 0f       	add	r30, r30
    1410:	ff 1f       	adc	r31, r31
    1412:	eb 5a       	subi	r30, 0xAB	; 171
    1414:	fe 4f       	sbci	r31, 0xFE	; 254
    1416:	80 80       	ld	r8, Z
    1418:	91 80       	ldd	r9, Z+1	; 0x01
    141a:	a2 80       	ldd	r10, Z+2	; 0x02
    141c:	b3 80       	ldd	r11, Z+3	; 0x03
    141e:	68 15       	cp	r22, r8
    1420:	79 05       	cpc	r23, r9
    1422:	8a 05       	cpc	r24, r10
    1424:	9b 05       	cpc	r25, r11
    1426:	29 f0       	breq	.+10     	; 0x1432 <heat_fade+0x50>
      ret = current_val + hstep;
    1428:	78 01       	movw	r14, r16
    142a:	80 e1       	ldi	r24, 0x10	; 16
    142c:	e8 0e       	add	r14, r24
    142e:	f1 1c       	adc	r15, r1
    1430:	09 c0       	rjmp	.+18     	; 0x1444 <heat_fade+0x62>
    } else {
      ret = current_val;
      if (ret == 0) {
    1432:	01 15       	cp	r16, r1
    1434:	11 05       	cpc	r17, r1
    1436:	29 f4       	brne	.+10     	; 0x1442 <heat_fade+0x60>
	ret = hstep;
    1438:	68 94       	set
    143a:	ee 24       	eor	r14, r14
    143c:	e4 f8       	bld	r14, 4
    143e:	f1 2c       	mov	r15, r1
    1440:	01 c0       	rjmp	.+2      	; 0x1444 <heat_fade+0x62>

  if (activated) {
    if (tclock() - msteps[ir] > 0) {
      ret = current_val + hstep;
    } else {
      ret = current_val;
    1442:	78 01       	movw	r14, r16
      if (ret == 0) {
	ret = hstep;
      }
    }
    // call slow_fade to init counters
    _slow_fade(ir, activated, current_val, 2);
    1444:	22 e0       	ldi	r18, 0x02	; 2
    1446:	a8 01       	movw	r20, r16
    1448:	b6 01       	movw	r22, r12
    144a:	ce 01       	movw	r24, r28
    144c:	0e 94 3a 03 	call	0x674	; 0x674 <_slow_fade>
    msteps[ir] = tclock();
    1450:	0e 94 b0 07 	call	0xf60	; 0xf60 <tclock>
    1454:	cc 0f       	add	r28, r28
    1456:	dd 1f       	adc	r29, r29
    1458:	cc 0f       	add	r28, r28
    145a:	dd 1f       	adc	r29, r29
    145c:	cb 5a       	subi	r28, 0xAB	; 171
    145e:	de 4f       	sbci	r29, 0xFE	; 254
    1460:	68 83       	st	Y, r22
    1462:	79 83       	std	Y+1, r23	; 0x01
    1464:	8a 83       	std	Y+2, r24	; 0x02
    1466:	9b 83       	std	Y+3, r25	; 0x03
    1468:	c7 01       	movw	r24, r14
    146a:	8f 3f       	cpi	r24, 0xFF	; 255
    146c:	91 05       	cpc	r25, r1
    146e:	c1 f0       	breq	.+48     	; 0x14a0 <heat_fade+0xbe>
    1470:	bc f0       	brlt	.+46     	; 0x14a0 <heat_fade+0xbe>
    1472:	8f ef       	ldi	r24, 0xFF	; 255
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	14 c0       	rjmp	.+40     	; 0x14a0 <heat_fade+0xbe>
  } else {
    int fade = current_val >> 4;
    1478:	9a 01       	movw	r18, r20
    147a:	35 95       	asr	r19
    147c:	27 95       	ror	r18
    147e:	35 95       	asr	r19
    1480:	27 95       	ror	r18
    1482:	35 95       	asr	r19
    1484:	27 95       	ror	r18
    1486:	35 95       	asr	r19
    1488:	27 95       	ror	r18
    if (fade > 6) {
      fade = 6;
    }
    
    return _slow_fade(ir, activated, current_val, fade);
    148a:	27 30       	cpi	r18, 0x07	; 7
    148c:	31 05       	cpc	r19, r1
    148e:	14 f0       	brlt	.+4      	; 0x1494 <heat_fade+0xb2>
    1490:	26 e0       	ldi	r18, 0x06	; 6
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	a8 01       	movw	r20, r16
    1496:	60 e0       	ldi	r22, 0x00	; 0
    1498:	70 e0       	ldi	r23, 0x00	; 0
    149a:	ce 01       	movw	r24, r28
    149c:	0e 94 3a 03 	call	0x674	; 0x674 <_slow_fade>
  if (ret > 255) {
    return 255;
  }

  return ret;
}
    14a0:	df 91       	pop	r29
    14a2:	cf 91       	pop	r28
    14a4:	1f 91       	pop	r17
    14a6:	0f 91       	pop	r16
    14a8:	ff 90       	pop	r15
    14aa:	ef 90       	pop	r14
    14ac:	df 90       	pop	r13
    14ae:	cf 90       	pop	r12
    14b0:	bf 90       	pop	r11
    14b2:	af 90       	pop	r10
    14b4:	9f 90       	pop	r9
    14b6:	8f 90       	pop	r8
    14b8:	08 95       	ret

000014ba <__udivmodhi4>:
    14ba:	aa 1b       	sub	r26, r26
    14bc:	bb 1b       	sub	r27, r27
    14be:	51 e1       	ldi	r21, 0x11	; 17
    14c0:	07 c0       	rjmp	.+14     	; 0x14d0 <__udivmodhi4_ep>

000014c2 <__udivmodhi4_loop>:
    14c2:	aa 1f       	adc	r26, r26
    14c4:	bb 1f       	adc	r27, r27
    14c6:	a6 17       	cp	r26, r22
    14c8:	b7 07       	cpc	r27, r23
    14ca:	10 f0       	brcs	.+4      	; 0x14d0 <__udivmodhi4_ep>
    14cc:	a6 1b       	sub	r26, r22
    14ce:	b7 0b       	sbc	r27, r23

000014d0 <__udivmodhi4_ep>:
    14d0:	88 1f       	adc	r24, r24
    14d2:	99 1f       	adc	r25, r25
    14d4:	5a 95       	dec	r21
    14d6:	a9 f7       	brne	.-22     	; 0x14c2 <__udivmodhi4_loop>
    14d8:	80 95       	com	r24
    14da:	90 95       	com	r25
    14dc:	bc 01       	movw	r22, r24
    14de:	cd 01       	movw	r24, r26
    14e0:	08 95       	ret

000014e2 <do_rand>:
    14e2:	8f 92       	push	r8
    14e4:	9f 92       	push	r9
    14e6:	af 92       	push	r10
    14e8:	bf 92       	push	r11
    14ea:	cf 92       	push	r12
    14ec:	df 92       	push	r13
    14ee:	ef 92       	push	r14
    14f0:	ff 92       	push	r15
    14f2:	cf 93       	push	r28
    14f4:	df 93       	push	r29
    14f6:	ec 01       	movw	r28, r24
    14f8:	68 81       	ld	r22, Y
    14fa:	79 81       	ldd	r23, Y+1	; 0x01
    14fc:	8a 81       	ldd	r24, Y+2	; 0x02
    14fe:	9b 81       	ldd	r25, Y+3	; 0x03
    1500:	61 15       	cp	r22, r1
    1502:	71 05       	cpc	r23, r1
    1504:	81 05       	cpc	r24, r1
    1506:	91 05       	cpc	r25, r1
    1508:	21 f4       	brne	.+8      	; 0x1512 <do_rand+0x30>
    150a:	64 e2       	ldi	r22, 0x24	; 36
    150c:	79 ed       	ldi	r23, 0xD9	; 217
    150e:	8b e5       	ldi	r24, 0x5B	; 91
    1510:	97 e0       	ldi	r25, 0x07	; 7
    1512:	2d e1       	ldi	r18, 0x1D	; 29
    1514:	33 ef       	ldi	r19, 0xF3	; 243
    1516:	41 e0       	ldi	r20, 0x01	; 1
    1518:	50 e0       	ldi	r21, 0x00	; 0
    151a:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <__divmodsi4>
    151e:	49 01       	movw	r8, r18
    1520:	5a 01       	movw	r10, r20
    1522:	9b 01       	movw	r18, r22
    1524:	ac 01       	movw	r20, r24
    1526:	a7 ea       	ldi	r26, 0xA7	; 167
    1528:	b1 e4       	ldi	r27, 0x41	; 65
    152a:	0e 94 02 0b 	call	0x1604	; 0x1604 <__muluhisi3>
    152e:	6b 01       	movw	r12, r22
    1530:	7c 01       	movw	r14, r24
    1532:	ac ee       	ldi	r26, 0xEC	; 236
    1534:	b4 ef       	ldi	r27, 0xF4	; 244
    1536:	a5 01       	movw	r20, r10
    1538:	94 01       	movw	r18, r8
    153a:	0e 94 10 0b 	call	0x1620	; 0x1620 <__mulohisi3>
    153e:	dc 01       	movw	r26, r24
    1540:	cb 01       	movw	r24, r22
    1542:	8c 0d       	add	r24, r12
    1544:	9d 1d       	adc	r25, r13
    1546:	ae 1d       	adc	r26, r14
    1548:	bf 1d       	adc	r27, r15
    154a:	b7 ff       	sbrs	r27, 7
    154c:	03 c0       	rjmp	.+6      	; 0x1554 <do_rand+0x72>
    154e:	01 97       	sbiw	r24, 0x01	; 1
    1550:	a1 09       	sbc	r26, r1
    1552:	b0 48       	sbci	r27, 0x80	; 128
    1554:	88 83       	st	Y, r24
    1556:	99 83       	std	Y+1, r25	; 0x01
    1558:	aa 83       	std	Y+2, r26	; 0x02
    155a:	bb 83       	std	Y+3, r27	; 0x03
    155c:	9f 77       	andi	r25, 0x7F	; 127
    155e:	df 91       	pop	r29
    1560:	cf 91       	pop	r28
    1562:	ff 90       	pop	r15
    1564:	ef 90       	pop	r14
    1566:	df 90       	pop	r13
    1568:	cf 90       	pop	r12
    156a:	bf 90       	pop	r11
    156c:	af 90       	pop	r10
    156e:	9f 90       	pop	r9
    1570:	8f 90       	pop	r8
    1572:	08 95       	ret

00001574 <rand_r>:
    1574:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <do_rand>
    1578:	08 95       	ret

0000157a <rand>:
    157a:	80 e0       	ldi	r24, 0x00	; 0
    157c:	91 e0       	ldi	r25, 0x01	; 1
    157e:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <do_rand>
    1582:	08 95       	ret

00001584 <srand>:
    1584:	a0 e0       	ldi	r26, 0x00	; 0
    1586:	b0 e0       	ldi	r27, 0x00	; 0
    1588:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    158c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    1590:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    1594:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    1598:	08 95       	ret

0000159a <eeprom_read_byte>:
    159a:	f9 99       	sbic	0x1f, 1	; 31
    159c:	fe cf       	rjmp	.-4      	; 0x159a <eeprom_read_byte>
    159e:	92 bd       	out	0x22, r25	; 34
    15a0:	81 bd       	out	0x21, r24	; 33
    15a2:	f8 9a       	sbi	0x1f, 0	; 31
    15a4:	99 27       	eor	r25, r25
    15a6:	80 b5       	in	r24, 0x20	; 32
    15a8:	08 95       	ret

000015aa <eeprom_write_byte>:
    15aa:	26 2f       	mov	r18, r22

000015ac <eeprom_write_r18>:
    15ac:	f9 99       	sbic	0x1f, 1	; 31
    15ae:	fe cf       	rjmp	.-4      	; 0x15ac <eeprom_write_r18>
    15b0:	1f ba       	out	0x1f, r1	; 31
    15b2:	92 bd       	out	0x22, r25	; 34
    15b4:	81 bd       	out	0x21, r24	; 33
    15b6:	20 bd       	out	0x20, r18	; 32
    15b8:	0f b6       	in	r0, 0x3f	; 63
    15ba:	f8 94       	cli
    15bc:	fa 9a       	sbi	0x1f, 2	; 31
    15be:	f9 9a       	sbi	0x1f, 1	; 31
    15c0:	0f be       	out	0x3f, r0	; 63
    15c2:	01 96       	adiw	r24, 0x01	; 1
    15c4:	08 95       	ret

000015c6 <__divmodsi4>:
    15c6:	05 2e       	mov	r0, r21
    15c8:	97 fb       	bst	r25, 7
    15ca:	1e f4       	brtc	.+6      	; 0x15d2 <__divmodsi4+0xc>
    15cc:	00 94       	com	r0
    15ce:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <__negsi2>
    15d2:	57 fd       	sbrc	r21, 7
    15d4:	07 d0       	rcall	.+14     	; 0x15e4 <__divmodsi4_neg2>
    15d6:	0e 94 15 0b 	call	0x162a	; 0x162a <__udivmodsi4>
    15da:	07 fc       	sbrc	r0, 7
    15dc:	03 d0       	rcall	.+6      	; 0x15e4 <__divmodsi4_neg2>
    15de:	4e f4       	brtc	.+18     	; 0x15f2 <__divmodsi4_exit>
    15e0:	0c 94 fa 0a 	jmp	0x15f4	; 0x15f4 <__negsi2>

000015e4 <__divmodsi4_neg2>:
    15e4:	50 95       	com	r21
    15e6:	40 95       	com	r20
    15e8:	30 95       	com	r19
    15ea:	21 95       	neg	r18
    15ec:	3f 4f       	sbci	r19, 0xFF	; 255
    15ee:	4f 4f       	sbci	r20, 0xFF	; 255
    15f0:	5f 4f       	sbci	r21, 0xFF	; 255

000015f2 <__divmodsi4_exit>:
    15f2:	08 95       	ret

000015f4 <__negsi2>:
    15f4:	90 95       	com	r25
    15f6:	80 95       	com	r24
    15f8:	70 95       	com	r23
    15fa:	61 95       	neg	r22
    15fc:	7f 4f       	sbci	r23, 0xFF	; 255
    15fe:	8f 4f       	sbci	r24, 0xFF	; 255
    1600:	9f 4f       	sbci	r25, 0xFF	; 255
    1602:	08 95       	ret

00001604 <__muluhisi3>:
    1604:	0e 94 37 0b 	call	0x166e	; 0x166e <__umulhisi3>
    1608:	a5 9f       	mul	r26, r21
    160a:	90 0d       	add	r25, r0
    160c:	b4 9f       	mul	r27, r20
    160e:	90 0d       	add	r25, r0
    1610:	a4 9f       	mul	r26, r20
    1612:	80 0d       	add	r24, r0
    1614:	91 1d       	adc	r25, r1
    1616:	11 24       	eor	r1, r1
    1618:	08 95       	ret

0000161a <__mulshisi3>:
    161a:	b7 ff       	sbrs	r27, 7
    161c:	0c 94 02 0b 	jmp	0x1604	; 0x1604 <__muluhisi3>

00001620 <__mulohisi3>:
    1620:	0e 94 02 0b 	call	0x1604	; 0x1604 <__muluhisi3>
    1624:	82 1b       	sub	r24, r18
    1626:	93 0b       	sbc	r25, r19
    1628:	08 95       	ret

0000162a <__udivmodsi4>:
    162a:	a1 e2       	ldi	r26, 0x21	; 33
    162c:	1a 2e       	mov	r1, r26
    162e:	aa 1b       	sub	r26, r26
    1630:	bb 1b       	sub	r27, r27
    1632:	fd 01       	movw	r30, r26
    1634:	0d c0       	rjmp	.+26     	; 0x1650 <__udivmodsi4_ep>

00001636 <__udivmodsi4_loop>:
    1636:	aa 1f       	adc	r26, r26
    1638:	bb 1f       	adc	r27, r27
    163a:	ee 1f       	adc	r30, r30
    163c:	ff 1f       	adc	r31, r31
    163e:	a2 17       	cp	r26, r18
    1640:	b3 07       	cpc	r27, r19
    1642:	e4 07       	cpc	r30, r20
    1644:	f5 07       	cpc	r31, r21
    1646:	20 f0       	brcs	.+8      	; 0x1650 <__udivmodsi4_ep>
    1648:	a2 1b       	sub	r26, r18
    164a:	b3 0b       	sbc	r27, r19
    164c:	e4 0b       	sbc	r30, r20
    164e:	f5 0b       	sbc	r31, r21

00001650 <__udivmodsi4_ep>:
    1650:	66 1f       	adc	r22, r22
    1652:	77 1f       	adc	r23, r23
    1654:	88 1f       	adc	r24, r24
    1656:	99 1f       	adc	r25, r25
    1658:	1a 94       	dec	r1
    165a:	69 f7       	brne	.-38     	; 0x1636 <__udivmodsi4_loop>
    165c:	60 95       	com	r22
    165e:	70 95       	com	r23
    1660:	80 95       	com	r24
    1662:	90 95       	com	r25
    1664:	9b 01       	movw	r18, r22
    1666:	ac 01       	movw	r20, r24
    1668:	bd 01       	movw	r22, r26
    166a:	cf 01       	movw	r24, r30
    166c:	08 95       	ret

0000166e <__umulhisi3>:
    166e:	a2 9f       	mul	r26, r18
    1670:	b0 01       	movw	r22, r0
    1672:	b3 9f       	mul	r27, r19
    1674:	c0 01       	movw	r24, r0
    1676:	a3 9f       	mul	r26, r19
    1678:	70 0d       	add	r23, r0
    167a:	81 1d       	adc	r24, r1
    167c:	11 24       	eor	r1, r1
    167e:	91 1d       	adc	r25, r1
    1680:	b2 9f       	mul	r27, r18
    1682:	70 0d       	add	r23, r0
    1684:	81 1d       	adc	r24, r1
    1686:	11 24       	eor	r1, r1
    1688:	91 1d       	adc	r25, r1
    168a:	08 95       	ret

0000168c <_exit>:
    168c:	f8 94       	cli

0000168e <__stop_program>:
    168e:	ff cf       	rjmp	.-2      	; 0x168e <__stop_program>
