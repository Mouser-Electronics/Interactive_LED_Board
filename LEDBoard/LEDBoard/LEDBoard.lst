
LEDBoard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004a  00800100  00001548  000015fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001548  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000232  0080014a  0080014a  00001646  2**0
                  ALLOC
  3 .eeprom       00000003  00810000  00810000  00001646  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  00001649  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00001679  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e8c  00000000  00000000  000016a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004bb  00000000  00000000  0000352d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005ef  00000000  00000000  000039e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000534  00000000  00000000  00003fd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005c4  00000000  00000000  0000450c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001ff9  00000000  00000000  00004ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00006ac9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__ctors_end>
       4:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
       8:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
       c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      10:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      14:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      18:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      1c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      20:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      24:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      28:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      2c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      30:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      34:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      38:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      3c:	0c 94 44 07 	jmp	0xe88	; 0xe88 <__vector_15>
      40:	0c 94 05 07 	jmp	0xe0a	; 0xe0a <__vector_16>
      44:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      48:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      4c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      50:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      54:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      58:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      5c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      60:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      64:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      68:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      6c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      70:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      74:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      78:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>

0000007c <__trampolines_end>:
      7c:	ff ea       	ldi	r31, 0xAF	; 175
      7e:	8c 5a       	subi	r24, 0xAC	; 172
      80:	3a 24       	eor	r3, r10
      82:	14 0a       	sbc	r1, r20
      84:	04 00       	.word	0x0004	; ????
      86:	00 00       	nop
      88:	02 04       	cpc	r0, r2
      8a:	08 0c       	add	r0, r8
      8c:	10 12       	cpse	r1, r16
      8e:	14 16       	cp	r1, r20
      90:	16 16       	cp	r1, r22
      92:	14 12       	cpse	r1, r20
      94:	10 0e       	add	r1, r16
      96:	0a 08       	sbc	r0, r10
      98:	04 02       	muls	r16, r20
      9a:	00 00       	nop
      9c:	00 00       	nop
      9e:	00 00       	nop
      a0:	02 04       	cpc	r0, r2
      a2:	06 08       	sbc	r0, r6
      a4:	08 0a       	sbc	r0, r24
      a6:	0a 0a       	sbc	r0, r26
      a8:	0a 0a       	sbc	r0, r26
      aa:	08 04       	cpc	r0, r8
      ac:	02 01       	movw	r0, r4
      ae:	01 00       	.word	0x0001	; ????

000000b0 <__ctors_end>:
      b0:	11 24       	eor	r1, r1
      b2:	1f be       	out	0x3f, r1	; 63
      b4:	cf ef       	ldi	r28, 0xFF	; 255
      b6:	d4 e0       	ldi	r29, 0x04	; 4
      b8:	de bf       	out	0x3e, r29	; 62
      ba:	cd bf       	out	0x3d, r28	; 61

000000bc <__do_copy_data>:
      bc:	11 e0       	ldi	r17, 0x01	; 1
      be:	a0 e0       	ldi	r26, 0x00	; 0
      c0:	b1 e0       	ldi	r27, 0x01	; 1
      c2:	e8 e4       	ldi	r30, 0x48	; 72
      c4:	f5 e1       	ldi	r31, 0x15	; 21
      c6:	02 c0       	rjmp	.+4      	; 0xcc <__do_copy_data+0x10>
      c8:	05 90       	lpm	r0, Z+
      ca:	0d 92       	st	X+, r0
      cc:	aa 34       	cpi	r26, 0x4A	; 74
      ce:	b1 07       	cpc	r27, r17
      d0:	d9 f7       	brne	.-10     	; 0xc8 <__do_copy_data+0xc>

000000d2 <__do_clear_bss>:
      d2:	23 e0       	ldi	r18, 0x03	; 3
      d4:	aa e4       	ldi	r26, 0x4A	; 74
      d6:	b1 e0       	ldi	r27, 0x01	; 1
      d8:	01 c0       	rjmp	.+2      	; 0xdc <.do_clear_bss_start>

000000da <.do_clear_bss_loop>:
      da:	1d 92       	st	X+, r1

000000dc <.do_clear_bss_start>:
      dc:	ac 37       	cpi	r26, 0x7C	; 124
      de:	b2 07       	cpc	r27, r18
      e0:	e1 f7       	brne	.-8      	; 0xda <.do_clear_bss_loop>
      e2:	0e 94 9f 09 	call	0x133e	; 0x133e <main>
      e6:	0c 94 a2 0a 	jmp	0x1544	; 0x1544 <_exit>

000000ea <__bad_interrupt>:
      ea:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ee <quick_fade>:

  return current_val;
}

int quick_fade(int ir, int activated, int current_val) {
  if (activated) {
      ee:	61 15       	cp	r22, r1
      f0:	71 05       	cpc	r23, r1
      f2:	31 f4       	brne	.+12     	; 0x100 <quick_fade+0x12>
    // return 255;
    return activated;
  }

  if (current_val > 2) {
      f4:	43 30       	cpi	r20, 0x03	; 3
      f6:	51 05       	cpc	r21, r1
      f8:	2c f0       	brlt	.+10     	; 0x104 <quick_fade+0x16>
    return current_val - 3;
      fa:	ca 01       	movw	r24, r20
      fc:	03 97       	sbiw	r24, 0x03	; 3
      fe:	08 95       	ret
     100:	cb 01       	movw	r24, r22
     102:	08 95       	ret
  }

  return 0;
     104:	80 e0       	ldi	r24, 0x00	; 0
     106:	90 e0       	ldi	r25, 0x00	; 0
}
     108:	08 95       	ret

0000010a <inv_heat>:
#define hstep 16

int inv_heat(int ir, int activated, int current_val) {
  int ret;

  if (activated) {
     10a:	67 2b       	or	r22, r23
     10c:	19 f0       	breq	.+6      	; 0x114 <inv_heat+0xa>
    ret = current_val - hstep;
     10e:	ca 01       	movw	r24, r20
     110:	40 97       	sbiw	r24, 0x10	; 16
     112:	05 c0       	rjmp	.+10     	; 0x11e <inv_heat+0x14>
  } else {
    ret = current_val + step;
     114:	20 91 04 01 	lds	r18, 0x0104
     118:	ca 01       	movw	r24, r20
     11a:	82 0f       	add	r24, r18
     11c:	91 1d       	adc	r25, r1
     11e:	97 ff       	sbrs	r25, 7
     120:	02 c0       	rjmp	.+4      	; 0x126 <inv_heat+0x1c>
     122:	80 e0       	ldi	r24, 0x00	; 0
     124:	90 e0       	ldi	r25, 0x00	; 0
     126:	8f 3f       	cpi	r24, 0xFF	; 255
     128:	91 05       	cpc	r25, r1
     12a:	19 f0       	breq	.+6      	; 0x132 <inv_heat+0x28>
     12c:	14 f0       	brlt	.+4      	; 0x132 <inv_heat+0x28>
     12e:	8f ef       	ldi	r24, 0xFF	; 255
     130:	90 e0       	ldi	r25, 0x00	; 0
  if (ret < 0) {
    return 0;
  }

  return ret;
}
     132:	08 95       	ret

00000134 <inv_fade>:

  return ret;
}

int inv_fade(int ir, int activated, int current_val) {
  if (activated) {
     134:	67 2b       	or	r22, r23
     136:	49 f4       	brne	.+18     	; 0x14a <inv_fade+0x16>
    return 0;
  }

  int ret = current_val + 1;
     138:	ca 01       	movw	r24, r20
     13a:	01 96       	adiw	r24, 0x01	; 1
     13c:	8f 3f       	cpi	r24, 0xFF	; 255
     13e:	91 05       	cpc	r25, r1
     140:	31 f0       	breq	.+12     	; 0x14e <inv_fade+0x1a>
     142:	2c f0       	brlt	.+10     	; 0x14e <inv_fade+0x1a>
     144:	8f ef       	ldi	r24, 0xFF	; 255
     146:	90 e0       	ldi	r25, 0x00	; 0
     148:	08 95       	ret
  return ret;
}

int inv_fade(int ir, int activated, int current_val) {
  if (activated) {
    return 0;
     14a:	80 e0       	ldi	r24, 0x00	; 0
     14c:	90 e0       	ldi	r25, 0x00	; 0
  if (ret > 255) {
    return 255;
  }

  return ret;
}
     14e:	08 95       	ret

00000150 <net_repeat>:
  return 0;
}

int net_repeat(int val) {
  return val;
}
     150:	08 95       	ret

00000152 <net_decrement>:

int net_decrement(int val) {
  return val - 2;
}
     152:	02 97       	sbiw	r24, 0x02	; 2
     154:	08 95       	ret

00000156 <sine_fade>:
  22, 22, 20, 18, 16, 14, 10, 8, 4, 2,
  0, 0, 0, 0, 0, 0, 2, 4, 6, 8, 
  8, 10, 10, 10, 10, 10, 8, 4, 2, 1, 1
};

int sine_fade(int ir, int activated, int current_val) {
     156:	9c 01       	movw	r18, r24
     158:	22 0f       	add	r18, r18
     15a:	33 1f       	adc	r19, r19
  static int step[8] = {0, 0, 0, 0, 0, 0, 0, 0};
  static int mstep[8] = {0, 0, 0, 0, 0, 0, 0, 0};

  if (activated) {
    step[ir] = 1;
     15c:	f9 01       	movw	r30, r18
     15e:	e4 52       	subi	r30, 0x24	; 36
     160:	fe 4f       	sbci	r31, 0xFE	; 254

int sine_fade(int ir, int activated, int current_val) {
  static int step[8] = {0, 0, 0, 0, 0, 0, 0, 0};
  static int mstep[8] = {0, 0, 0, 0, 0, 0, 0, 0};

  if (activated) {
     162:	67 2b       	or	r22, r23
     164:	61 f0       	breq	.+24     	; 0x17e <sine_fade+0x28>
    step[ir] = 1;
     166:	81 e0       	ldi	r24, 0x01	; 1
     168:	90 e0       	ldi	r25, 0x00	; 0
     16a:	91 83       	std	Z+1, r25	; 0x01
     16c:	80 83       	st	Z, r24
    mstep[ir] = 0;
     16e:	f9 01       	movw	r30, r18
     170:	e4 53       	subi	r30, 0x34	; 52
     172:	fe 4f       	sbci	r31, 0xFE	; 254
     174:	11 82       	std	Z+1, r1	; 0x01
     176:	10 82       	st	Z, r1
    return 255;
     178:	8f ef       	ldi	r24, 0xFF	; 255
     17a:	90 e0       	ldi	r25, 0x00	; 0
     17c:	08 95       	ret
  }

  if (step[ir] > 0 && step[ir] < sine_steps) {
     17e:	60 81       	ld	r22, Z
     180:	71 81       	ldd	r23, Z+1	; 0x01
     182:	cb 01       	movw	r24, r22
     184:	01 97       	sbiw	r24, 0x01	; 1
     186:	c1 97       	sbiw	r24, 0x31	; 49
     188:	70 f5       	brcc	.+92     	; 0x1e6 <sine_fade+0x90>
    if (step[ir] > 10 && mstep[ir] < 2) {
     18a:	6b 30       	cpi	r22, 0x0B	; 11
     18c:	71 05       	cpc	r23, r1
     18e:	6c f0       	brlt	.+26     	; 0x1aa <sine_fade+0x54>
     190:	f9 01       	movw	r30, r18
     192:	e4 53       	subi	r30, 0x34	; 52
     194:	fe 4f       	sbci	r31, 0xFE	; 254
     196:	80 81       	ld	r24, Z
     198:	91 81       	ldd	r25, Z+1	; 0x01
     19a:	82 30       	cpi	r24, 0x02	; 2
     19c:	91 05       	cpc	r25, r1
     19e:	2c f4       	brge	.+10     	; 0x1aa <sine_fade+0x54>
      mstep[ir]++;
     1a0:	01 96       	adiw	r24, 0x01	; 1
     1a2:	91 83       	std	Z+1, r25	; 0x01
     1a4:	80 83       	st	Z, r24
     1a6:	ca 01       	movw	r24, r20
     1a8:	08 95       	ret
      return current_val;
    }

    mstep[ir] = 0;
     1aa:	f9 01       	movw	r30, r18
     1ac:	e4 53       	subi	r30, 0x34	; 52
     1ae:	fe 4f       	sbci	r31, 0xFE	; 254
     1b0:	11 82       	std	Z+1, r1	; 0x01
     1b2:	10 82       	st	Z, r1
    int target = pgm_read_byte(damp_sine + step[ir] + 1);
     1b4:	fb 01       	movw	r30, r22
     1b6:	e3 58       	subi	r30, 0x83	; 131
     1b8:	ff 4f       	sbci	r31, 0xFF	; 255
     1ba:	84 91       	lpm	r24, Z
     1bc:	90 e0       	ldi	r25, 0x00	; 0
     1be:	6f 5f       	subi	r22, 0xFF	; 255
     1c0:	7f 4f       	sbci	r23, 0xFF	; 255

    if (current_val < target) {
     1c2:	48 17       	cp	r20, r24
     1c4:	59 07       	cpc	r21, r25
     1c6:	1c f4       	brge	.+6      	; 0x1ce <sine_fade+0x78>
      return current_val + 1;
     1c8:	ca 01       	movw	r24, r20
     1ca:	01 96       	adiw	r24, 0x01	; 1
     1cc:	08 95       	ret
    } else if (current_val > target) {
     1ce:	84 17       	cp	r24, r20
     1d0:	95 07       	cpc	r25, r21
     1d2:	1c f4       	brge	.+6      	; 0x1da <sine_fade+0x84>
      return current_val - 1;
     1d4:	ca 01       	movw	r24, r20
     1d6:	01 97       	sbiw	r24, 0x01	; 1
     1d8:	08 95       	ret
    } else {
      step[ir] += 1;
     1da:	f9 01       	movw	r30, r18
     1dc:	e4 52       	subi	r30, 0x24	; 36
     1de:	fe 4f       	sbci	r31, 0xFE	; 254
     1e0:	71 83       	std	Z+1, r23	; 0x01
     1e2:	60 83       	st	Z, r22
     1e4:	08 95       	ret
      return target;
    }
  }

  return 0;
     1e6:	80 e0       	ldi	r24, 0x00	; 0
     1e8:	90 e0       	ldi	r25, 0x00	; 0
}
     1ea:	08 95       	ret

000001ec <saveConfig>:
      }
    }
  }
}

void saveConfig() {
     1ec:	cf 93       	push	r28
    
    // Disable interrupt while saving EEPROM bytes.  Added 7/12/2012, WHO.
    uint8_t oldSREG = SREG;
     1ee:	cf b7       	in	r28, 0x3f	; 63
    cli(); 
     1f0:	f8 94       	cli
        
  eeprom_write_byte(&ProgramConfig, program);
     1f2:	60 91 90 01 	lds	r22, 0x0190
     1f6:	82 e0       	ldi	r24, 0x02	; 2
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	0e 94 31 0a 	call	0x1462	; 0x1462 <__eewr_byte_m164p>
  eeprom_write_byte(&SensitivityConfig, sensitivity);
     1fe:	60 91 45 01 	lds	r22, 0x0145
     202:	81 e0       	ldi	r24, 0x01	; 1
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	0e 94 31 0a 	call	0x1462	; 0x1462 <__eewr_byte_m164p>
  eeprom_write_byte(&NetworkConfig, netConfig);
     20a:	60 91 8f 01 	lds	r22, 0x018F
     20e:	80 e0       	ldi	r24, 0x00	; 0
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	0e 94 31 0a 	call	0x1462	; 0x1462 <__eewr_byte_m164p>
    SREG = oldSREG;
     216:	cf bf       	out	0x3f, r28	; 63
}
     218:	cf 91       	pop	r28
     21a:	08 95       	ret

0000021c <delay_ms>:
    compbuff[i] = 0;
  }
}

void delay_ms(uint16_t ms) {
  while (ms) {
     21c:	00 97       	sbiw	r24, 0x00	; 0
     21e:	41 f0       	breq	.+16     	; 0x230 <delay_ms+0x14>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     220:	ef ec       	ldi	r30, 0xCF	; 207
     222:	f7 e0       	ldi	r31, 0x07	; 7
     224:	31 97       	sbiw	r30, 0x01	; 1
     226:	f1 f7       	brne	.-4      	; 0x224 <delay_ms+0x8>
     228:	00 c0       	rjmp	.+0      	; 0x22a <delay_ms+0xe>
     22a:	00 00       	nop
    _delay_ms(1);
    ms--;
     22c:	01 97       	sbiw	r24, 0x01	; 1
     22e:	f6 cf       	rjmp	.-20     	; 0x21c <delay_ms>
  }
}
     230:	08 95       	ret

00000232 <flashLeds>:
    SREG = oldSREG;
}

void flashLeds() {
  int i;
  for (i=0; i< 8; i++) {
     232:	80 e0       	ldi	r24, 0x00	; 0
     234:	90 e0       	ldi	r25, 0x00	; 0
    compbuff[i] = 255;
     236:	2f ef       	ldi	r18, 0xFF	; 255
     238:	fc 01       	movw	r30, r24
     23a:	e4 50       	subi	r30, 0x04	; 4
     23c:	fe 4f       	sbci	r31, 0xFE	; 254
     23e:	20 83       	st	Z, r18
    SREG = oldSREG;
}

void flashLeds() {
  int i;
  for (i=0; i< 8; i++) {
     240:	01 96       	adiw	r24, 0x01	; 1
     242:	88 30       	cpi	r24, 0x08	; 8
     244:	91 05       	cpc	r25, r1
     246:	c1 f7       	brne	.-16     	; 0x238 <flashLeds+0x6>
    compbuff[i] = 255;
  }
  delay_ms(50);
     248:	82 e3       	ldi	r24, 0x32	; 50
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	0e 94 0e 01 	call	0x21c	; 0x21c <delay_ms>
  for (i=0; i< 8; i++) {
     250:	80 e0       	ldi	r24, 0x00	; 0
     252:	90 e0       	ldi	r25, 0x00	; 0
    compbuff[i] = 0;
     254:	fc 01       	movw	r30, r24
     256:	e4 50       	subi	r30, 0x04	; 4
     258:	fe 4f       	sbci	r31, 0xFE	; 254
     25a:	10 82       	st	Z, r1
  int i;
  for (i=0; i< 8; i++) {
    compbuff[i] = 255;
  }
  delay_ms(50);
  for (i=0; i< 8; i++) {
     25c:	01 96       	adiw	r24, 0x01	; 1
     25e:	88 30       	cpi	r24, 0x08	; 8
     260:	91 05       	cpc	r25, r1
     262:	c1 f7       	brne	.-16     	; 0x254 <flashLeds+0x22>
    compbuff[i] = 0;
  }
}
     264:	08 95       	ret

00000266 <dispatch>:
  compbuff[ir] = dispatch(program, ir, act, compbuff[ir]);

  return act;
}

int dispatch(int program, int ir, int activated, int current_val) {
     266:	cf 93       	push	r28
     268:	df 93       	push	r29
     26a:	eb 01       	movw	r28, r22
     26c:	ba 01       	movw	r22, r20
  last_act[ir] = activated;
     26e:	de 01       	movw	r26, r28
     270:	aa 0f       	add	r26, r26
     272:	bb 1f       	adc	r27, r27
     274:	a1 58       	subi	r26, 0x81	; 129
     276:	be 4f       	sbci	r27, 0xFE	; 254
     278:	6d 93       	st	X+, r22
     27a:	7c 93       	st	X, r23

  if (program < MAX_PROGRAMS) {
     27c:	80 31       	cpi	r24, 0x10	; 16
     27e:	91 05       	cpc	r25, r1
     280:	6c f4       	brge	.+26     	; 0x29c <dispatch+0x36>
    return ledHandlers[program](ir, activated, current_val);
     282:	fc 01       	movw	r30, r24
     284:	ee 0f       	add	r30, r30
     286:	ff 1f       	adc	r31, r31
     288:	eb 5d       	subi	r30, 0xDB	; 219
     28a:	fe 4f       	sbci	r31, 0xFE	; 254
     28c:	01 90       	ld	r0, Z+
     28e:	f0 81       	ld	r31, Z
     290:	e0 2d       	mov	r30, r0
     292:	a9 01       	movw	r20, r18
     294:	ce 01       	movw	r24, r28
  }

  return 0;
}
     296:	df 91       	pop	r29
     298:	cf 91       	pop	r28

int dispatch(int program, int ir, int activated, int current_val) {
  last_act[ir] = activated;

  if (program < MAX_PROGRAMS) {
    return ledHandlers[program](ir, activated, current_val);
     29a:	09 94       	ijmp
  }

  return 0;
}
     29c:	80 e0       	ldi	r24, 0x00	; 0
     29e:	90 e0       	ldi	r25, 0x00	; 0
     2a0:	df 91       	pop	r29
     2a2:	cf 91       	pop	r28
     2a4:	08 95       	ret

000002a6 <_activate>:
}

uint8_t cutoffs[] = {100, 50, 35, 20};

int _activate(int16_t slope, int mode) {
  if (mode == pos && slope < 0) {
     2a6:	62 30       	cpi	r22, 0x02	; 2
     2a8:	71 05       	cpc	r23, r1
     2aa:	19 f4       	brne	.+6      	; 0x2b2 <_activate+0xc>
     2ac:	97 ff       	sbrs	r25, 7
     2ae:	07 c0       	rjmp	.+14     	; 0x2be <_activate+0x18>
     2b0:	1c c0       	rjmp	.+56     	; 0x2ea <_activate+0x44>
    return 0;
  }

  if (mode == neg && slope > 0) {
     2b2:	61 30       	cpi	r22, 0x01	; 1
     2b4:	71 05       	cpc	r23, r1
     2b6:	19 f4       	brne	.+6      	; 0x2be <_activate+0x18>
     2b8:	18 16       	cp	r1, r24
     2ba:	19 06       	cpc	r1, r25
     2bc:	b4 f0       	brlt	.+44     	; 0x2ea <_activate+0x44>
     2be:	97 ff       	sbrs	r25, 7
     2c0:	03 c0       	rjmp	.+6      	; 0x2c8 <_activate+0x22>
     2c2:	91 95       	neg	r25
     2c4:	81 95       	neg	r24
     2c6:	91 09       	sbc	r25, r1

  if (slope < 0) {
    slope *= -1;
  }

  if (slope < cutoffs[sensitivity]) {
     2c8:	e0 91 45 01 	lds	r30, 0x0145
     2cc:	f0 e0       	ldi	r31, 0x00	; 0
     2ce:	e0 50       	subi	r30, 0x00	; 0
     2d0:	ff 4f       	sbci	r31, 0xFF	; 255
     2d2:	20 81       	ld	r18, Z
     2d4:	30 e0       	ldi	r19, 0x00	; 0
     2d6:	82 17       	cp	r24, r18
     2d8:	93 07       	cpc	r25, r19
     2da:	3c f0       	brlt	.+14     	; 0x2ea <_activate+0x44>
     2dc:	8f 3f       	cpi	r24, 0xFF	; 255
     2de:	91 05       	cpc	r25, r1
     2e0:	31 f0       	breq	.+12     	; 0x2ee <_activate+0x48>
     2e2:	2c f0       	brlt	.+10     	; 0x2ee <_activate+0x48>
     2e4:	8f ef       	ldi	r24, 0xFF	; 255
     2e6:	90 e0       	ldi	r25, 0x00	; 0
     2e8:	08 95       	ret

uint8_t cutoffs[] = {100, 50, 35, 20};

int _activate(int16_t slope, int mode) {
  if (mode == pos && slope < 0) {
    return 0;
     2ea:	80 e0       	ldi	r24, 0x00	; 0
     2ec:	90 e0       	ldi	r25, 0x00	; 0
  if (slope > 255) {
    return 255;
  }

  return slope;
}
     2ee:	08 95       	ret

000002f0 <slope>:
  int16_t ret = (sum >> (nasamples == 8 ? 3 : 2));

  return ret;
}

int16_t slope(int ir, int16_t reading) {
     2f0:	2c e1       	ldi	r18, 0x1C	; 28
     2f2:	28 9f       	mul	r18, r24
     2f4:	a0 01       	movw	r20, r0
     2f6:	29 9f       	mul	r18, r25
     2f8:	50 0d       	add	r21, r0
     2fa:	11 24       	eor	r1, r1
     2fc:	44 57       	subi	r20, 0x74	; 116
     2fe:	5d 4f       	sbci	r21, 0xFD	; 253
     300:	20 e0       	ldi	r18, 0x00	; 0
     302:	30 e0       	ldi	r19, 0x00	; 0
     304:	fa 01       	movw	r30, r20
     306:	e2 0f       	add	r30, r18
     308:	f3 1f       	adc	r31, r19
  int i;
  // shift 
  for (i=0; i< nsamples - 1; i++) {
    samples[ir][i] = samples[ir][i+1];
     30a:	a2 81       	ldd	r26, Z+2	; 0x02
     30c:	b3 81       	ldd	r27, Z+3	; 0x03
     30e:	b1 83       	std	Z+1, r27	; 0x01
     310:	a0 83       	st	Z, r26
     312:	2e 5f       	subi	r18, 0xFE	; 254
     314:	3f 4f       	sbci	r19, 0xFF	; 255
}

int16_t slope(int ir, int16_t reading) {
  int i;
  // shift 
  for (i=0; i< nsamples - 1; i++) {
     316:	2a 31       	cpi	r18, 0x1A	; 26
     318:	31 05       	cpc	r19, r1
     31a:	a1 f7       	brne	.-24     	; 0x304 <slope+0x14>
    samples[ir][i] = samples[ir][i+1];
  }
  samples[ir][nsamples - 1] = reading;
     31c:	2c e1       	ldi	r18, 0x1C	; 28
     31e:	28 9f       	mul	r18, r24
     320:	f0 01       	movw	r30, r0
     322:	29 9f       	mul	r18, r25
     324:	f0 0d       	add	r31, r0
     326:	11 24       	eor	r1, r1
     328:	e4 57       	subi	r30, 0x74	; 116
     32a:	fd 4f       	sbci	r31, 0xFD	; 253
     32c:	73 8f       	std	Z+27, r23	; 0x1b
     32e:	62 8f       	std	Z+26, r22	; 0x1a
     330:	20 e0       	ldi	r18, 0x00	; 0
     332:	30 e0       	ldi	r19, 0x00	; 0

  int16_t diffs = 0;
     334:	80 e0       	ldi	r24, 0x00	; 0
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	fa 01       	movw	r30, r20
     33a:	e2 0f       	add	r30, r18
     33c:	f3 1f       	adc	r31, r19
  for (i=nsamples-1; i > 0; i--) {
    diffs += (samples[ir][i] - samples[ir][i-1]);
     33e:	62 8d       	ldd	r22, Z+26	; 0x1a
     340:	73 8d       	ldd	r23, Z+27	; 0x1b
     342:	00 8c       	ldd	r0, Z+24	; 0x18
     344:	f1 8d       	ldd	r31, Z+25	; 0x19
     346:	e0 2d       	mov	r30, r0
     348:	6e 1b       	sub	r22, r30
     34a:	7f 0b       	sbc	r23, r31
     34c:	86 0f       	add	r24, r22
     34e:	97 1f       	adc	r25, r23
     350:	22 50       	subi	r18, 0x02	; 2
     352:	31 09       	sbc	r19, r1
    samples[ir][i] = samples[ir][i+1];
  }
  samples[ir][nsamples - 1] = reading;

  int16_t diffs = 0;
  for (i=nsamples-1; i > 0; i--) {
     354:	26 3e       	cpi	r18, 0xE6	; 230
     356:	6f ef       	ldi	r22, 0xFF	; 255
     358:	36 07       	cpc	r19, r22
     35a:	71 f7       	brne	.-36     	; 0x338 <slope+0x48>
    diffs += (samples[ir][i] - samples[ir][i-1]);
  }

  return diffs;
}
     35c:	08 95       	ret

0000035e <filteredReading>:
}

// #define nasamples 4
int16_t asamples[8][8];
unsigned int acounter = 0;
int16_t filteredReading(int ir, int16_t reading) {
     35e:	cf 92       	push	r12
     360:	df 92       	push	r13
     362:	ff 92       	push	r15
     364:	0f 93       	push	r16
     366:	1f 93       	push	r17
     368:	cf 93       	push	r28
     36a:	df 93       	push	r29
     36c:	8c 01       	movw	r16, r24
  uint8_t nasamples = (sensitivity <= 1 ? 8 : 4);
     36e:	80 91 45 01 	lds	r24, 0x0145
     372:	82 30       	cpi	r24, 0x02	; 2
     374:	18 f4       	brcc	.+6      	; 0x37c <filteredReading+0x1e>
     376:	f8 e0       	ldi	r31, 0x08	; 8
     378:	ff 2e       	mov	r15, r31
     37a:	02 c0       	rjmp	.+4      	; 0x380 <filteredReading+0x22>
     37c:	e4 e0       	ldi	r30, 0x04	; 4
     37e:	fe 2e       	mov	r15, r30
  int index = acounter++ % nasamples;
     380:	c0 90 5d 01 	lds	r12, 0x015D
     384:	d0 90 5e 01 	lds	r13, 0x015E
     388:	c6 01       	movw	r24, r12
     38a:	01 96       	adiw	r24, 0x01	; 1
     38c:	90 93 5e 01 	sts	0x015E, r25
     390:	80 93 5d 01 	sts	0x015D, r24

  asamples[ir][index] = slope(ir, reading);
     394:	c8 01       	movw	r24, r16
     396:	0e 94 78 01 	call	0x2f0	; 0x2f0 <slope>
     39a:	9c 01       	movw	r18, r24
// #define nasamples 4
int16_t asamples[8][8];
unsigned int acounter = 0;
int16_t filteredReading(int ir, int16_t reading) {
  uint8_t nasamples = (sensitivity <= 1 ? 8 : 4);
  int index = acounter++ % nasamples;
     39c:	cf 2d       	mov	r28, r15
     39e:	d0 e0       	ldi	r29, 0x00	; 0
     3a0:	c6 01       	movw	r24, r12
     3a2:	be 01       	movw	r22, r28
     3a4:	0e 94 a3 09 	call	0x1346	; 0x1346 <__udivmodhi4>

  asamples[ir][index] = slope(ir, reading);
     3a8:	f8 01       	movw	r30, r16
     3aa:	43 e0       	ldi	r20, 0x03	; 3
     3ac:	ee 0f       	add	r30, r30
     3ae:	ff 1f       	adc	r31, r31
     3b0:	4a 95       	dec	r20
     3b2:	e1 f7       	brne	.-8      	; 0x3ac <filteredReading+0x4e>
     3b4:	e8 0f       	add	r30, r24
     3b6:	f9 1f       	adc	r31, r25
     3b8:	ee 0f       	add	r30, r30
     3ba:	ff 1f       	adc	r31, r31
     3bc:	ec 5f       	subi	r30, 0xFC	; 252
     3be:	fd 4f       	sbci	r31, 0xFD	; 253
     3c0:	31 83       	std	Z+1, r19	; 0x01
     3c2:	20 83       	st	Z, r18
     3c4:	c8 01       	movw	r24, r16
     3c6:	64 e0       	ldi	r22, 0x04	; 4
     3c8:	88 0f       	add	r24, r24
     3ca:	99 1f       	adc	r25, r25
     3cc:	6a 95       	dec	r22
     3ce:	e1 f7       	brne	.-8      	; 0x3c8 <filteredReading+0x6a>
     3d0:	8c 5f       	subi	r24, 0xFC	; 252
     3d2:	9d 4f       	sbci	r25, 0xFD	; 253
  int i;
  int32_t sum = 0;
     3d4:	40 e0       	ldi	r20, 0x00	; 0
     3d6:	50 e0       	ldi	r21, 0x00	; 0
     3d8:	ba 01       	movw	r22, r20
  for (i = 0; i< nasamples; i++) {
     3da:	e0 e0       	ldi	r30, 0x00	; 0
     3dc:	f0 e0       	ldi	r31, 0x00	; 0
     3de:	ec 17       	cp	r30, r28
     3e0:	fd 07       	cpc	r31, r29
     3e2:	8c f4       	brge	.+34     	; 0x406 <filteredReading+0xa8>
     3e4:	df 01       	movw	r26, r30
     3e6:	aa 0f       	add	r26, r26
     3e8:	bb 1f       	adc	r27, r27
     3ea:	a8 0f       	add	r26, r24
     3ec:	b9 1f       	adc	r27, r25
    sum += asamples[ir][i];
     3ee:	0d 91       	ld	r16, X+
     3f0:	1c 91       	ld	r17, X
     3f2:	22 27       	eor	r18, r18
     3f4:	17 fd       	sbrc	r17, 7
     3f6:	20 95       	com	r18
     3f8:	32 2f       	mov	r19, r18
     3fa:	40 0f       	add	r20, r16
     3fc:	51 1f       	adc	r21, r17
     3fe:	62 1f       	adc	r22, r18
     400:	73 1f       	adc	r23, r19
  int index = acounter++ % nasamples;

  asamples[ir][index] = slope(ir, reading);
  int i;
  int32_t sum = 0;
  for (i = 0; i< nasamples; i++) {
     402:	31 96       	adiw	r30, 0x01	; 1
     404:	ec cf       	rjmp	.-40     	; 0x3de <filteredReading+0x80>
    sum += asamples[ir][i];
  }

  int16_t ret = (sum >> (nasamples == 8 ? 3 : 2));
     406:	08 e0       	ldi	r16, 0x08	; 8
     408:	f0 12       	cpse	r15, r16
     40a:	02 c0       	rjmp	.+4      	; 0x410 <filteredReading+0xb2>
     40c:	83 e0       	ldi	r24, 0x03	; 3
     40e:	01 c0       	rjmp	.+2      	; 0x412 <filteredReading+0xb4>
     410:	82 e0       	ldi	r24, 0x02	; 2
     412:	8a 01       	movw	r16, r20
     414:	9b 01       	movw	r18, r22
     416:	04 c0       	rjmp	.+8      	; 0x420 <filteredReading+0xc2>
     418:	35 95       	asr	r19
     41a:	27 95       	ror	r18
     41c:	17 95       	ror	r17
     41e:	07 95       	ror	r16
     420:	8a 95       	dec	r24
     422:	d2 f7       	brpl	.-12     	; 0x418 <filteredReading+0xba>
     424:	d9 01       	movw	r26, r18
     426:	c8 01       	movw	r24, r16

  return ret;
}
     428:	df 91       	pop	r29
     42a:	cf 91       	pop	r28
     42c:	1f 91       	pop	r17
     42e:	0f 91       	pop	r16
     430:	ff 90       	pop	r15
     432:	df 90       	pop	r13
     434:	cf 90       	pop	r12
     436:	08 95       	ret

00000438 <activate>:

enum actstate {neg=1, pos};
int activated[8] = {0, 0, 0, 0, 0, 0, 0, 0};
unsigned int actcount[8] = {0, 0, 0, 0, 0, 0, 0, 0};

int activate(int ir, int16_t reading) {
     438:	df 92       	push	r13
     43a:	ef 92       	push	r14
     43c:	ff 92       	push	r15
     43e:	0f 93       	push	r16
     440:	1f 93       	push	r17
     442:	cf 93       	push	r28
     444:	df 93       	push	r29
     446:	ec 01       	movw	r28, r24
  int16_t s = filteredReading(ir, reading);
     448:	0e 94 af 01 	call	0x35e	; 0x35e <filteredReading>
     44c:	d9 2e       	mov	r13, r25

  // tracking steady state
  if (actcount[ir] > 50) {
     44e:	cc 0f       	add	r28, r28
     450:	dd 1f       	adc	r29, r29
     452:	fe 01       	movw	r30, r28
     454:	e1 5a       	subi	r30, 0xA1	; 161
     456:	fe 4f       	sbci	r31, 0xFE	; 254
     458:	e0 80       	ld	r14, Z
     45a:	f1 80       	ldd	r15, Z+1	; 0x01
     45c:	23 e3       	ldi	r18, 0x33	; 51
     45e:	e2 16       	cp	r14, r18
     460:	f1 04       	cpc	r15, r1
     462:	28 f0       	brcs	.+10     	; 0x46e <activate+0x36>
    activated[ir] = 0;
     464:	fe 01       	movw	r30, r28
     466:	e1 59       	subi	r30, 0x91	; 145
     468:	fe 4f       	sbci	r31, 0xFE	; 254
     46a:	11 82       	std	Z+1, r1	; 0x01
     46c:	10 82       	st	Z, r1
  }

  int a = _activate(s, activated[ir]);
     46e:	8e 01       	movw	r16, r28
     470:	01 59       	subi	r16, 0x91	; 145
     472:	1e 4f       	sbci	r17, 0xFE	; 254
     474:	f8 01       	movw	r30, r16
     476:	60 81       	ld	r22, Z
     478:	71 81       	ldd	r23, Z+1	; 0x01
     47a:	9d 2d       	mov	r25, r13
     47c:	0e 94 53 01 	call	0x2a6	; 0x2a6 <_activate>

  if (a) {
     480:	00 97       	sbiw	r24, 0x00	; 0
     482:	81 f0       	breq	.+32     	; 0x4a4 <activate+0x6c>
    activated[ir] = (s < 0 ? neg : pos);
     484:	2d 2d       	mov	r18, r13
     486:	20 95       	com	r18
     488:	22 1f       	adc	r18, r18
     48a:	22 27       	eor	r18, r18
     48c:	22 1f       	adc	r18, r18
     48e:	30 e0       	ldi	r19, 0x00	; 0
     490:	2f 5f       	subi	r18, 0xFF	; 255
     492:	3f 4f       	sbci	r19, 0xFF	; 255
     494:	f8 01       	movw	r30, r16
     496:	31 83       	std	Z+1, r19	; 0x01
     498:	20 83       	st	Z, r18
    actcount[ir] = 0;
     49a:	c1 5a       	subi	r28, 0xA1	; 161
     49c:	de 4f       	sbci	r29, 0xFE	; 254
     49e:	19 82       	std	Y+1, r1	; 0x01
     4a0:	18 82       	st	Y, r1
     4a2:	07 c0       	rjmp	.+14     	; 0x4b2 <activate+0x7a>
  } else {
    actcount[ir]++;
     4a4:	c1 5a       	subi	r28, 0xA1	; 161
     4a6:	de 4f       	sbci	r29, 0xFE	; 254
     4a8:	ff ef       	ldi	r31, 0xFF	; 255
     4aa:	ef 1a       	sub	r14, r31
     4ac:	ff 0a       	sbc	r15, r31
     4ae:	f9 82       	std	Y+1, r15	; 0x01
     4b0:	e8 82       	st	Y, r14
  }
  
  return a;
}
     4b2:	df 91       	pop	r29
     4b4:	cf 91       	pop	r28
     4b6:	1f 91       	pop	r17
     4b8:	0f 91       	pop	r16
     4ba:	ff 90       	pop	r15
     4bc:	ef 90       	pop	r14
     4be:	df 90       	pop	r13
     4c0:	08 95       	ret

000004c2 <handle_ir>:
    _delay_ms(1);
    ms--;
  }
}

int handle_ir(int ir, int16_t bright) {
     4c2:	ef 92       	push	r14
     4c4:	ff 92       	push	r15
     4c6:	0f 93       	push	r16
     4c8:	1f 93       	push	r17
     4ca:	cf 93       	push	r28
     4cc:	df 93       	push	r29
     4ce:	ec 01       	movw	r28, r24
  int act = activate(ir, bright);
     4d0:	0e 94 1c 02 	call	0x438	; 0x438 <activate>
     4d4:	8c 01       	movw	r16, r24
  last_act[ir] = act;
     4d6:	fe 01       	movw	r30, r28
     4d8:	ee 0f       	add	r30, r30
     4da:	ff 1f       	adc	r31, r31
     4dc:	e1 58       	subi	r30, 0x81	; 129
     4de:	fe 4f       	sbci	r31, 0xFE	; 254
     4e0:	91 83       	std	Z+1, r25	; 0x01
     4e2:	80 83       	st	Z, r24
  compbuff[ir] = dispatch(program, ir, act, compbuff[ir]);
     4e4:	ce 01       	movw	r24, r28
     4e6:	84 50       	subi	r24, 0x04	; 4
     4e8:	9e 4f       	sbci	r25, 0xFE	; 254
     4ea:	7c 01       	movw	r14, r24
     4ec:	fc 01       	movw	r30, r24
     4ee:	20 81       	ld	r18, Z
     4f0:	30 e0       	ldi	r19, 0x00	; 0
     4f2:	80 91 90 01 	lds	r24, 0x0190
     4f6:	a8 01       	movw	r20, r16
     4f8:	be 01       	movw	r22, r28
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	0e 94 33 01 	call	0x266	; 0x266 <dispatch>
     500:	f7 01       	movw	r30, r14
     502:	80 83       	st	Z, r24

  return act;
}
     504:	c8 01       	movw	r24, r16
     506:	df 91       	pop	r29
     508:	cf 91       	pop	r28
     50a:	1f 91       	pop	r17
     50c:	0f 91       	pop	r16
     50e:	ff 90       	pop	r15
     510:	ef 90       	pop	r14
     512:	08 95       	ret

00000514 <s_init>:
  }

  return diffs;
}

void s_init() {
     514:	24 e0       	ldi	r18, 0x04	; 4
     516:	32 e0       	ldi	r19, 0x02	; 2
     518:	4c e8       	ldi	r20, 0x8C	; 140
     51a:	52 e0       	ldi	r21, 0x02	; 2
     51c:	80 e0       	ldi	r24, 0x00	; 0
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	fa 01       	movw	r30, r20
     522:	e8 0f       	add	r30, r24
     524:	f9 1f       	adc	r31, r25
  int i, j;

  for (i=0; i< 8; i++) {
    for (j=0; j< nsamples; j++) {
      samples[i][j] = 0;
     526:	11 82       	std	Z+1, r1	; 0x01
     528:	10 82       	st	Z, r1
     52a:	02 96       	adiw	r24, 0x02	; 2

void s_init() {
  int i, j;

  for (i=0; i< 8; i++) {
    for (j=0; j< nsamples; j++) {
     52c:	8c 31       	cpi	r24, 0x1C	; 28
     52e:	91 05       	cpc	r25, r1
     530:	b9 f7       	brne	.-18     	; 0x520 <s_init+0xc>
     532:	80 e0       	ldi	r24, 0x00	; 0
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	f9 01       	movw	r30, r18
     538:	e8 0f       	add	r30, r24
     53a:	f9 1f       	adc	r31, r25
      samples[i][j] = 0;
    }
    for (j=0; j< 8; j++) {
      asamples[i][j] = 0;
     53c:	11 82       	std	Z+1, r1	; 0x01
     53e:	10 82       	st	Z, r1
     540:	02 96       	adiw	r24, 0x02	; 2

  for (i=0; i< 8; i++) {
    for (j=0; j< nsamples; j++) {
      samples[i][j] = 0;
    }
    for (j=0; j< 8; j++) {
     542:	80 31       	cpi	r24, 0x10	; 16
     544:	91 05       	cpc	r25, r1
     546:	b9 f7       	brne	.-18     	; 0x536 <s_init+0x22>
     548:	20 5f       	subi	r18, 0xF0	; 240
     54a:	3f 4f       	sbci	r19, 0xFF	; 255
     54c:	44 5e       	subi	r20, 0xE4	; 228
     54e:	5f 4f       	sbci	r21, 0xFF	; 255
}

void s_init() {
  int i, j;

  for (i=0; i< 8; i++) {
     550:	82 e0       	ldi	r24, 0x02	; 2
     552:	24 38       	cpi	r18, 0x84	; 132
     554:	38 07       	cpc	r19, r24
     556:	11 f7       	brne	.-60     	; 0x51c <s_init+0x8>
     558:	08 95       	ret

0000055a <_random>:
  }

  return 0;
}

int _random(int min, int max) {
     55a:	0f 93       	push	r16
     55c:	1f 93       	push	r17
     55e:	cf 93       	push	r28
     560:	df 93       	push	r29
     562:	ec 01       	movw	r28, r24
     564:	8b 01       	movw	r16, r22
  return (rand() % (max - min + 1) + min);
     566:	0e 94 19 0a 	call	0x1432	; 0x1432 <rand>
     56a:	b8 01       	movw	r22, r16
     56c:	6c 1b       	sub	r22, r28
     56e:	7d 0b       	sbc	r23, r29
     570:	6f 5f       	subi	r22, 0xFF	; 255
     572:	7f 4f       	sbci	r23, 0xFF	; 255
     574:	0e 94 b7 09 	call	0x136e	; 0x136e <__divmodhi4>
}
     578:	8c 0f       	add	r24, r28
     57a:	9d 1f       	adc	r25, r29
     57c:	df 91       	pop	r29
     57e:	cf 91       	pop	r28
     580:	1f 91       	pop	r17
     582:	0f 91       	pop	r16
     584:	08 95       	ret

00000586 <_rstep>:

  return 0;
}

int _random(int min, int max) {
  return (rand() % (max - min + 1) + min);
     586:	0e 94 19 0a 	call	0x1432	; 0x1432 <rand>
     58a:	68 e0       	ldi	r22, 0x08	; 8
     58c:	70 e0       	ldi	r23, 0x00	; 0
     58e:	0e 94 b7 09 	call	0x136e	; 0x136e <__divmodhi4>
}

int _rstep() {
  return _random(3, 10);
}
     592:	03 96       	adiw	r24, 0x03	; 3
     594:	08 95       	ret

00000596 <sparkle_fade>:

int flash_fade(int ir, int activated, int current_val) {
  return _slow_fade(ir, activated, current_val, 10);
}

int sparkle_fade(int ir, int activated, int current_val) {
     596:	cf 93       	push	r28
     598:	df 93       	push	r29
     59a:	fc 01       	movw	r30, r24
     59c:	ec 53       	subi	r30, 0x3C	; 60
     59e:	fe 4f       	sbci	r31, 0xFE	; 254
  static uint8_t offstate[8] = {0, 0, 0, 0, 0, 0, 0, 0};

  if (activated) {
     5a0:	67 2b       	or	r22, r23
     5a2:	41 f0       	breq	.+16     	; 0x5b4 <sparkle_fade+0x1e>
    if (! in_network()) {
     5a4:	20 91 90 01 	lds	r18, 0x0190
     5a8:	28 30       	cpi	r18, 0x08	; 8
     5aa:	18 f4       	brcc	.+6      	; 0x5b2 <sparkle_fade+0x1c>
      offstate[ir] = 200;
     5ac:	28 ec       	ldi	r18, 0xC8	; 200
     5ae:	20 83       	st	Z, r18
     5b0:	01 c0       	rjmp	.+2      	; 0x5b4 <sparkle_fade+0x1e>
    } else {
      offstate[ir] = current_val;
     5b2:	40 83       	st	Z, r20
    }
  }

  if (offstate[ir] > 0) {
     5b4:	20 81       	ld	r18, Z
     5b6:	22 23       	and	r18, r18
     5b8:	11 f0       	breq	.+4      	; 0x5be <sparkle_fade+0x28>
    offstate[ir] -= 1;
     5ba:	21 50       	subi	r18, 0x01	; 1
     5bc:	20 83       	st	Z, r18
  }

  if (offstate[ir] > 0 || current_val != 0) {
     5be:	20 81       	ld	r18, Z
     5c0:	21 11       	cpse	r18, r1
     5c2:	03 c0       	rjmp	.+6      	; 0x5ca <sparkle_fade+0x34>
     5c4:	41 15       	cp	r20, r1
     5c6:	51 05       	cpc	r21, r1
     5c8:	79 f1       	breq	.+94     	; 0x628 <sparkle_fade+0x92>
    int val = current_val + (sparkle_dir[ir] * sparkle_step[ir]);
     5ca:	ec 01       	movw	r28, r24
     5cc:	cc 0f       	add	r28, r28
     5ce:	dd 1f       	adc	r29, r29
     5d0:	fe 01       	movw	r30, r28
     5d2:	e4 59       	subi	r30, 0x94	; 148
     5d4:	fc 4f       	sbci	r31, 0xFC	; 252
     5d6:	60 81       	ld	r22, Z
     5d8:	71 81       	ldd	r23, Z+1	; 0x01
     5da:	c4 51       	subi	r28, 0x14	; 20
     5dc:	de 4f       	sbci	r29, 0xFE	; 254
     5de:	88 81       	ld	r24, Y
     5e0:	99 81       	ldd	r25, Y+1	; 0x01
     5e2:	68 9f       	mul	r22, r24
     5e4:	90 01       	movw	r18, r0
     5e6:	69 9f       	mul	r22, r25
     5e8:	30 0d       	add	r19, r0
     5ea:	78 9f       	mul	r23, r24
     5ec:	30 0d       	add	r19, r0
     5ee:	11 24       	eor	r1, r1
     5f0:	24 0f       	add	r18, r20
     5f2:	35 1f       	adc	r19, r21

    if (val > 255) {
     5f4:	2f 3f       	cpi	r18, 0xFF	; 255
     5f6:	31 05       	cpc	r19, r1
     5f8:	61 f0       	breq	.+24     	; 0x612 <sparkle_fade+0x7c>
     5fa:	5c f0       	brlt	.+22     	; 0x612 <sparkle_fade+0x7c>
      sparkle_dir[ir] = -1 * sparkle_dir[ir];
     5fc:	71 95       	neg	r23
     5fe:	61 95       	neg	r22
     600:	71 09       	sbc	r23, r1
     602:	71 83       	std	Z+1, r23	; 0x01
     604:	60 83       	st	Z, r22
      sparkle_step[ir] = _rstep();
     606:	0e 94 c3 02 	call	0x586	; 0x586 <_rstep>
     60a:	99 83       	std	Y+1, r25	; 0x01
     60c:	88 83       	st	Y, r24
      return 255;
     60e:	8f ef       	ldi	r24, 0xFF	; 255
     610:	0c c0       	rjmp	.+24     	; 0x62a <sparkle_fade+0x94>
    }

    if (val < 0) {
     612:	37 ff       	sbrs	r19, 7
     614:	0c c0       	rjmp	.+24     	; 0x62e <sparkle_fade+0x98>
      sparkle_dir[ir] = -1 * sparkle_dir[ir];
     616:	71 95       	neg	r23
     618:	61 95       	neg	r22
     61a:	71 09       	sbc	r23, r1
     61c:	71 83       	std	Z+1, r23	; 0x01
     61e:	60 83       	st	Z, r22
      sparkle_step[ir] = _rstep();
     620:	0e 94 c3 02 	call	0x586	; 0x586 <_rstep>
     624:	99 83       	std	Y+1, r25	; 0x01
     626:	88 83       	st	Y, r24
    }
    
    return val;
  }

  return 0;
     628:	80 e0       	ldi	r24, 0x00	; 0
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	01 c0       	rjmp	.+2      	; 0x630 <sparkle_fade+0x9a>
     62e:	c9 01       	movw	r24, r18
}
     630:	df 91       	pop	r29
     632:	cf 91       	pop	r28
     634:	08 95       	ret

00000636 <_slow_fade>:

int slow_fade(int ir, int activated, int current_val) {
  return _slow_fade(ir, activated, current_val, 3);
}

int _slow_fade(int ir, int activated, int current_val, uint8_t factor) {
     636:	fc 01       	movw	r30, r24
     638:	e4 54       	subi	r30, 0x44	; 68
     63a:	fe 4f       	sbci	r31, 0xFE	; 254
  static uint8_t msteps[8] = {0, 0, 0, 0, 0, 0, 0, 0};

  if (activated) {
     63c:	67 2b       	or	r22, r23
     63e:	41 f0       	breq	.+16     	; 0x650 <_slow_fade+0x1a>
    msteps[ir] = 0;
     640:	10 82       	st	Z, r1

    if (! in_network()) {
     642:	80 91 90 01 	lds	r24, 0x0190
     646:	88 30       	cpi	r24, 0x08	; 8
     648:	c0 f4       	brcc	.+48     	; 0x67a <_slow_fade+0x44>
      return 255;
     64a:	8f ef       	ldi	r24, 0xFF	; 255
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	08 95       	ret
    }

    return current_val;
  }

  msteps[ir] += 1;
     650:	80 81       	ld	r24, Z
     652:	8f 5f       	subi	r24, 0xFF	; 255

  if (msteps[ir] >= factor) {
     654:	82 17       	cp	r24, r18
     656:	10 f4       	brcc	.+4      	; 0x65c <_slow_fade+0x26>
    }

    return current_val;
  }

  msteps[ir] += 1;
     658:	80 83       	st	Z, r24
     65a:	0f c0       	rjmp	.+30     	; 0x67a <_slow_fade+0x44>

  if (msteps[ir] >= factor) {
    msteps[ir] = 0;
     65c:	10 82       	st	Z, r1

    if (current_val > step) {
     65e:	80 91 04 01 	lds	r24, 0x0104
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	84 17       	cp	r24, r20
     666:	95 07       	cpc	r25, r21
     668:	2c f4       	brge	.+10     	; 0x674 <_slow_fade+0x3e>
      return current_val - step;
     66a:	9a 01       	movw	r18, r20
     66c:	28 1b       	sub	r18, r24
     66e:	39 0b       	sbc	r19, r25
     670:	c9 01       	movw	r24, r18
     672:	08 95       	ret
    } else {
      return 0;
     674:	80 e0       	ldi	r24, 0x00	; 0
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	08 95       	ret
     67a:	ca 01       	movw	r24, r20
    }
  }

  return current_val;
}
     67c:	08 95       	ret

0000067e <flash_fade>:

  return 0;
}

int flash_fade(int ir, int activated, int current_val) {
  return _slow_fade(ir, activated, current_val, 10);
     67e:	2a e0       	ldi	r18, 0x0A	; 10
     680:	0c 94 1b 03 	jmp	0x636	; 0x636 <_slow_fade>

00000684 <basic_fade>:
int _rstep() {
  return _random(3, 10);
}

int basic_fade(int ir, int activated, int current_val) {
  return _slow_fade(ir, activated, current_val, 1);
     684:	21 e0       	ldi	r18, 0x01	; 1
     686:	0c 94 1b 03 	jmp	0x636	; 0x636 <_slow_fade>

0000068a <slow_fade>:
}

int slow_fade(int ir, int activated, int current_val) {
  return _slow_fade(ir, activated, current_val, 3);
     68a:	23 e0       	ldi	r18, 0x03	; 3
     68c:	0c 94 1b 03 	jmp	0x636	; 0x636 <_slow_fade>

00000690 <quick_inv>:

  return 0;
}

int quick_inv(int ir, int activated, int current_val) {
  if (activated) {
     690:	67 2b       	or	r22, r23
     692:	31 f4       	brne	.+12     	; 0x6a0 <quick_inv+0x10>
    return 0;
  }

  if (current_val < 253) {
     694:	4d 3f       	cpi	r20, 0xFD	; 253
     696:	51 05       	cpc	r21, r1
     698:	34 f4       	brge	.+12     	; 0x6a6 <quick_inv+0x16>
    return current_val + 3;
     69a:	ca 01       	movw	r24, r20
     69c:	03 96       	adiw	r24, 0x03	; 3
     69e:	08 95       	ret
  return 0;
}

int quick_inv(int ir, int activated, int current_val) {
  if (activated) {
    return 0;
     6a0:	80 e0       	ldi	r24, 0x00	; 0
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	08 95       	ret

  if (current_val < 253) {
    return current_val + 3;
  }

  return 255;
     6a6:	8f ef       	ldi	r24, 0xFF	; 255
     6a8:	90 e0       	ldi	r25, 0x00	; 0
}
     6aa:	08 95       	ret

000006ac <init_sparkle>:
  // 
  s_init();
}


void init_sparkle() {
     6ac:	ef 92       	push	r14
     6ae:	ff 92       	push	r15
     6b0:	0f 93       	push	r16
     6b2:	1f 93       	push	r17
     6b4:	cf 93       	push	r28
     6b6:	df 93       	push	r29
     6b8:	cc e6       	ldi	r28, 0x6C	; 108
     6ba:	d3 e0       	ldi	r29, 0x03	; 3
     6bc:	0c ee       	ldi	r16, 0xEC	; 236
     6be:	11 e0       	ldi	r17, 0x01	; 1

  return 0;
}

int _random(int min, int max) {
  return (rand() % (max - min + 1) + min);
     6c0:	92 e0       	ldi	r25, 0x02	; 2
     6c2:	e9 2e       	mov	r14, r25
     6c4:	f1 2c       	mov	r15, r1
     6c6:	0e 94 19 0a 	call	0x1432	; 0x1432 <rand>
     6ca:	b7 01       	movw	r22, r14
     6cc:	0e 94 b7 09 	call	0x136e	; 0x136e <__divmodhi4>


void init_sparkle() {
  int i;
  for (i=0; i < 8; i++) {
    sparkle_dir[i] = _random(0, 1) ? -1 : 1;
     6d0:	89 2b       	or	r24, r25
     6d2:	19 f0       	breq	.+6      	; 0x6da <init_sparkle+0x2e>
     6d4:	8f ef       	ldi	r24, 0xFF	; 255
     6d6:	9f ef       	ldi	r25, 0xFF	; 255
     6d8:	02 c0       	rjmp	.+4      	; 0x6de <init_sparkle+0x32>
     6da:	81 e0       	ldi	r24, 0x01	; 1
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	89 93       	st	Y+, r24
     6e0:	99 93       	st	Y+, r25
    sparkle_step[i] = _rstep();
     6e2:	0e 94 c3 02 	call	0x586	; 0x586 <_rstep>
     6e6:	f8 01       	movw	r30, r16
     6e8:	81 93       	st	Z+, r24
     6ea:	91 93       	st	Z+, r25
     6ec:	8f 01       	movw	r16, r30
}


void init_sparkle() {
  int i;
  for (i=0; i < 8; i++) {
     6ee:	f3 e0       	ldi	r31, 0x03	; 3
     6f0:	cc 37       	cpi	r28, 0x7C	; 124
     6f2:	df 07       	cpc	r29, r31
     6f4:	41 f7       	brne	.-48     	; 0x6c6 <init_sparkle+0x1a>
    sparkle_dir[i] = _random(0, 1) ? -1 : 1;
    sparkle_step[i] = _rstep();
  }
}
     6f6:	df 91       	pop	r29
     6f8:	cf 91       	pop	r28
     6fa:	1f 91       	pop	r17
     6fc:	0f 91       	pop	r16
     6fe:	ff 90       	pop	r15
     700:	ef 90       	pop	r14
     702:	08 95       	ret

00000704 <setup>:

#define	ComInputMask 62U
#define	ComOutputMask 1U

void setup() {
  CLKPR = (1 << CLKPCE);        // enable clock prescaler update
     704:	80 e8       	ldi	r24, 0x80	; 128
     706:	80 93 61 00 	sts	0x0061, r24
  CLKPR = 0;                    // set clock to maximum (= crystal)
     70a:	10 92 61 00 	sts	0x0061, r1

  __watchdog_reset();           // reset watchdog timer
     70e:	a8 95       	wdr
  MCUSR &= ~(1 << WDRF);        // clear the watchdog reset flag
     710:	84 b7       	in	r24, 0x34	; 52
     712:	87 7f       	andi	r24, 0xF7	; 247
     714:	84 bf       	out	0x34, r24	; 52
  WDTCSR |= (1<<WDCE)|(1<<WDE); // start timed sequence
     716:	80 91 60 00 	lds	r24, 0x0060
     71a:	88 61       	ori	r24, 0x18	; 24
     71c:	80 93 60 00 	sts	0x0060, r24
  WDTCSR = 0x00;                // disable watchdog timer
     720:	10 92 60 00 	sts	0x0060, r1
     724:	e4 e8       	ldi	r30, 0x84	; 132
     726:	f2 e0       	ldi	r31, 0x02	; 2

  // init PWM values
  int pwm = 0;
  int i;
  for (i=0; i< 8; i++) {
     728:	80 e0       	ldi	r24, 0x00	; 0
     72a:	90 e0       	ldi	r25, 0x00	; 0
    compare[i] = pwm;
     72c:	11 92       	st	Z+, r1
    compbuff[i] = pwm;
     72e:	dc 01       	movw	r26, r24
     730:	a4 50       	subi	r26, 0x04	; 4
     732:	be 4f       	sbci	r27, 0xFE	; 254
     734:	1c 92       	st	X, r1
  WDTCSR = 0x00;                // disable watchdog timer

  // init PWM values
  int pwm = 0;
  int i;
  for (i=0; i< 8; i++) {
     736:	01 96       	adiw	r24, 0x01	; 1
     738:	88 30       	cpi	r24, 0x08	; 8
     73a:	91 05       	cpc	r25, r1
     73c:	b9 f7       	brne	.-18     	; 0x72c <setup+0x28>
    compare[i] = pwm;
    compbuff[i] = pwm;
  }  

  DDRB  = ComOutputMask; // All B Inputs except for pin PB0, our output.
     73e:	81 e0       	ldi	r24, 0x01	; 1
     740:	84 b9       	out	0x04, r24	; 4
  PORTB = ComOutputMask | ComInputMask;		// Pull-ups on input lines, output line high to start.
     742:	9f e3       	ldi	r25, 0x3F	; 63
     744:	95 b9       	out	0x05, r25	; 5

  DDRD  = 255; // All D outputs to LEDs
     746:	9f ef       	ldi	r25, 0xFF	; 255
     748:	9a b9       	out	0x0a, r25	; 10
  PORTD = 0;
     74a:	1b b8       	out	0x0b, r1	; 11

  DDRC  = 255; // All C Outputs to IR LEDs
     74c:	97 b9       	out	0x07, r25	; 7
  PORTC = 0;
     74e:	18 b8       	out	0x08, r1	; 8

  DDRA  = 0; // All A Inputs
     750:	11 b8       	out	0x01, r1	; 1
  PORTA = 0;  
     752:	12 b8       	out	0x02, r1	; 2

  // Enable ADC, prescale at 128.
  ADCSRA = _BV(ADEN) |_BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0);
     754:	97 e8       	ldi	r25, 0x87	; 135
     756:	90 93 7a 00 	sts	0x007A, r25

  TCCR0A = 2;
     75a:	92 e0       	ldi	r25, 0x02	; 2
     75c:	94 bd       	out	0x24, r25	; 36
  OCR0A = 128;
     75e:	20 e8       	ldi	r18, 0x80	; 128
     760:	27 bd       	out	0x27, r18	; 39

  TIFR0 = (1 << TOV0);           // clear interrupt flag
     762:	85 bb       	out	0x15, r24	; 21
  TIMSK0 = (1 << OCIE0A);         // enable overflow interrupt
     764:	90 93 6e 00 	sts	0x006E, r25
  TCCR0B = (1 << CS00);         // start timer, no prescale
     768:	85 bd       	out	0x25, r24	; 37

  //TCCR0A |= _BV(WGM01);

  

  TIFR1 = (1 << TOV1);
     76a:	86 bb       	out	0x16, r24	; 22
  TIMSK1 = (1 << TOIE1);
     76c:	80 93 6f 00 	sts	0x006F, r24
  //TCCR1B |= (_BV(CS10) | _BV(CS11));
  TCCR1A = 0;
     770:	10 92 80 00 	sts	0x0080, r1
  TCCR1B = _BV(CS11);
     774:	90 93 81 00 	sts	0x0081, r25

  __enable_interrupt();         // enable interrupts
     778:	78 94       	sei

  program = eeprom_read_byte(&ProgramConfig);
     77a:	82 e0       	ldi	r24, 0x02	; 2
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	0e 94 29 0a 	call	0x1452	; 0x1452 <__eerd_byte_m164p>
  if (program >= MAX_PROGRAMS) {
     782:	80 31       	cpi	r24, 0x10	; 16
     784:	18 f4       	brcc	.+6      	; 0x78c <setup+0x88>
  TCCR1A = 0;
  TCCR1B = _BV(CS11);

  __enable_interrupt();         // enable interrupts

  program = eeprom_read_byte(&ProgramConfig);
     786:	80 93 90 01 	sts	0x0190, r24
     78a:	02 c0       	rjmp	.+4      	; 0x790 <setup+0x8c>
  if (program >= MAX_PROGRAMS) {
    program = DEFAULT_PROGRAM;
     78c:	10 92 90 01 	sts	0x0190, r1
  }

  sensitivity = eeprom_read_byte(&SensitivityConfig);
     790:	81 e0       	ldi	r24, 0x01	; 1
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	0e 94 29 0a 	call	0x1452	; 0x1452 <__eerd_byte_m164p>
  if (sensitivity >= MAX_SENSITIVITY) {
     798:	84 30       	cpi	r24, 0x04	; 4
     79a:	08 f0       	brcs	.+2      	; 0x79e <setup+0x9a>
    sensitivity = DEFAULT_SENSITIVITY;
     79c:	82 e0       	ldi	r24, 0x02	; 2
     79e:	80 93 45 01 	sts	0x0145, r24
  }

  netConfig = eeprom_read_byte(&NetworkConfig);
     7a2:	80 e0       	ldi	r24, 0x00	; 0
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	0e 94 29 0a 	call	0x1452	; 0x1452 <__eerd_byte_m164p>
  if (netConfig > 1) {
     7aa:	82 30       	cpi	r24, 0x02	; 2
     7ac:	18 f4       	brcc	.+6      	; 0x7b4 <setup+0xb0>
  sensitivity = eeprom_read_byte(&SensitivityConfig);
  if (sensitivity >= MAX_SENSITIVITY) {
    sensitivity = DEFAULT_SENSITIVITY;
  }

  netConfig = eeprom_read_byte(&NetworkConfig);
     7ae:	80 93 8f 01 	sts	0x018F, r24
     7b2:	02 c0       	rjmp	.+4      	; 0x7b8 <setup+0xb4>
  if (netConfig > 1) {
    netConfig = 0;
     7b4:	10 92 8f 01 	sts	0x018F, r1
  }

  //
  init_sparkle();
     7b8:	0e 94 56 03 	call	0x6ac	; 0x6ac <init_sparkle>
  // 
  s_init();
     7bc:	0c 94 8a 02 	jmp	0x514	; 0x514 <s_init>

000007c0 <_readIR>:
}

int16_t _readIR(uint8_t channel) {
  static int started = 0;

  if (! started) {
     7c0:	20 91 94 01 	lds	r18, 0x0194
     7c4:	30 91 95 01 	lds	r19, 0x0195
     7c8:	23 2b       	or	r18, r19
     7ca:	81 f4       	brne	.+32     	; 0x7ec <_readIR+0x2c>
    ADMUX = channel;
     7cc:	80 93 7c 00 	sts	0x007C, r24
    ADCSRA |= _BV(ADSC); // Start initial ADC cycle
     7d0:	80 91 7a 00 	lds	r24, 0x007A
     7d4:	80 64       	ori	r24, 0x40	; 64
     7d6:	80 93 7a 00 	sts	0x007A, r24

    started++;
     7da:	80 91 94 01 	lds	r24, 0x0194
     7de:	90 91 95 01 	lds	r25, 0x0195
     7e2:	01 96       	adiw	r24, 0x01	; 1
     7e4:	90 93 95 01 	sts	0x0195, r25
     7e8:	80 93 94 01 	sts	0x0194, r24
  }

  if ((ADCSRA & _BV(ADSC)) != 0) {
     7ec:	80 91 7a 00 	lds	r24, 0x007A
     7f0:	86 fd       	sbrc	r24, 6
     7f2:	0a c0       	rjmp	.+20     	; 0x808 <_readIR+0x48>
    // conversion not finished
    return -1;
  }

  int16_t ADIn;
  ADIn = ADCW;
     7f4:	20 91 78 00 	lds	r18, 0x0078
     7f8:	30 91 79 00 	lds	r19, 0x0079

  // reset state
  started = 0;
     7fc:	10 92 95 01 	sts	0x0195, r1
     800:	10 92 94 01 	sts	0x0194, r1

  return ADIn;
     804:	c9 01       	movw	r24, r18
     806:	08 95       	ret
    started++;
  }

  if ((ADCSRA & _BV(ADSC)) != 0) {
    // conversion not finished
    return -1;
     808:	8f ef       	ldi	r24, 0xFF	; 255
     80a:	9f ef       	ldi	r25, 0xFF	; 255

  // reset state
  started = 0;

  return ADIn;
}
     80c:	08 95       	ret

0000080e <readIR>:
  }
}

#define num_acd_readings 14

int16_t readIR(uint8_t channel) {
     80e:	1f 93       	push	r17
     810:	cf 93       	push	r28
     812:	df 93       	push	r29
     814:	18 2f       	mov	r17, r24
  static int started = 0;
  static int i = 0;
  static uint16_t sum = 0;

  if (! started) {
     816:	20 91 9a 01 	lds	r18, 0x019A
     81a:	30 91 9b 01 	lds	r19, 0x019B
     81e:	23 2b       	or	r18, r19
     820:	79 f5       	brne	.+94     	; 0x880 <readIR+0x72>
    PORTC = 1 << channel; // turn on IR LED
     822:	21 e0       	ldi	r18, 0x01	; 1
     824:	30 e0       	ldi	r19, 0x00	; 0
     826:	08 2e       	mov	r0, r24
     828:	01 c0       	rjmp	.+2      	; 0x82c <readIR+0x1e>
     82a:	22 0f       	add	r18, r18
     82c:	0a 94       	dec	r0
     82e:	ea f7       	brpl	.-6      	; 0x82a <readIR+0x1c>
     830:	28 b9       	out	0x08, r18	; 8

    sum = 0;
     832:	10 92 99 01 	sts	0x0199, r1
     836:	10 92 98 01 	sts	0x0198, r1
    i = 0;
     83a:	10 92 97 01 	sts	0x0197, r1
     83e:	10 92 96 01 	sts	0x0196, r1
    started++;
     842:	20 91 9a 01 	lds	r18, 0x019A
     846:	30 91 9b 01 	lds	r19, 0x019B
     84a:	2f 5f       	subi	r18, 0xFF	; 255
     84c:	3f 4f       	sbci	r19, 0xFF	; 255
     84e:	30 93 9b 01 	sts	0x019B, r19
     852:	20 93 9a 01 	sts	0x019A, r18
     856:	14 c0       	rjmp	.+40     	; 0x880 <readIR+0x72>
  }

  while (i < num_acd_readings) {
    int16_t v = _readIR(channel);
     858:	81 2f       	mov	r24, r17
     85a:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <_readIR>

    if (v < 0) {
     85e:	97 fd       	sbrc	r25, 7
     860:	22 c0       	rjmp	.+68     	; 0x8a6 <readIR+0x98>
      return -1;
    }

    sum += v;
     862:	20 91 98 01 	lds	r18, 0x0198
     866:	30 91 99 01 	lds	r19, 0x0199
     86a:	28 0f       	add	r18, r24
     86c:	39 1f       	adc	r19, r25
     86e:	30 93 99 01 	sts	0x0199, r19
     872:	20 93 98 01 	sts	0x0198, r18
    i++;
     876:	21 96       	adiw	r28, 0x01	; 1
     878:	d0 93 97 01 	sts	0x0197, r29
     87c:	c0 93 96 01 	sts	0x0196, r28
    sum = 0;
    i = 0;
    started++;
  }

  while (i < num_acd_readings) {
     880:	c0 91 96 01 	lds	r28, 0x0196
     884:	d0 91 97 01 	lds	r29, 0x0197
     888:	ce 30       	cpi	r28, 0x0E	; 14
     88a:	d1 05       	cpc	r29, r1
     88c:	2c f3       	brlt	.-54     	; 0x858 <readIR+0x4a>

    sum += v;
    i++;
  }

  PORTC = 0; // turn off IR LED
     88e:	18 b8       	out	0x08, r1	; 8
  started = 0; // reset
     890:	10 92 9b 01 	sts	0x019B, r1
     894:	10 92 9a 01 	sts	0x019A, r1

  int16_t ret = (sum >> 1);
     898:	80 91 98 01 	lds	r24, 0x0198
     89c:	90 91 99 01 	lds	r25, 0x0199
     8a0:	96 95       	lsr	r25
     8a2:	87 95       	ror	r24
  return ret;
     8a4:	02 c0       	rjmp	.+4      	; 0x8aa <readIR+0x9c>

  while (i < num_acd_readings) {
    int16_t v = _readIR(channel);

    if (v < 0) {
      return -1;
     8a6:	8f ef       	ldi	r24, 0xFF	; 255
     8a8:	9f ef       	ldi	r25, 0xFF	; 255
  PORTC = 0; // turn off IR LED
  started = 0; // reset

  int16_t ret = (sum >> 1);
  return ret;
}
     8aa:	df 91       	pop	r29
     8ac:	cf 91       	pop	r28
     8ae:	1f 91       	pop	r17
     8b0:	08 95       	ret

000008b2 <readButton>:

  return ADIn;
}

int readButton() {
  return (! bit_is_set(PINB, PINB5));
     8b2:	83 b1       	in	r24, 0x03	; 3
     8b4:	82 95       	swap	r24
     8b6:	86 95       	lsr	r24
     8b8:	87 70       	andi	r24, 0x07	; 7
     8ba:	91 e0       	ldi	r25, 0x01	; 1
     8bc:	89 27       	eor	r24, r25
}
     8be:	81 70       	andi	r24, 0x01	; 1
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	08 95       	ret

000008c4 <changeProgram>:

void changeProgram() {
  program++;
     8c4:	80 91 90 01 	lds	r24, 0x0190
     8c8:	8f 5f       	subi	r24, 0xFF	; 255
     8ca:	80 93 90 01 	sts	0x0190, r24

  if (netConfig == 0 && program >= 8) {
     8ce:	90 91 8f 01 	lds	r25, 0x018F
     8d2:	91 11       	cpse	r25, r1
     8d4:	05 c0       	rjmp	.+10     	; 0x8e0 <changeProgram+0x1c>
     8d6:	88 30       	cpi	r24, 0x08	; 8
     8d8:	38 f0       	brcs	.+14     	; 0x8e8 <changeProgram+0x24>
    program = 0;
     8da:	10 92 90 01 	sts	0x0190, r1
     8de:	08 95       	ret
  } else if (netConfig == 1 && program >= MAX_PROGRAMS) {
     8e0:	91 30       	cpi	r25, 0x01	; 1
     8e2:	11 f4       	brne	.+4      	; 0x8e8 <changeProgram+0x24>
     8e4:	80 31       	cpi	r24, 0x10	; 16
     8e6:	c8 f7       	brcc	.-14     	; 0x8da <changeProgram+0x16>
     8e8:	08 95       	ret

000008ea <netConfigOn>:
    program = 0;
  }
}


void netConfigOn(uint8_t net) {
     8ea:	cf 93       	push	r28
  if (net == 0) {
     8ec:	81 11       	cpse	r24, r1
     8ee:	13 c0       	rjmp	.+38     	; 0x916 <netConfigOn+0x2c>
    compbuff[0] = 0;
     8f0:	10 92 fc 01 	sts	0x01FC, r1
    compbuff[1] = 255;
     8f4:	8f ef       	ldi	r24, 0xFF	; 255
     8f6:	80 93 fd 01 	sts	0x01FD, r24
    compbuff[2] = 255;
     8fa:	80 93 fe 01 	sts	0x01FE, r24
    compbuff[3] = 0;
     8fe:	10 92 ff 01 	sts	0x01FF, r1
    compbuff[4] = 0;
     902:	10 92 00 02 	sts	0x0200, r1
    compbuff[5] = 255;
     906:	80 93 01 02 	sts	0x0201, r24
    compbuff[6] = 255;
     90a:	80 93 02 02 	sts	0x0202, r24
    compbuff[7] = 0;
     90e:	10 92 03 02 	sts	0x0203, r1
    compbuff[5] = 255;
    delay_ms(20);
    compbuff[4] = 255;
    delay_ms(20);
  }
}
     912:	cf 91       	pop	r28
     914:	08 95       	ret
  }
}


void netConfigOn(uint8_t net) {
  if (net == 0) {
     916:	80 e0       	ldi	r24, 0x00	; 0
     918:	90 e0       	ldi	r25, 0x00	; 0
    compbuff[6] = 255;
    compbuff[7] = 0;
  } else {
    int i;
    for (i=0; i< 8; i++) {
      compbuff[i] = 0;
     91a:	fc 01       	movw	r30, r24
     91c:	e4 50       	subi	r30, 0x04	; 4
     91e:	fe 4f       	sbci	r31, 0xFE	; 254
     920:	10 82       	st	Z, r1
    compbuff[5] = 255;
    compbuff[6] = 255;
    compbuff[7] = 0;
  } else {
    int i;
    for (i=0; i< 8; i++) {
     922:	01 96       	adiw	r24, 0x01	; 1
     924:	88 30       	cpi	r24, 0x08	; 8
     926:	91 05       	cpc	r25, r1
     928:	c1 f7       	brne	.-16     	; 0x91a <netConfigOn+0x30>
      compbuff[i] = 0;
    }
    compbuff[0] = 255;
     92a:	cf ef       	ldi	r28, 0xFF	; 255
     92c:	c0 93 fc 01 	sts	0x01FC, r28
    delay_ms(20);
     930:	84 e1       	ldi	r24, 0x14	; 20
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	0e 94 0e 01 	call	0x21c	; 0x21c <delay_ms>
    compbuff[1] = 255;
     938:	c0 93 fd 01 	sts	0x01FD, r28
    delay_ms(20);
     93c:	84 e1       	ldi	r24, 0x14	; 20
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	0e 94 0e 01 	call	0x21c	; 0x21c <delay_ms>
    compbuff[2] = 255;
     944:	c0 93 fe 01 	sts	0x01FE, r28
    delay_ms(20);
     948:	84 e1       	ldi	r24, 0x14	; 20
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	0e 94 0e 01 	call	0x21c	; 0x21c <delay_ms>
    compbuff[3] = 255;
     950:	c0 93 ff 01 	sts	0x01FF, r28
    delay_ms(20);
     954:	84 e1       	ldi	r24, 0x14	; 20
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	0e 94 0e 01 	call	0x21c	; 0x21c <delay_ms>
    compbuff[7] = 255;
     95c:	c0 93 03 02 	sts	0x0203, r28
    delay_ms(20);
     960:	84 e1       	ldi	r24, 0x14	; 20
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	0e 94 0e 01 	call	0x21c	; 0x21c <delay_ms>
    compbuff[6] = 255;
     968:	c0 93 02 02 	sts	0x0202, r28
    delay_ms(20);
     96c:	84 e1       	ldi	r24, 0x14	; 20
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	0e 94 0e 01 	call	0x21c	; 0x21c <delay_ms>
    compbuff[5] = 255;
     974:	c0 93 01 02 	sts	0x0201, r28
    delay_ms(20);
     978:	84 e1       	ldi	r24, 0x14	; 20
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	0e 94 0e 01 	call	0x21c	; 0x21c <delay_ms>
    compbuff[4] = 255;
     980:	c0 93 00 02 	sts	0x0200, r28
    delay_ms(20);
     984:	84 e1       	ldi	r24, 0x14	; 20
     986:	90 e0       	ldi	r25, 0x00	; 0
  }
}
     988:	cf 91       	pop	r28
    compbuff[6] = 255;
    delay_ms(20);
    compbuff[5] = 255;
    delay_ms(20);
    compbuff[4] = 255;
    delay_ms(20);
     98a:	0c 94 0e 01 	jmp	0x21c	; 0x21c <delay_ms>

0000098e <programOn>:
void programOn(uint8_t prog) {
  static uint8_t state = 0;
  static uint8_t counter = 0;

  int i;
  for (i=0; i< 8; i++) {
     98e:	20 e0       	ldi	r18, 0x00	; 0
     990:	30 e0       	ldi	r19, 0x00	; 0
    compbuff[i] = 0;
     992:	d9 01       	movw	r26, r18
     994:	a4 50       	subi	r26, 0x04	; 4
     996:	be 4f       	sbci	r27, 0xFE	; 254
     998:	1c 92       	st	X, r1
void programOn(uint8_t prog) {
  static uint8_t state = 0;
  static uint8_t counter = 0;

  int i;
  for (i=0; i< 8; i++) {
     99a:	2f 5f       	subi	r18, 0xFF	; 255
     99c:	3f 4f       	sbci	r19, 0xFF	; 255
     99e:	28 30       	cpi	r18, 0x08	; 8
     9a0:	31 05       	cpc	r19, r1
     9a2:	b9 f7       	brne	.-18     	; 0x992 <programOn+0x4>
    compbuff[i] = 0;
  }

  if (prog < 8) {
     9a4:	88 30       	cpi	r24, 0x08	; 8
     9a6:	28 f4       	brcc	.+10     	; 0x9b2 <programOn+0x24>
    compbuff[prog] = 255;
     9a8:	e8 2f       	mov	r30, r24
     9aa:	f0 e0       	ldi	r31, 0x00	; 0
     9ac:	e4 50       	subi	r30, 0x04	; 4
     9ae:	fe 4f       	sbci	r31, 0xFE	; 254
     9b0:	19 c0       	rjmp	.+50     	; 0x9e4 <programOn+0x56>
    return;
  }

  if (counter++ > 50) {
     9b2:	90 91 93 01 	lds	r25, 0x0193
     9b6:	21 e0       	ldi	r18, 0x01	; 1
     9b8:	29 0f       	add	r18, r25
     9ba:	20 93 93 01 	sts	0x0193, r18
     9be:	93 33       	cpi	r25, 0x33	; 51
     9c0:	40 f0       	brcs	.+16     	; 0x9d2 <programOn+0x44>
    state = 1 - state;
     9c2:	91 e0       	ldi	r25, 0x01	; 1
     9c4:	20 91 92 01 	lds	r18, 0x0192
     9c8:	92 1b       	sub	r25, r18
     9ca:	90 93 92 01 	sts	0x0192, r25
    counter = 0;
     9ce:	10 92 93 01 	sts	0x0193, r1
  }

  uint8_t _prog = prog - 8;
     9d2:	88 50       	subi	r24, 0x08	; 8

  if (state) {
     9d4:	20 91 92 01 	lds	r18, 0x0192
     9d8:	90 e0       	ldi	r25, 0x00	; 0
    compbuff[_prog] = 255;
     9da:	fc 01       	movw	r30, r24
     9dc:	e4 50       	subi	r30, 0x04	; 4
     9de:	fe 4f       	sbci	r31, 0xFE	; 254
    counter = 0;
  }

  uint8_t _prog = prog - 8;

  if (state) {
     9e0:	22 23       	and	r18, r18
     9e2:	19 f0       	breq	.+6      	; 0x9ea <programOn+0x5c>
    compbuff[_prog] = 255;
     9e4:	8f ef       	ldi	r24, 0xFF	; 255
     9e6:	80 83       	st	Z, r24
     9e8:	08 95       	ret
  } else {
    compbuff[_prog] = 0;
     9ea:	10 82       	st	Z, r1
     9ec:	08 95       	ret

000009ee <changeSensitivity>:
  }
}


void changeSensitivity() {
  sensitivity++;
     9ee:	80 91 45 01 	lds	r24, 0x0145
     9f2:	8f 5f       	subi	r24, 0xFF	; 255
  if (sensitivity >= MAX_SENSITIVITY) {
     9f4:	84 30       	cpi	r24, 0x04	; 4
     9f6:	18 f4       	brcc	.+6      	; 0x9fe <changeSensitivity+0x10>
  }
}


void changeSensitivity() {
  sensitivity++;
     9f8:	80 93 45 01 	sts	0x0145, r24
     9fc:	08 95       	ret
  if (sensitivity >= MAX_SENSITIVITY) {
    sensitivity = 0;
     9fe:	10 92 45 01 	sts	0x0145, r1
     a02:	08 95       	ret

00000a04 <sensitivityOn>:
  }
}

void sensitivityOn(uint8_t sensitivity) {
     a04:	44 e0       	ldi	r20, 0x04	; 4
     a06:	50 e0       	ldi	r21, 0x00	; 0
  int j;
  for (j=0; j< 4; j++) {
     a08:	20 e0       	ldi	r18, 0x00	; 0
     a0a:	30 e0       	ldi	r19, 0x00	; 0
    if (j <= sensitivity) {
     a0c:	90 e0       	ldi	r25, 0x00	; 0
      compbuff[j] = 255;
     a0e:	6f ef       	ldi	r22, 0xFF	; 255
     a10:	d9 01       	movw	r26, r18
     a12:	a4 50       	subi	r26, 0x04	; 4
     a14:	be 4f       	sbci	r27, 0xFE	; 254
     a16:	fa 01       	movw	r30, r20
     a18:	e4 50       	subi	r30, 0x04	; 4
     a1a:	fe 4f       	sbci	r31, 0xFE	; 254
}

void sensitivityOn(uint8_t sensitivity) {
  int j;
  for (j=0; j< 4; j++) {
    if (j <= sensitivity) {
     a1c:	82 17       	cp	r24, r18
     a1e:	93 07       	cpc	r25, r19
     a20:	1c f0       	brlt	.+6      	; 0xa28 <sensitivityOn+0x24>
      compbuff[j] = 255;
     a22:	6c 93       	st	X, r22
      compbuff[j + 4] = 255;
     a24:	60 83       	st	Z, r22
     a26:	02 c0       	rjmp	.+4      	; 0xa2c <sensitivityOn+0x28>
    } else {
      compbuff[j] = 0;
     a28:	1c 92       	st	X, r1
      compbuff[j + 4] = 0;
     a2a:	10 82       	st	Z, r1
  }
}

void sensitivityOn(uint8_t sensitivity) {
  int j;
  for (j=0; j< 4; j++) {
     a2c:	2f 5f       	subi	r18, 0xFF	; 255
     a2e:	3f 4f       	sbci	r19, 0xFF	; 255
     a30:	4f 5f       	subi	r20, 0xFF	; 255
     a32:	5f 4f       	sbci	r21, 0xFF	; 255
     a34:	24 30       	cpi	r18, 0x04	; 4
     a36:	31 05       	cpc	r19, r1
     a38:	59 f7       	brne	.-42     	; 0xa10 <sensitivityOn+0xc>
    } else {
      compbuff[j] = 0;
      compbuff[j + 4] = 0;
    }
  }
}
     a3a:	08 95       	ret

00000a3c <start_transfer>:
uint16_t transfer_buffer = 0;
uint16_t transfer_duration = 0;
long transfer_last = 0;

void start_transfer(uint8_t val, long clock) {
  if (transfer_state == t_idle) {
     a3c:	90 91 5c 01 	lds	r25, 0x015C
     a40:	91 11       	cpse	r25, r1
     a42:	13 c0       	rjmp	.+38     	; 0xa6a <start_transfer+0x2e>
    transfer_buffer = 10 * val;
     a44:	2a e0       	ldi	r18, 0x0A	; 10
     a46:	82 9f       	mul	r24, r18
     a48:	c0 01       	movw	r24, r0
     a4a:	11 24       	eor	r1, r1
     a4c:	90 93 5b 01 	sts	0x015B, r25
     a50:	80 93 5a 01 	sts	0x015A, r24
    transfer_last = clock;
     a54:	40 93 54 01 	sts	0x0154, r20
     a58:	50 93 55 01 	sts	0x0155, r21
     a5c:	60 93 56 01 	sts	0x0156, r22
     a60:	70 93 57 01 	sts	0x0157, r23
    transfer_state = t_send;
     a64:	81 e0       	ldi	r24, 0x01	; 1
     a66:	80 93 5c 01 	sts	0x015C, r24
     a6a:	08 95       	ret

00000a6c <in_network>:

  return ret;
}

uint8_t in_network() {
  return program > 7;
     a6c:	81 e0       	ldi	r24, 0x01	; 1
     a6e:	90 91 90 01 	lds	r25, 0x0190
     a72:	98 30       	cpi	r25, 0x08	; 8
     a74:	08 f4       	brcc	.+2      	; 0xa78 <in_network+0xc>
     a76:	80 e0       	ldi	r24, 0x00	; 0
}
     a78:	08 95       	ret

00000a7a <receive_from>:
  continue_transfer(clock);
  do_receive(clock);  
}

int receive_from(uint8_t dir) {
  if ((dir == 0 || dir == 1) && bit_is_clear(PINB, PB1)) {
     a7a:	82 30       	cpi	r24, 0x02	; 2
     a7c:	28 f4       	brcc	.+10     	; 0xa88 <receive_from+0xe>
     a7e:	19 9b       	sbis	0x03, 1	; 3
     a80:	19 c0       	rjmp	.+50     	; 0xab4 <receive_from+0x3a>
    return 1;
  }

  if ((dir == 0 || dir == 2) && bit_is_clear(PINB, PB2)) {
     a82:	88 23       	and	r24, r24
     a84:	19 f0       	breq	.+6      	; 0xa8c <receive_from+0x12>
     a86:	06 c0       	rjmp	.+12     	; 0xa94 <receive_from+0x1a>
     a88:	82 30       	cpi	r24, 0x02	; 2
     a8a:	21 f4       	brne	.+8      	; 0xa94 <receive_from+0x1a>
     a8c:	1a 9b       	sbis	0x03, 2	; 3
     a8e:	15 c0       	rjmp	.+42     	; 0xaba <receive_from+0x40>
    return 2;
  }

  if ((dir == 0 || dir == 3) && bit_is_clear(PINB, PB3)) {
     a90:	88 23       	and	r24, r24
     a92:	11 f0       	breq	.+4      	; 0xa98 <receive_from+0x1e>
     a94:	83 30       	cpi	r24, 0x03	; 3
     a96:	21 f4       	brne	.+8      	; 0xaa0 <receive_from+0x26>
     a98:	1b 9b       	sbis	0x03, 3	; 3
     a9a:	12 c0       	rjmp	.+36     	; 0xac0 <receive_from+0x46>
    return 3;
  }

  if ((dir == 0 || dir == 4) && bit_is_clear(PINB, PB4)) {
     a9c:	88 23       	and	r24, r24
     a9e:	11 f0       	breq	.+4      	; 0xaa4 <receive_from+0x2a>
     aa0:	84 30       	cpi	r24, 0x04	; 4
     aa2:	29 f4       	brne	.+10     	; 0xaae <receive_from+0x34>
     aa4:	1c 99       	sbic	0x03, 4	; 3
     aa6:	03 c0       	rjmp	.+6      	; 0xaae <receive_from+0x34>
    return 4;
     aa8:	84 e0       	ldi	r24, 0x04	; 4
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	08 95       	ret
  }

  return 0;
     aae:	80 e0       	ldi	r24, 0x00	; 0
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	08 95       	ret
  do_receive(clock);  
}

int receive_from(uint8_t dir) {
  if ((dir == 0 || dir == 1) && bit_is_clear(PINB, PB1)) {
    return 1;
     ab4:	81 e0       	ldi	r24, 0x01	; 1
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	08 95       	ret
  }

  if ((dir == 0 || dir == 2) && bit_is_clear(PINB, PB2)) {
    return 2;
     aba:	82 e0       	ldi	r24, 0x02	; 2
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	08 95       	ret
  }

  if ((dir == 0 || dir == 3) && bit_is_clear(PINB, PB3)) {
    return 3;
     ac0:	83 e0       	ldi	r24, 0x03	; 3
     ac2:	90 e0       	ldi	r25, 0x00	; 0
  if ((dir == 0 || dir == 4) && bit_is_clear(PINB, PB4)) {
    return 4;
  }

  return 0;
}
     ac4:	08 95       	ret

00000ac6 <receive>:
long receive_last = 0;


// transmission receive_val = { -1, -1 };

transmission receive(long clock) {
     ac6:	cf 92       	push	r12
     ac8:	df 92       	push	r13
     aca:	ef 92       	push	r14
     acc:	ff 92       	push	r15
  transmission ret = {0, 0};

  if (transfer_state == t_send) {
     ace:	20 91 5c 01 	lds	r18, 0x015C
     ad2:	21 30       	cpi	r18, 0x01	; 1
     ad4:	f1 f1       	breq	.+124    	; 0xb52 <receive+0x8c>
    return ret;
  }

  if (clock - transfer_last < 100) {
     ad6:	c0 90 54 01 	lds	r12, 0x0154
     ada:	d0 90 55 01 	lds	r13, 0x0155
     ade:	e0 90 56 01 	lds	r14, 0x0156
     ae2:	f0 90 57 01 	lds	r15, 0x0157
     ae6:	dc 01       	movw	r26, r24
     ae8:	cb 01       	movw	r24, r22
     aea:	8c 19       	sub	r24, r12
     aec:	9d 09       	sbc	r25, r13
     aee:	ae 09       	sbc	r26, r14
     af0:	bf 09       	sbc	r27, r15
     af2:	84 36       	cpi	r24, 0x64	; 100
     af4:	91 05       	cpc	r25, r1
     af6:	a1 05       	cpc	r26, r1
     af8:	b1 05       	cpc	r27, r1
     afa:	5c f1       	brlt	.+86     	; 0xb52 <receive+0x8c>
    return ret;
  }

  // in receive
  if (transfer_state == t_recv) {
     afc:	22 30       	cpi	r18, 0x02	; 2
     afe:	d1 f4       	brne	.+52     	; 0xb34 <receive+0x6e>
    int val = receive_from(receive_dir);
     b00:	80 91 52 01 	lds	r24, 0x0152
     b04:	0e 94 3d 05 	call	0xa7a	; 0xa7a <receive_from>
     b08:	20 91 53 01 	lds	r18, 0x0153

    // transfer ended
    if (val == 0) {
     b0c:	89 2b       	or	r24, r25
     b0e:	71 f4       	brne	.+28     	; 0xb2c <receive+0x66>
      ret.val = receive_buffer / 9;
     b10:	89 e3       	ldi	r24, 0x39	; 57
     b12:	28 9f       	mul	r18, r24
     b14:	81 2d       	mov	r24, r1
     b16:	11 24       	eor	r1, r1
      ret.dir = receive_dir;
     b18:	90 91 52 01 	lds	r25, 0x0152

      receive_dir = 0;
     b1c:	10 92 52 01 	sts	0x0152, r1
      receive_buffer = 0;
     b20:	10 92 53 01 	sts	0x0153, r1
      transfer_state = t_idle;
     b24:	10 92 5c 01 	sts	0x015C, r1
      return ret;
     b28:	86 95       	lsr	r24
     b2a:	15 c0       	rjmp	.+42     	; 0xb56 <receive+0x90>
    }

    // ongoing
    receive_buffer++;
     b2c:	2f 5f       	subi	r18, 0xFF	; 255
     b2e:	20 93 53 01 	sts	0x0153, r18
     b32:	0f c0       	rjmp	.+30     	; 0xb52 <receive+0x8c>
    return ret;
  }

  // idle, check for receive...
  receive_dir = receive_from(0);
     b34:	80 e0       	ldi	r24, 0x00	; 0
     b36:	0e 94 3d 05 	call	0xa7a	; 0xa7a <receive_from>
     b3a:	80 93 52 01 	sts	0x0152, r24
  if (receive_dir > 0) {
     b3e:	88 23       	and	r24, r24
     b40:	41 f0       	breq	.+16     	; 0xb52 <receive+0x8c>
    transfer_state = t_recv;
     b42:	82 e0       	ldi	r24, 0x02	; 2
     b44:	80 93 5c 01 	sts	0x015C, r24
    receive_buffer++;
     b48:	80 91 53 01 	lds	r24, 0x0153
     b4c:	8f 5f       	subi	r24, 0xFF	; 255
     b4e:	80 93 53 01 	sts	0x0153, r24
  }

  return ret;
     b52:	80 e0       	ldi	r24, 0x00	; 0
     b54:	90 e0       	ldi	r25, 0x00	; 0
}
     b56:	ff 90       	pop	r15
     b58:	ef 90       	pop	r14
     b5a:	df 90       	pop	r13
     b5c:	cf 90       	pop	r12
     b5e:	08 95       	ret

00000b60 <is_idle>:
  }
}

uint8_t is_idle() {
  int i;
  for (i=0; i< 8; i++) {
     b60:	80 e0       	ldi	r24, 0x00	; 0
     b62:	90 e0       	ldi	r25, 0x00	; 0
    if (compbuff[i] > 0) {
     b64:	fc 01       	movw	r30, r24
     b66:	e4 50       	subi	r30, 0x04	; 4
     b68:	fe 4f       	sbci	r31, 0xFE	; 254
     b6a:	20 81       	ld	r18, Z
     b6c:	21 11       	cpse	r18, r1
     b6e:	06 c0       	rjmp	.+12     	; 0xb7c <is_idle+0x1c>
  }
}

uint8_t is_idle() {
  int i;
  for (i=0; i< 8; i++) {
     b70:	01 96       	adiw	r24, 0x01	; 1
     b72:	88 30       	cpi	r24, 0x08	; 8
     b74:	91 05       	cpc	r25, r1
     b76:	b1 f7       	brne	.-20     	; 0xb64 <is_idle+0x4>
    if (compbuff[i] > 0) {
      return 0;
    }
  }
  return 1;
     b78:	81 e0       	ldi	r24, 0x01	; 1
}
     b7a:	08 95       	ret

uint8_t is_idle() {
  int i;
  for (i=0; i< 8; i++) {
    if (compbuff[i] > 0) {
      return 0;
     b7c:	80 e0       	ldi	r24, 0x00	; 0
     b7e:	08 95       	ret

00000b80 <net_dispatch>:
  }
  return 1;
}

int net_dispatch(int val) {
  int _program = program - 8;
     b80:	20 91 90 01 	lds	r18, 0x0190
     b84:	30 e0       	ldi	r19, 0x00	; 0
     b86:	28 50       	subi	r18, 0x08	; 8
     b88:	31 09       	sbc	r19, r1

  if (_program >= 0 && _program < 8) {
     b8a:	28 30       	cpi	r18, 0x08	; 8
     b8c:	31 05       	cpc	r19, r1
     b8e:	48 f4       	brcc	.+18     	; 0xba2 <net_dispatch+0x22>
    return netHandlers[_program](val);
     b90:	f9 01       	movw	r30, r18
     b92:	ee 0f       	add	r30, r30
     b94:	ff 1f       	adc	r31, r31
     b96:	eb 5e       	subi	r30, 0xEB	; 235
     b98:	fe 4f       	sbci	r31, 0xFE	; 254
     b9a:	01 90       	ld	r0, Z+
     b9c:	f0 81       	ld	r31, Z
     b9e:	e0 2d       	mov	r30, r0
     ba0:	09 94       	ijmp
  }
  
  return 0;
}
     ba2:	80 e0       	ldi	r24, 0x00	; 0
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	08 95       	ret

00000ba8 <broadcast>:
int net_decrement(int val) {
  return val - 2;
}

void broadcast(int val) {
  if (val) {
     ba8:	89 2b       	or	r24, r25
     baa:	11 f0       	breq	.+4      	; 0xbb0 <broadcast+0x8>
    PORTB &= ~(1);
     bac:	28 98       	cbi	0x05, 0	; 5
     bae:	08 95       	ret
  } else {
    PORTB |= 1;
     bb0:	28 9a       	sbi	0x05, 0	; 5
     bb2:	08 95       	ret

00000bb4 <continue_transfer>:
    transfer_state = t_send;
  }
}

void continue_transfer(long clock) {
  if (transfer_state == t_send) {
     bb4:	20 91 5c 01 	lds	r18, 0x015C
     bb8:	21 30       	cpi	r18, 0x01	; 1
     bba:	f9 f4       	brne	.+62     	; 0xbfa <continue_transfer+0x46>
    transfer_last = clock;
     bbc:	60 93 54 01 	sts	0x0154, r22
     bc0:	70 93 55 01 	sts	0x0155, r23
     bc4:	80 93 56 01 	sts	0x0156, r24
     bc8:	90 93 57 01 	sts	0x0157, r25

    if (transfer_buffer > 0) {
     bcc:	80 91 5a 01 	lds	r24, 0x015A
     bd0:	90 91 5b 01 	lds	r25, 0x015B
     bd4:	89 2b       	or	r24, r25
     bd6:	59 f0       	breq	.+22     	; 0xbee <continue_transfer+0x3a>
  return val - 2;
}

void broadcast(int val) {
  if (val) {
    PORTB &= ~(1);
     bd8:	28 98       	cbi	0x05, 0	; 5
  if (transfer_state == t_send) {
    transfer_last = clock;

    if (transfer_buffer > 0) {
      broadcast(1);
      transfer_buffer--;
     bda:	80 91 5a 01 	lds	r24, 0x015A
     bde:	90 91 5b 01 	lds	r25, 0x015B
     be2:	01 97       	sbiw	r24, 0x01	; 1
     be4:	90 93 5b 01 	sts	0x015B, r25
     be8:	80 93 5a 01 	sts	0x015A, r24
     bec:	08 95       	ret
    } else {
      transfer_state = t_idle;
     bee:	10 92 5c 01 	sts	0x015C, r1
      broadcast(0);
     bf2:	80 e0       	ldi	r24, 0x00	; 0
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	0c 94 d4 05 	jmp	0xba8	; 0xba8 <broadcast>
     bfa:	08 95       	ret

00000bfc <setFromDir>:
    PORTB |= 1;
  }
}


void setFromDir(uint8_t dir, uint8_t val) {
     bfc:	cf 93       	push	r28
     bfe:	df 93       	push	r29
  if ((dir == 4) || (dir == 1)) {
     c00:	84 30       	cpi	r24, 0x04	; 4
     c02:	11 f0       	breq	.+4      	; 0xc08 <setFromDir+0xc>
     c04:	81 30       	cpi	r24, 0x01	; 1
     c06:	41 f5       	brne	.+80     	; 0xc58 <setFromDir+0x5c>
    dispatch(program, 0, 1, val);
     c08:	c6 2f       	mov	r28, r22
     c0a:	d0 e0       	ldi	r29, 0x00	; 0
     c0c:	80 91 90 01 	lds	r24, 0x0190
     c10:	9e 01       	movw	r18, r28
     c12:	41 e0       	ldi	r20, 0x01	; 1
     c14:	50 e0       	ldi	r21, 0x00	; 0
     c16:	60 e0       	ldi	r22, 0x00	; 0
     c18:	70 e0       	ldi	r23, 0x00	; 0
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	0e 94 33 01 	call	0x266	; 0x266 <dispatch>
    dispatch(program, 1, 1, val);
     c20:	80 91 90 01 	lds	r24, 0x0190
     c24:	9e 01       	movw	r18, r28
     c26:	41 e0       	ldi	r20, 0x01	; 1
     c28:	50 e0       	ldi	r21, 0x00	; 0
     c2a:	61 e0       	ldi	r22, 0x01	; 1
     c2c:	70 e0       	ldi	r23, 0x00	; 0
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	0e 94 33 01 	call	0x266	; 0x266 <dispatch>
    dispatch(program, 4, 1, val);
     c34:	80 91 90 01 	lds	r24, 0x0190
     c38:	9e 01       	movw	r18, r28
     c3a:	41 e0       	ldi	r20, 0x01	; 1
     c3c:	50 e0       	ldi	r21, 0x00	; 0
     c3e:	64 e0       	ldi	r22, 0x04	; 4
     c40:	70 e0       	ldi	r23, 0x00	; 0
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	0e 94 33 01 	call	0x266	; 0x266 <dispatch>
    dispatch(program, 5, 1, val);
     c48:	80 91 90 01 	lds	r24, 0x0190
     c4c:	9e 01       	movw	r18, r28
     c4e:	41 e0       	ldi	r20, 0x01	; 1
     c50:	50 e0       	ldi	r21, 0x00	; 0
     c52:	65 e0       	ldi	r22, 0x05	; 5
     c54:	70 e0       	ldi	r23, 0x00	; 0
     c56:	2a c0       	rjmp	.+84     	; 0xcac <setFromDir+0xb0>
  } else if ((dir == 2) || (dir == 3)) {
     c58:	82 50       	subi	r24, 0x02	; 2
     c5a:	82 30       	cpi	r24, 0x02	; 2
     c5c:	60 f5       	brcc	.+88     	; 0xcb6 <setFromDir+0xba>
    dispatch(program, 2, 1, val);
     c5e:	c6 2f       	mov	r28, r22
     c60:	d0 e0       	ldi	r29, 0x00	; 0
     c62:	80 91 90 01 	lds	r24, 0x0190
     c66:	9e 01       	movw	r18, r28
     c68:	41 e0       	ldi	r20, 0x01	; 1
     c6a:	50 e0       	ldi	r21, 0x00	; 0
     c6c:	62 e0       	ldi	r22, 0x02	; 2
     c6e:	70 e0       	ldi	r23, 0x00	; 0
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	0e 94 33 01 	call	0x266	; 0x266 <dispatch>
    dispatch(program, 3, 1, val);
     c76:	80 91 90 01 	lds	r24, 0x0190
     c7a:	9e 01       	movw	r18, r28
     c7c:	41 e0       	ldi	r20, 0x01	; 1
     c7e:	50 e0       	ldi	r21, 0x00	; 0
     c80:	63 e0       	ldi	r22, 0x03	; 3
     c82:	70 e0       	ldi	r23, 0x00	; 0
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	0e 94 33 01 	call	0x266	; 0x266 <dispatch>
    dispatch(program, 6, 1, val);
     c8a:	80 91 90 01 	lds	r24, 0x0190
     c8e:	9e 01       	movw	r18, r28
     c90:	41 e0       	ldi	r20, 0x01	; 1
     c92:	50 e0       	ldi	r21, 0x00	; 0
     c94:	66 e0       	ldi	r22, 0x06	; 6
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	0e 94 33 01 	call	0x266	; 0x266 <dispatch>
    dispatch(program, 7, 1, val);
     c9e:	80 91 90 01 	lds	r24, 0x0190
     ca2:	9e 01       	movw	r18, r28
     ca4:	41 e0       	ldi	r20, 0x01	; 1
     ca6:	50 e0       	ldi	r21, 0x00	; 0
     ca8:	67 e0       	ldi	r22, 0x07	; 7
     caa:	70 e0       	ldi	r23, 0x00	; 0
     cac:	90 e0       	ldi	r25, 0x00	; 0
  }
}
     cae:	df 91       	pop	r29
     cb0:	cf 91       	pop	r28
    dispatch(program, 5, 1, val);
  } else if ((dir == 2) || (dir == 3)) {
    dispatch(program, 2, 1, val);
    dispatch(program, 3, 1, val);
    dispatch(program, 6, 1, val);
    dispatch(program, 7, 1, val);
     cb2:	0c 94 33 01 	jmp	0x266	; 0x266 <dispatch>
  }
}
     cb6:	df 91       	pop	r29
     cb8:	cf 91       	pop	r28
     cba:	08 95       	ret

00000cbc <setAll>:

void setAll(uint8_t val) {
     cbc:	0f 93       	push	r16
     cbe:	1f 93       	push	r17
     cc0:	cf 93       	push	r28
     cc2:	df 93       	push	r29
  int i;
  for (i=0; i< 8; i++) {
     cc4:	c0 e0       	ldi	r28, 0x00	; 0
     cc6:	d0 e0       	ldi	r29, 0x00	; 0
    compbuff[i] = dispatch(program, i, 1, val);
     cc8:	08 2f       	mov	r16, r24
     cca:	10 e0       	ldi	r17, 0x00	; 0
     ccc:	80 91 90 01 	lds	r24, 0x0190
     cd0:	98 01       	movw	r18, r16
     cd2:	41 e0       	ldi	r20, 0x01	; 1
     cd4:	50 e0       	ldi	r21, 0x00	; 0
     cd6:	be 01       	movw	r22, r28
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	0e 94 33 01 	call	0x266	; 0x266 <dispatch>
     cde:	fe 01       	movw	r30, r28
     ce0:	e4 50       	subi	r30, 0x04	; 4
     ce2:	fe 4f       	sbci	r31, 0xFE	; 254
     ce4:	80 83       	st	Z, r24
  }
}

void setAll(uint8_t val) {
  int i;
  for (i=0; i< 8; i++) {
     ce6:	21 96       	adiw	r28, 0x01	; 1
     ce8:	c8 30       	cpi	r28, 0x08	; 8
     cea:	d1 05       	cpc	r29, r1
     cec:	79 f7       	brne	.-34     	; 0xccc <setAll+0x10>
    compbuff[i] = dispatch(program, i, 1, val);
  }
}
     cee:	df 91       	pop	r29
     cf0:	cf 91       	pop	r28
     cf2:	1f 91       	pop	r17
     cf4:	0f 91       	pop	r16
     cf6:	08 95       	ret

00000cf8 <do_send>:

  return ret;
}

uint8_t in_network() {
  return program > 7;
     cf8:	e0 91 90 01 	lds	r30, 0x0190
}

void do_send(int act, long clock) {
  if (! in_network()) {
     cfc:	e8 30       	cpi	r30, 0x08	; 8
     cfe:	68 f0       	brcs	.+26     	; 0xd1a <do_send+0x22>
    return;
  }

  uint8_t val = netDistance[program - 8];
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	eb 5f       	subi	r30, 0xFB	; 251
     d04:	fe 4f       	sbci	r31, 0xFE	; 254
     d06:	20 81       	ld	r18, Z

  if (act > 0) {
     d08:	18 16       	cp	r1, r24
     d0a:	19 06       	cpc	r1, r25
     d0c:	34 f4       	brge	.+12     	; 0xd1a <do_send+0x22>
    start_transfer(val, clock);
     d0e:	82 2f       	mov	r24, r18
     d10:	0e 94 1e 05 	call	0xa3c	; 0xa3c <start_transfer>
    setAll(255);
     d14:	8f ef       	ldi	r24, 0xFF	; 255
     d16:	0c 94 5e 06 	jmp	0xcbc	; 0xcbc <setAll>
     d1a:	08 95       	ret

00000d1c <do_receive>:
  }

  return 0;
}

void do_receive(unsigned long clock) {
     d1c:	bf 92       	push	r11
     d1e:	cf 92       	push	r12
     d20:	df 92       	push	r13
     d22:	ef 92       	push	r14
     d24:	ff 92       	push	r15
     d26:	0f 93       	push	r16
     d28:	1f 93       	push	r17
     d2a:	cf 93       	push	r28
     d2c:	df 93       	push	r29
     d2e:	6b 01       	movw	r12, r22
     d30:	7c 01       	movw	r14, r24
  transmission trans = receive(clock);
     d32:	0e 94 63 05 	call	0xac6	; 0xac6 <receive>
     d36:	b9 2e       	mov	r11, r25
  int val = trans.val;
     d38:	c8 2f       	mov	r28, r24
     d3a:	d0 e0       	ldi	r29, 0x00	; 0
  if (val <= 0) {
     d3c:	20 97       	sbiw	r28, 0x00	; 0
     d3e:	09 f4       	brne	.+2      	; 0xd42 <do_receive+0x26>
     d40:	3f c0       	rjmp	.+126    	; 0xdc0 <do_receive+0xa4>
    return;
  }

  if (! is_idle()) {
     d42:	0e 94 b0 05 	call	0xb60	; 0xb60 <is_idle>
     d46:	88 23       	and	r24, r24
     d48:	d9 f1       	breq	.+118    	; 0xdc0 <do_receive+0xa4>
     d4a:	c9 30       	cpi	r28, 0x09	; 9
     d4c:	d1 05       	cpc	r29, r1
     d4e:	14 f0       	brlt	.+4      	; 0xd54 <do_receive+0x38>
     d50:	c8 e0       	ldi	r28, 0x08	; 8
     d52:	d0 e0       	ldi	r29, 0x00	; 0

  if (val > 8) {
    val = 8;
  }

  int next = net_dispatch(val);
     d54:	ce 01       	movw	r24, r28
     d56:	0e 94 c0 05 	call	0xb80	; 0xb80 <net_dispatch>
     d5a:	8c 01       	movw	r16, r24
  
  if (next > 0) {
     d5c:	18 16       	cp	r1, r24
     d5e:	19 06       	cpc	r1, r25
     d60:	24 f4       	brge	.+8      	; 0xd6a <do_receive+0x4e>
    start_transfer(next, clock);
     d62:	b7 01       	movw	r22, r14
     d64:	a6 01       	movw	r20, r12
     d66:	0e 94 1e 05 	call	0xa3c	; 0xa3c <start_transfer>
  }

  int level = 255;
  if (dynamicLevel[program - 8]) {
     d6a:	e0 91 90 01 	lds	r30, 0x0190
     d6e:	f0 e0       	ldi	r31, 0x00	; 0
     d70:	e3 50       	subi	r30, 0x03	; 3
     d72:	ff 4f       	sbci	r31, 0xFF	; 255
     d74:	80 81       	ld	r24, Z
     d76:	88 23       	and	r24, r24
     d78:	39 f0       	breq	.+14     	; 0xd88 <do_receive+0x6c>
    level = 31 * val;
     d7a:	8f e1       	ldi	r24, 0x1F	; 31
     d7c:	8c 9f       	mul	r24, r28
     d7e:	b0 01       	movw	r22, r0
     d80:	8d 9f       	mul	r24, r29
     d82:	70 0d       	add	r23, r0
     d84:	11 24       	eor	r1, r1
     d86:	02 c0       	rjmp	.+4      	; 0xd8c <do_receive+0x70>
  
  if (next > 0) {
    start_transfer(next, clock);
  }

  int level = 255;
     d88:	6f ef       	ldi	r22, 0xFF	; 255
     d8a:	70 e0       	ldi	r23, 0x00	; 0
  if (dynamicLevel[program - 8]) {
    level = 31 * val;
  }

  if (next < 0) {
     d8c:	17 ff       	sbrs	r17, 7
     d8e:	0c c0       	rjmp	.+24     	; 0xda8 <do_receive+0x8c>
    setFromDir(trans.dir, level);
     d90:	8b 2d       	mov	r24, r11
  } else {
    setAll(level);
  }
}
     d92:	df 91       	pop	r29
     d94:	cf 91       	pop	r28
     d96:	1f 91       	pop	r17
     d98:	0f 91       	pop	r16
     d9a:	ff 90       	pop	r15
     d9c:	ef 90       	pop	r14
     d9e:	df 90       	pop	r13
     da0:	cf 90       	pop	r12
     da2:	bf 90       	pop	r11
  if (dynamicLevel[program - 8]) {
    level = 31 * val;
  }

  if (next < 0) {
    setFromDir(trans.dir, level);
     da4:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <setFromDir>
  } else {
    setAll(level);
     da8:	86 2f       	mov	r24, r22
  }
}
     daa:	df 91       	pop	r29
     dac:	cf 91       	pop	r28
     dae:	1f 91       	pop	r17
     db0:	0f 91       	pop	r16
     db2:	ff 90       	pop	r15
     db4:	ef 90       	pop	r14
     db6:	df 90       	pop	r13
     db8:	cf 90       	pop	r12
     dba:	bf 90       	pop	r11
  }

  if (next < 0) {
    setFromDir(trans.dir, level);
  } else {
    setAll(level);
     dbc:	0c 94 5e 06 	jmp	0xcbc	; 0xcbc <setAll>
  }
}
     dc0:	df 91       	pop	r29
     dc2:	cf 91       	pop	r28
     dc4:	1f 91       	pop	r17
     dc6:	0f 91       	pop	r16
     dc8:	ff 90       	pop	r15
     dca:	ef 90       	pop	r14
     dcc:	df 90       	pop	r13
     dce:	cf 90       	pop	r12
     dd0:	bf 90       	pop	r11
     dd2:	08 95       	ret

00000dd4 <handle_network>:
    start_transfer(val, clock);
    setAll(255);
  }
}

void handle_network(long clock) {
     dd4:	cf 92       	push	r12
     dd6:	df 92       	push	r13
     dd8:	ef 92       	push	r14
     dda:	ff 92       	push	r15
     ddc:	6b 01       	movw	r12, r22
     dde:	7c 01       	movw	r14, r24
  if (! in_network()) {
     de0:	80 91 90 01 	lds	r24, 0x0190
     de4:	88 30       	cpi	r24, 0x08	; 8
     de6:	60 f0       	brcs	.+24     	; 0xe00 <handle_network+0x2c>
    return;
  }

  continue_transfer(clock);
     de8:	c7 01       	movw	r24, r14
     dea:	b6 01       	movw	r22, r12
     dec:	0e 94 da 05 	call	0xbb4	; 0xbb4 <continue_transfer>
  do_receive(clock);  
     df0:	c7 01       	movw	r24, r14
     df2:	b6 01       	movw	r22, r12
}
     df4:	ff 90       	pop	r15
     df6:	ef 90       	pop	r14
     df8:	df 90       	pop	r13
     dfa:	cf 90       	pop	r12
  if (! in_network()) {
    return;
  }

  continue_transfer(clock);
  do_receive(clock);  
     dfc:	0c 94 8e 06 	jmp	0xd1c	; 0xd1c <do_receive>
}
     e00:	ff 90       	pop	r15
     e02:	ef 90       	pop	r14
     e04:	df 90       	pop	r13
     e06:	cf 90       	pop	r12
     e08:	08 95       	ret

00000e0a <__vector_16>:
  }
}

// interrupts

ISR (TIMER0_COMPA_vect) {
     e0a:	1f 92       	push	r1
     e0c:	0f 92       	push	r0
     e0e:	0f b6       	in	r0, 0x3f	; 63
     e10:	0f 92       	push	r0
     e12:	11 24       	eor	r1, r1
     e14:	2f 93       	push	r18
     e16:	8f 93       	push	r24
     e18:	9f 93       	push	r25
  static uint8_t pwmCnt = 0;

  pwmCnt++;
     e1a:	90 91 91 01 	lds	r25, 0x0191
     e1e:	9f 5f       	subi	r25, 0xFF	; 255
     e20:	90 93 91 01 	sts	0x0191, r25

  uint8_t pd = 0;

  if (compbuff[0]  > pwmCnt) {
     e24:	20 91 fc 01 	lds	r18, 0x01FC
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	92 17       	cp	r25, r18
     e2c:	08 f0       	brcs	.+2      	; 0xe30 <__vector_16+0x26>
     e2e:	80 e0       	ldi	r24, 0x00	; 0
    pd = 1;
  }

  if (compbuff[1]  > pwmCnt) {
     e30:	20 91 fd 01 	lds	r18, 0x01FD
     e34:	92 17       	cp	r25, r18
     e36:	08 f4       	brcc	.+2      	; 0xe3a <__vector_16+0x30>
    pd |= 2;
     e38:	82 60       	ori	r24, 0x02	; 2
  }

  if (compbuff[2]  > pwmCnt) {
     e3a:	20 91 fe 01 	lds	r18, 0x01FE
     e3e:	92 17       	cp	r25, r18
     e40:	08 f4       	brcc	.+2      	; 0xe44 <__vector_16+0x3a>
    pd |= 4;
     e42:	84 60       	ori	r24, 0x04	; 4
  }

  if (compbuff[3]  > pwmCnt) {
     e44:	20 91 ff 01 	lds	r18, 0x01FF
     e48:	92 17       	cp	r25, r18
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__vector_16+0x44>
    pd |= 8;
     e4c:	88 60       	ori	r24, 0x08	; 8
  }

  if (compbuff[4]  > pwmCnt) {
     e4e:	20 91 00 02 	lds	r18, 0x0200
     e52:	92 17       	cp	r25, r18
     e54:	08 f4       	brcc	.+2      	; 0xe58 <__vector_16+0x4e>
    pd |= 16;
     e56:	80 61       	ori	r24, 0x10	; 16
  }

  if (compbuff[5]  > pwmCnt) {
     e58:	20 91 01 02 	lds	r18, 0x0201
     e5c:	92 17       	cp	r25, r18
     e5e:	08 f4       	brcc	.+2      	; 0xe62 <__vector_16+0x58>
    pd |= 32;
     e60:	80 62       	ori	r24, 0x20	; 32
  }

  if (compbuff[6]  > pwmCnt) {
     e62:	20 91 02 02 	lds	r18, 0x0202
     e66:	92 17       	cp	r25, r18
     e68:	08 f4       	brcc	.+2      	; 0xe6c <__vector_16+0x62>
    pd |= 64;
     e6a:	80 64       	ori	r24, 0x40	; 64
  }

  if (compbuff[7]  > pwmCnt) {
     e6c:	20 91 03 02 	lds	r18, 0x0203
     e70:	92 17       	cp	r25, r18
     e72:	08 f4       	brcc	.+2      	; 0xe76 <__vector_16+0x6c>
    pd |= 128;
     e74:	80 68       	ori	r24, 0x80	; 128
  }

  PORTD = pd;
     e76:	8b b9       	out	0x0b, r24	; 11
}
     e78:	9f 91       	pop	r25
     e7a:	8f 91       	pop	r24
     e7c:	2f 91       	pop	r18
     e7e:	0f 90       	pop	r0
     e80:	0f be       	out	0x3f, r0	; 63
     e82:	0f 90       	pop	r0
     e84:	1f 90       	pop	r1
     e86:	18 95       	reti

00000e88 <__vector_15>:

unsigned long timer_clock = 0;
ISR (TIMER1_OVF_vect) {
     e88:	1f 92       	push	r1
     e8a:	0f 92       	push	r0
     e8c:	0f b6       	in	r0, 0x3f	; 63
     e8e:	0f 92       	push	r0
     e90:	11 24       	eor	r1, r1
     e92:	8f 93       	push	r24
     e94:	9f 93       	push	r25
     e96:	af 93       	push	r26
     e98:	bf 93       	push	r27
  timer_clock++;
     e9a:	80 91 4a 01 	lds	r24, 0x014A
     e9e:	90 91 4b 01 	lds	r25, 0x014B
     ea2:	a0 91 4c 01 	lds	r26, 0x014C
     ea6:	b0 91 4d 01 	lds	r27, 0x014D
     eaa:	01 96       	adiw	r24, 0x01	; 1
     eac:	a1 1d       	adc	r26, r1
     eae:	b1 1d       	adc	r27, r1
     eb0:	80 93 4a 01 	sts	0x014A, r24
     eb4:	90 93 4b 01 	sts	0x014B, r25
     eb8:	a0 93 4c 01 	sts	0x014C, r26
     ebc:	b0 93 4d 01 	sts	0x014D, r27
}
     ec0:	bf 91       	pop	r27
     ec2:	af 91       	pop	r26
     ec4:	9f 91       	pop	r25
     ec6:	8f 91       	pop	r24
     ec8:	0f 90       	pop	r0
     eca:	0f be       	out	0x3f, r0	; 63
     ecc:	0f 90       	pop	r0
     ece:	1f 90       	pop	r1
     ed0:	18 95       	reti

00000ed2 <tclock>:

unsigned long tclock() {
  unsigned long m;
  uint8_t oldSREG = SREG;
     ed2:	2f b7       	in	r18, 0x3f	; 63
  
  cli();
     ed4:	f8 94       	cli
  m = timer_clock;
     ed6:	60 91 4a 01 	lds	r22, 0x014A
     eda:	70 91 4b 01 	lds	r23, 0x014B
     ede:	80 91 4c 01 	lds	r24, 0x014C
     ee2:	90 91 4d 01 	lds	r25, 0x014D
  SREG = oldSREG;
     ee6:	2f bf       	out	0x3f, r18	; 63

  return m;
}
     ee8:	08 95       	ret

00000eea <loop>:

int last_act[] = {0,0,0,0,0,0,0,0};

#define configTime 40

void loop() {
     eea:	cf 93       	push	r28
     eec:	df 93       	push	r29
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
     ef2:	2c 97       	sbiw	r28, 0x0c	; 12
     ef4:	0f b6       	in	r0, 0x3f	; 63
     ef6:	f8 94       	cli
     ef8:	de bf       	out	0x3e, r29	; 62
     efa:	0f be       	out	0x3f, r0	; 63
     efc:	cd bf       	out	0x3d, r28	; 61

  int in_config = 0;
  int last_button = 0;
  int switched = 0;

  unsigned long buttonStart = 0;
     efe:	81 2c       	mov	r8, r1
     f00:	91 2c       	mov	r9, r1
     f02:	54 01       	movw	r10, r8

  int16_t bright = 0;

  int in_config = 0;
  int last_button = 0;
  int switched = 0;
     f04:	1a 82       	std	Y+2, r1	; 0x02
     f06:	19 82       	std	Y+1, r1	; 0x01
int last_act[] = {0,0,0,0,0,0,0,0};

#define configTime 40

void loop() {
  unsigned long clock = 0;
     f08:	c1 2c       	mov	r12, r1
     f0a:	d1 2c       	mov	r13, r1
     f0c:	76 01       	movw	r14, r12

  // track fade steps
  unsigned long dimInterval = 75;
  unsigned long lastDim = 0;
     f0e:	1d 82       	std	Y+5, r1	; 0x05
     f10:	1e 82       	std	Y+6, r1	; 0x06
     f12:	1f 82       	std	Y+7, r1	; 0x07
     f14:	18 86       	std	Y+8, r1	; 0x08

  // track button readings
  unsigned long buttonInterval = 100;
  unsigned long lastButton = 0;
     f16:	41 2c       	mov	r4, r1
     f18:	51 2c       	mov	r5, r1
     f1a:	32 01       	movw	r6, r4

  int16_t bright = 0;

  int in_config = 0;
     f1c:	1c 86       	std	Y+12, r1	; 0x0c
     f1e:	1b 86       	std	Y+11, r1	; 0x0b
  int last_button = 0;
     f20:	21 2c       	mov	r2, r1
     f22:	31 2c       	mov	r3, r1
  int switched = 0;

  unsigned long buttonStart = 0;

  while (1) {
    int ir = 0;
     f24:	1c 82       	std	Y+4, r1	; 0x04
     f26:	1b 82       	std	Y+3, r1	; 0x03
  
    while (ir < 8) {
      if (! in_config) {
     f28:	2b 85       	ldd	r18, Y+11	; 0x0b
     f2a:	3c 85       	ldd	r19, Y+12	; 0x0c
     f2c:	23 2b       	or	r18, r19
     f2e:	09 f0       	breq	.+2      	; 0xf32 <loop+0x48>
     f30:	4d c0       	rjmp	.+154    	; 0xfcc <loop+0xe2>
	bright = readIR(ir);
     f32:	8b 81       	ldd	r24, Y+3	; 0x03
     f34:	0e 94 07 04 	call	0x80e	; 0x80e <readIR>

	if (bright >= 0) {
     f38:	97 fd       	sbrc	r25, 7
     f3a:	0f c0       	rjmp	.+30     	; 0xf5a <loop+0x70>
	  // got a reading (ADC finished), process signal and increment
	  int act = handle_ir(ir, bright);
     f3c:	bc 01       	movw	r22, r24
     f3e:	8b 81       	ldd	r24, Y+3	; 0x03
     f40:	9c 81       	ldd	r25, Y+4	; 0x04
     f42:	0e 94 61 02 	call	0x4c2	; 0x4c2 <handle_ir>

	  do_send(act, clock);
     f46:	b7 01       	movw	r22, r14
     f48:	a6 01       	movw	r20, r12
     f4a:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <do_send>

	  ir++;
     f4e:	4b 81       	ldd	r20, Y+3	; 0x03
     f50:	5c 81       	ldd	r21, Y+4	; 0x04
     f52:	4f 5f       	subi	r20, 0xFF	; 255
     f54:	5f 4f       	sbci	r21, 0xFF	; 255
     f56:	5c 83       	std	Y+4, r21	; 0x04
     f58:	4b 83       	std	Y+3, r20	; 0x03
	}

	handle_network(clock);
     f5a:	c7 01       	movw	r24, r14
     f5c:	b6 01       	movw	r22, r12
     f5e:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <handle_network>

	if (clock - lastDim > dimInterval) {
     f62:	d7 01       	movw	r26, r14
     f64:	c6 01       	movw	r24, r12
     f66:	2d 81       	ldd	r18, Y+5	; 0x05
     f68:	3e 81       	ldd	r19, Y+6	; 0x06
     f6a:	4f 81       	ldd	r20, Y+7	; 0x07
     f6c:	58 85       	ldd	r21, Y+8	; 0x08
     f6e:	82 1b       	sub	r24, r18
     f70:	93 0b       	sbc	r25, r19
     f72:	a4 0b       	sbc	r26, r20
     f74:	b5 0b       	sbc	r27, r21
     f76:	8c 34       	cpi	r24, 0x4C	; 76
     f78:	91 05       	cpc	r25, r1
     f7a:	a1 05       	cpc	r26, r1
     f7c:	b1 05       	cpc	r27, r1
     f7e:	30 f1       	brcs	.+76     	; 0xfcc <loop+0xe2>
     f80:	4f e7       	ldi	r20, 0x7F	; 127
     f82:	51 e0       	ldi	r21, 0x01	; 1
     f84:	5e 83       	std	Y+6, r21	; 0x06
     f86:	4d 83       	std	Y+5, r20	; 0x05
     f88:	00 e0       	ldi	r16, 0x00	; 0
     f8a:	10 e0       	ldi	r17, 0x00	; 0
	  // step fade routines
	  lastDim = clock;
	  int j;
	  for (j = 0; j< 8; j++) {
	    compbuff[j] = dispatch(program, j, last_act[j], compbuff[j]);
     f8c:	c8 01       	movw	r24, r16
     f8e:	84 50       	subi	r24, 0x04	; 4
     f90:	9e 4f       	sbci	r25, 0xFE	; 254
     f92:	9a 87       	std	Y+10, r25	; 0x0a
     f94:	89 87       	std	Y+9, r24	; 0x09
     f96:	fc 01       	movw	r30, r24
     f98:	20 81       	ld	r18, Z
     f9a:	ed 81       	ldd	r30, Y+5	; 0x05
     f9c:	fe 81       	ldd	r31, Y+6	; 0x06
     f9e:	41 91       	ld	r20, Z+
     fa0:	51 91       	ld	r21, Z+
     fa2:	fe 83       	std	Y+6, r31	; 0x06
     fa4:	ed 83       	std	Y+5, r30	; 0x05
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	80 91 90 01 	lds	r24, 0x0190
     fac:	b8 01       	movw	r22, r16
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	0e 94 33 01 	call	0x266	; 0x266 <dispatch>
     fb4:	e9 85       	ldd	r30, Y+9	; 0x09
     fb6:	fa 85       	ldd	r31, Y+10	; 0x0a
     fb8:	80 83       	st	Z, r24

	if (clock - lastDim > dimInterval) {
	  // step fade routines
	  lastDim = clock;
	  int j;
	  for (j = 0; j< 8; j++) {
     fba:	0f 5f       	subi	r16, 0xFF	; 255
     fbc:	1f 4f       	sbci	r17, 0xFF	; 255
     fbe:	08 30       	cpi	r16, 0x08	; 8
     fc0:	11 05       	cpc	r17, r1
     fc2:	21 f7       	brne	.-56     	; 0xf8c <loop+0xa2>
     fc4:	cd 82       	std	Y+5, r12	; 0x05
     fc6:	de 82       	std	Y+6, r13	; 0x06
     fc8:	ef 82       	std	Y+7, r14	; 0x07
     fca:	f8 86       	std	Y+8, r15	; 0x08
	    compbuff[j] = dispatch(program, j, last_act[j], compbuff[j]);
	  }
	}
      }

      clock++;
     fcc:	ff ef       	ldi	r31, 0xFF	; 255
     fce:	cf 1a       	sub	r12, r31
     fd0:	df 0a       	sbc	r13, r31
     fd2:	ef 0a       	sbc	r14, r31
     fd4:	ff 0a       	sbc	r15, r31

      if (clock - lastButton > buttonInterval) {
     fd6:	d7 01       	movw	r26, r14
     fd8:	c6 01       	movw	r24, r12
     fda:	84 19       	sub	r24, r4
     fdc:	95 09       	sbc	r25, r5
     fde:	a6 09       	sbc	r26, r6
     fe0:	b7 09       	sbc	r27, r7
     fe2:	85 36       	cpi	r24, 0x65	; 101
     fe4:	91 05       	cpc	r25, r1
     fe6:	a1 05       	cpc	r26, r1
     fe8:	b1 05       	cpc	r27, r1
     fea:	b8 f0       	brcs	.+46     	; 0x101a <loop+0x130>
	lastButton = clock;
	int button = readButton();
     fec:	0e 94 59 04 	call	0x8b2	; 0x8b2 <readButton>
     ff0:	8c 01       	movw	r16, r24

	// single button press, not in another config mode, enter program config
	if (button && (! last_button)) {
     ff2:	00 97       	sbiw	r24, 0x00	; 0
     ff4:	a1 f0       	breq	.+40     	; 0x101e <loop+0x134>
     ff6:	21 14       	cp	r2, r1
     ff8:	31 04       	cpc	r3, r1
     ffa:	09 f0       	breq	.+2      	; 0xffe <loop+0x114>
     ffc:	6c c0       	rjmp	.+216    	; 0x10d6 <loop+0x1ec>
	  buttonStart = tclock();
     ffe:	0e 94 69 07 	call	0xed2	; 0xed2 <tclock>
    1002:	4b 01       	movw	r8, r22
    1004:	5c 01       	movw	r10, r24
	  switched = 0;

	  if (in_config == 0) {
    1006:	2b 85       	ldd	r18, Y+11	; 0x0b
    1008:	3c 85       	ldd	r19, Y+12	; 0x0c
    100a:	23 2b       	or	r18, r19
    100c:	09 f0       	breq	.+2      	; 0x1010 <loop+0x126>
    100e:	60 c0       	rjmp	.+192    	; 0x10d0 <loop+0x1e6>
	    in_config = 1;
    1010:	21 e0       	ldi	r18, 0x01	; 1
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	3c 87       	std	Y+12, r19	; 0x0c
    1016:	2b 87       	std	Y+11, r18	; 0x0b
    1018:	5b c0       	rjmp	.+182    	; 0x10d0 <loop+0x1e6>
    101a:	81 01       	movw	r16, r2
    101c:	50 c0       	rjmp	.+160    	; 0x10be <loop+0x1d4>
	  }
	}

	// program config stable, switch out of config mode
	if ((in_config) && (! button) && (! last_button)) {
    101e:	eb 85       	ldd	r30, Y+11	; 0x0b
    1020:	fc 85       	ldd	r31, Y+12	; 0x0c
    1022:	ef 2b       	or	r30, r31
    1024:	09 f4       	brne	.+2      	; 0x1028 <loop+0x13e>
    1026:	fc c0       	rjmp	.+504    	; 0x1220 <loop+0x336>
    1028:	21 14       	cp	r2, r1
    102a:	31 04       	cpc	r3, r1
    102c:	09 f0       	breq	.+2      	; 0x1030 <loop+0x146>
    102e:	85 c0       	rjmp	.+266    	; 0x113a <loop+0x250>

	  unsigned long diff = tclock() - buttonStart;
    1030:	0e 94 69 07 	call	0xed2	; 0xed2 <tclock>
    1034:	68 19       	sub	r22, r8
    1036:	79 09       	sbc	r23, r9
    1038:	8a 09       	sbc	r24, r10
    103a:	9b 09       	sbc	r25, r11
	  if ((in_config == 1 && (diff > configTime)) ||
    103c:	4b 85       	ldd	r20, Y+11	; 0x0b
    103e:	5c 85       	ldd	r21, Y+12	; 0x0c
    1040:	41 30       	cpi	r20, 0x01	; 1
    1042:	51 05       	cpc	r21, r1
    1044:	09 f0       	breq	.+2      	; 0x1048 <loop+0x15e>
    1046:	e1 c0       	rjmp	.+450    	; 0x120a <loop+0x320>
    1048:	69 32       	cpi	r22, 0x29	; 41
    104a:	71 05       	cpc	r23, r1
    104c:	81 05       	cpc	r24, r1
    104e:	91 05       	cpc	r25, r1
    1050:	08 f0       	brcs	.+2      	; 0x1054 <loop+0x16a>
    1052:	e0 c0       	rjmp	.+448    	; 0x1214 <loop+0x32a>
	      changeProgram();
	      buttonStart = tclock();
	    }
	  }

	  programOn(program);
    1054:	80 91 90 01 	lds	r24, 0x0190
    1058:	0e 94 c7 04 	call	0x98e	; 0x98e <programOn>
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	9c 87       	std	Y+12, r25	; 0x0c
    1062:	8b 87       	std	Y+11, r24	; 0x0b
	    }
	  }	  
	}

	// button depressed for a bit, switch to sensitivity adjustment
	if (button && last_button) {
    1064:	01 15       	cp	r16, r1
    1066:	11 05       	cpc	r17, r1
    1068:	09 f4       	brne	.+2      	; 0x106c <loop+0x182>
    106a:	c7 c0       	rjmp	.+398    	; 0x11fa <loop+0x310>
    106c:	23 28       	or	r2, r3
    106e:	09 f4       	brne	.+2      	; 0x1072 <loop+0x188>
    1070:	c4 c0       	rjmp	.+392    	; 0x11fa <loop+0x310>

	  if ((in_config == 2) && tclock() - buttonStart > (configTime * 2)) {
    1072:	2b 85       	ldd	r18, Y+11	; 0x0b
    1074:	3c 85       	ldd	r19, Y+12	; 0x0c
    1076:	22 30       	cpi	r18, 0x02	; 2
    1078:	31 05       	cpc	r19, r1
    107a:	09 f0       	breq	.+2      	; 0x107e <loop+0x194>
    107c:	99 c0       	rjmp	.+306    	; 0x11b0 <loop+0x2c6>
    107e:	0e 94 69 07 	call	0xed2	; 0xed2 <tclock>
    1082:	68 19       	sub	r22, r8
    1084:	79 09       	sbc	r23, r9
    1086:	8a 09       	sbc	r24, r10
    1088:	9b 09       	sbc	r25, r11
    108a:	61 35       	cpi	r22, 0x51	; 81
    108c:	71 05       	cpc	r23, r1
    108e:	81 05       	cpc	r24, r1
    1090:	91 05       	cpc	r25, r1
    1092:	08 f4       	brcc	.+2      	; 0x1096 <loop+0x1ac>
    1094:	8d c0       	rjmp	.+282    	; 0x11b0 <loop+0x2c6>
	    in_config = 3;
	    netConfigOn(netConfig);
    1096:	80 91 8f 01 	lds	r24, 0x018F
    109a:	0e 94 75 04 	call	0x8ea	; 0x8ea <netConfigOn>
	    buttonStart = tclock();
    109e:	0e 94 69 07 	call	0xed2	; 0xed2 <tclock>
    10a2:	4b 01       	movw	r8, r22
    10a4:	5c 01       	movw	r10, r24
	    switched++;
    10a6:	49 81       	ldd	r20, Y+1	; 0x01
    10a8:	5a 81       	ldd	r21, Y+2	; 0x02
    10aa:	4f 5f       	subi	r20, 0xFF	; 255
    10ac:	5f 4f       	sbci	r21, 0xFF	; 255
    10ae:	5a 83       	std	Y+2, r21	; 0x02
    10b0:	49 83       	std	Y+1, r20	; 0x01
      }

      clock++;

      if (clock - lastButton > buttonInterval) {
	lastButton = clock;
    10b2:	26 01       	movw	r4, r12
    10b4:	37 01       	movw	r6, r14

	// button depressed for a bit, switch to sensitivity adjustment
	if (button && last_button) {

	  if ((in_config == 2) && tclock() - buttonStart > (configTime * 2)) {
	    in_config = 3;
    10b6:	83 e0       	ldi	r24, 0x03	; 3
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	9c 87       	std	Y+12, r25	; 0x0c
    10bc:	8b 87       	std	Y+11, r24	; 0x0b
  unsigned long buttonStart = 0;

  while (1) {
    int ir = 0;
  
    while (ir < 8) {
    10be:	eb 81       	ldd	r30, Y+3	; 0x03
    10c0:	fc 81       	ldd	r31, Y+4	; 0x04
    10c2:	38 97       	sbiw	r30, 0x08	; 8
    10c4:	14 f4       	brge	.+4      	; 0x10ca <loop+0x1e0>
  int switched = 0;

  unsigned long buttonStart = 0;

  while (1) {
    int ir = 0;
    10c6:	18 01       	movw	r2, r16
    10c8:	2f cf       	rjmp	.-418    	; 0xf28 <loop+0x3e>
    10ca:	1c 82       	std	Y+4, r1	; 0x04
    10cc:	1b 82       	std	Y+3, r1	; 0x03
    10ce:	fb cf       	rjmp	.-10     	; 0x10c6 <loop+0x1dc>

	  unsigned long diff = tclock() - buttonStart;
	  if ((in_config == 1 && (diff > configTime)) ||
	      (in_config && (diff > (configTime << 1)))) {
	  in_config = 0;
	  switched = 0;
    10d0:	1a 82       	std	Y+2, r1	; 0x02
    10d2:	19 82       	std	Y+1, r1	; 0x01
    10d4:	05 c0       	rjmp	.+10     	; 0x10e0 <loop+0x1f6>
	    in_config = 1;
	  }
	}

	// program config stable, switch out of config mode
	if ((in_config) && (! button) && (! last_button)) {
    10d6:	2b 85       	ldd	r18, Y+11	; 0x0b
    10d8:	3c 85       	ldd	r19, Y+12	; 0x0c
    10da:	23 2b       	or	r18, r19
    10dc:	09 f4       	brne	.+2      	; 0x10e0 <loop+0x1f6>
    10de:	a0 c0       	rjmp	.+320    	; 0x1220 <loop+0x336>
	  flashLeds();
	}
	}

	// program config
	if (in_config == 1) {
    10e0:	8b 85       	ldd	r24, Y+11	; 0x0b
    10e2:	9c 85       	ldd	r25, Y+12	; 0x0c
    10e4:	01 97       	sbiw	r24, 0x01	; 1
    10e6:	09 f4       	brne	.+2      	; 0x10ea <loop+0x200>
    10e8:	b5 cf       	rjmp	.-150    	; 0x1054 <loop+0x16a>

	  programOn(program);
	}

	// sensitivity config
	if (in_config == 2) {
    10ea:	eb 85       	ldd	r30, Y+11	; 0x0b
    10ec:	fc 85       	ldd	r31, Y+12	; 0x0c
    10ee:	32 97       	sbiw	r30, 0x02	; 2
    10f0:	79 f5       	brne	.+94     	; 0x1150 <loop+0x266>
	  // button was released, change sensitivity
	  if ((button == 0) && (last_button)) {
    10f2:	01 15       	cp	r16, r1
    10f4:	11 05       	cpc	r17, r1
    10f6:	c1 f4       	brne	.+48     	; 0x1128 <loop+0x23e>
    10f8:	21 14       	cp	r2, r1
    10fa:	31 04       	cpc	r3, r1
    10fc:	a9 f0       	breq	.+42     	; 0x1128 <loop+0x23e>
	    if ((! switched) && tclock() - buttonStart < configTime) {
    10fe:	29 81       	ldd	r18, Y+1	; 0x01
    1100:	3a 81       	ldd	r19, Y+2	; 0x02
    1102:	23 2b       	or	r18, r19
    1104:	89 f4       	brne	.+34     	; 0x1128 <loop+0x23e>
    1106:	0e 94 69 07 	call	0xed2	; 0xed2 <tclock>
    110a:	68 19       	sub	r22, r8
    110c:	79 09       	sbc	r23, r9
    110e:	8a 09       	sbc	r24, r10
    1110:	9b 09       	sbc	r25, r11
    1112:	68 32       	cpi	r22, 0x28	; 40
    1114:	71 05       	cpc	r23, r1
    1116:	81 05       	cpc	r24, r1
    1118:	91 05       	cpc	r25, r1
    111a:	30 f4       	brcc	.+12     	; 0x1128 <loop+0x23e>
	      changeSensitivity();
    111c:	0e 94 f7 04 	call	0x9ee	; 0x9ee <changeSensitivity>
	      buttonStart = tclock();
    1120:	0e 94 69 07 	call	0xed2	; 0xed2 <tclock>
    1124:	4b 01       	movw	r8, r22
    1126:	5c 01       	movw	r10, r24
	    }
	  }

	  sensitivityOn(sensitivity);
    1128:	80 91 45 01 	lds	r24, 0x0145
    112c:	0e 94 02 05 	call	0xa04	; 0xa04 <sensitivityOn>
    1130:	42 e0       	ldi	r20, 0x02	; 2
    1132:	50 e0       	ldi	r21, 0x00	; 0
    1134:	5c 87       	std	Y+12, r21	; 0x0c
    1136:	4b 87       	std	Y+11, r20	; 0x0b
    1138:	95 cf       	rjmp	.-214    	; 0x1064 <loop+0x17a>
	  flashLeds();
	}
	}

	// program config
	if (in_config == 1) {
    113a:	4b 85       	ldd	r20, Y+11	; 0x0b
    113c:	5c 85       	ldd	r21, Y+12	; 0x0c
    113e:	41 30       	cpi	r20, 0x01	; 1
    1140:	51 05       	cpc	r21, r1
    1142:	09 f4       	brne	.+2      	; 0x1146 <loop+0x25c>
    1144:	70 c0       	rjmp	.+224    	; 0x1226 <loop+0x33c>

	  programOn(program);
	}

	// sensitivity config
	if (in_config == 2) {
    1146:	4b 85       	ldd	r20, Y+11	; 0x0b
    1148:	5c 85       	ldd	r21, Y+12	; 0x0c
    114a:	42 30       	cpi	r20, 0x02	; 2
    114c:	51 05       	cpc	r21, r1
    114e:	b9 f2       	breq	.-82     	; 0x10fe <loop+0x214>
	  }

	  sensitivityOn(sensitivity);
	}

	if (in_config == 3) {
    1150:	8b 85       	ldd	r24, Y+11	; 0x0b
    1152:	9c 85       	ldd	r25, Y+12	; 0x0c
    1154:	03 97       	sbiw	r24, 0x03	; 3
    1156:	09 f0       	breq	.+2      	; 0x115a <loop+0x270>
    1158:	85 cf       	rjmp	.-246    	; 0x1064 <loop+0x17a>
	  // button was released, change net config
	  if ((button == 0) && (last_button)) {
    115a:	01 15       	cp	r16, r1
    115c:	11 05       	cpc	r17, r1
    115e:	31 f5       	brne	.+76     	; 0x11ac <loop+0x2c2>
    1160:	23 28       	or	r2, r3
    1162:	09 f4       	brne	.+2      	; 0x1166 <loop+0x27c>
    1164:	4a c0       	rjmp	.+148    	; 0x11fa <loop+0x310>
	    if ((! switched) && tclock() - buttonStart < configTime) {
    1166:	e9 81       	ldd	r30, Y+1	; 0x01
    1168:	fa 81       	ldd	r31, Y+2	; 0x02
    116a:	ef 2b       	or	r30, r31
    116c:	09 f0       	breq	.+2      	; 0x1170 <loop+0x286>
    116e:	45 c0       	rjmp	.+138    	; 0x11fa <loop+0x310>
    1170:	0e 94 69 07 	call	0xed2	; 0xed2 <tclock>
    1174:	68 19       	sub	r22, r8
    1176:	79 09       	sbc	r23, r9
    1178:	8a 09       	sbc	r24, r10
    117a:	9b 09       	sbc	r25, r11
    117c:	68 32       	cpi	r22, 0x28	; 40
    117e:	71 05       	cpc	r23, r1
    1180:	81 05       	cpc	r24, r1
    1182:	91 05       	cpc	r25, r1
    1184:	d0 f5       	brcc	.+116    	; 0x11fa <loop+0x310>
	      netConfig++;
    1186:	80 91 8f 01 	lds	r24, 0x018F
    118a:	8f 5f       	subi	r24, 0xFF	; 255
	      if (netConfig > 1) {
    118c:	82 30       	cpi	r24, 0x02	; 2
    118e:	18 f4       	brcc	.+6      	; 0x1196 <loop+0x2ac>

	if (in_config == 3) {
	  // button was released, change net config
	  if ((button == 0) && (last_button)) {
	    if ((! switched) && tclock() - buttonStart < configTime) {
	      netConfig++;
    1190:	80 93 8f 01 	sts	0x018F, r24
    1194:	02 c0       	rjmp	.+4      	; 0x119a <loop+0x2b0>
	      if (netConfig > 1) {
		netConfig = 0;
    1196:	10 92 8f 01 	sts	0x018F, r1
	      }
	      netConfigOn(netConfig);
    119a:	80 91 8f 01 	lds	r24, 0x018F
    119e:	0e 94 75 04 	call	0x8ea	; 0x8ea <netConfigOn>
	      buttonStart = tclock();
    11a2:	0e 94 69 07 	call	0xed2	; 0xed2 <tclock>
    11a6:	4b 01       	movw	r8, r22
    11a8:	5c 01       	movw	r10, r24
    11aa:	27 c0       	rjmp	.+78     	; 0x11fa <loop+0x310>
	    }
	  }	  
	}

	// button depressed for a bit, switch to sensitivity adjustment
	if (button && last_button) {
    11ac:	23 28       	or	r2, r3
    11ae:	29 f1       	breq	.+74     	; 0x11fa <loop+0x310>
	    netConfigOn(netConfig);
	    buttonStart = tclock();
	    switched++;
	  }

	  if ((! switched) && tclock() - buttonStart > configTime) {
    11b0:	e9 81       	ldd	r30, Y+1	; 0x01
    11b2:	fa 81       	ldd	r31, Y+2	; 0x02
    11b4:	ef 2b       	or	r30, r31
    11b6:	09 f5       	brne	.+66     	; 0x11fa <loop+0x310>
    11b8:	0e 94 69 07 	call	0xed2	; 0xed2 <tclock>
    11bc:	68 19       	sub	r22, r8
    11be:	79 09       	sbc	r23, r9
    11c0:	8a 09       	sbc	r24, r10
    11c2:	9b 09       	sbc	r25, r11
    11c4:	69 32       	cpi	r22, 0x29	; 41
    11c6:	71 05       	cpc	r23, r1
    11c8:	81 05       	cpc	r24, r1
    11ca:	91 05       	cpc	r25, r1
    11cc:	b0 f0       	brcs	.+44     	; 0x11fa <loop+0x310>
	    switched++;

	    if (in_config >= 2) {
    11ce:	2b 85       	ldd	r18, Y+11	; 0x0b
    11d0:	3c 85       	ldd	r19, Y+12	; 0x0c
    11d2:	22 30       	cpi	r18, 0x02	; 2
    11d4:	31 05       	cpc	r19, r1
    11d6:	a4 f4       	brge	.+40     	; 0x1200 <loop+0x316>
	      in_config = 0;
	    } else {
	      in_config = 2;
	      buttonStart = tclock();
    11d8:	0e 94 69 07 	call	0xed2	; 0xed2 <tclock>
    11dc:	4b 01       	movw	r8, r22
    11de:	5c 01       	movw	r10, r24
	    switched++;

	    if (in_config >= 2) {
	      in_config = 0;
	    } else {
	      in_config = 2;
    11e0:	42 e0       	ldi	r20, 0x02	; 2
    11e2:	50 e0       	ldi	r21, 0x00	; 0
    11e4:	5c 87       	std	Y+12, r21	; 0x0c
    11e6:	4b 87       	std	Y+11, r20	; 0x0b
	    if (! in_config) {
	      // switched out of config mode, save settings...
	      saveConfig();
	    }
	    // visual feedback for mode switch ...
	    flashLeds();
    11e8:	0e 94 19 01 	call	0x232	; 0x232 <flashLeds>
      }

      clock++;

      if (clock - lastButton > buttonInterval) {
	lastButton = clock;
    11ec:	26 01       	movw	r4, r12
    11ee:	37 01       	movw	r6, r14
	    buttonStart = tclock();
	    switched++;
	  }

	  if ((! switched) && tclock() - buttonStart > configTime) {
	    switched++;
    11f0:	81 e0       	ldi	r24, 0x01	; 1
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	9a 83       	std	Y+2, r25	; 0x02
    11f6:	89 83       	std	Y+1, r24	; 0x01
    11f8:	62 cf       	rjmp	.-316    	; 0x10be <loop+0x1d4>
      }

      clock++;

      if (clock - lastButton > buttonInterval) {
	lastButton = clock;
    11fa:	26 01       	movw	r4, r12
    11fc:	37 01       	movw	r6, r14
    11fe:	5f cf       	rjmp	.-322    	; 0x10be <loop+0x1d4>
	      buttonStart = tclock();
	    }

	    if (! in_config) {
	      // switched out of config mode, save settings...
	      saveConfig();
    1200:	0e 94 f6 00 	call	0x1ec	; 0x1ec <saveConfig>

	  if ((! switched) && tclock() - buttonStart > configTime) {
	    switched++;

	    if (in_config >= 2) {
	      in_config = 0;
    1204:	1c 86       	std	Y+12, r1	; 0x0c
    1206:	1b 86       	std	Y+11, r1	; 0x0b
    1208:	ef cf       	rjmp	.-34     	; 0x11e8 <loop+0x2fe>
	// program config stable, switch out of config mode
	if ((in_config) && (! button) && (! last_button)) {

	  unsigned long diff = tclock() - buttonStart;
	  if ((in_config == 1 && (diff > configTime)) ||
	      (in_config && (diff > (configTime << 1)))) {
    120a:	61 35       	cpi	r22, 0x51	; 81
    120c:	71 05       	cpc	r23, r1
    120e:	81 05       	cpc	r24, r1
    1210:	91 05       	cpc	r25, r1
    1212:	e0 f0       	brcs	.+56     	; 0x124c <loop+0x362>
	  in_config = 0;
	  switched = 0;
	  saveConfig();
    1214:	0e 94 f6 00 	call	0x1ec	; 0x1ec <saveConfig>
	  flashLeds();
    1218:	0e 94 19 01 	call	0x232	; 0x232 <flashLeds>

	  unsigned long diff = tclock() - buttonStart;
	  if ((in_config == 1 && (diff > configTime)) ||
	      (in_config && (diff > (configTime << 1)))) {
	  in_config = 0;
	  switched = 0;
    121c:	1a 82       	std	Y+2, r1	; 0x02
    121e:	19 82       	std	Y+1, r1	; 0x01
	      changeSensitivity();
	      buttonStart = tclock();
	    }
	  }

	  sensitivityOn(sensitivity);
    1220:	1c 86       	std	Y+12, r1	; 0x0c
    1222:	1b 86       	std	Y+11, r1	; 0x0b
    1224:	1f cf       	rjmp	.-450    	; 0x1064 <loop+0x17a>

	// program config
	if (in_config == 1) {
	  // button was released, advance program
	  if ((button == 0) && (last_button)) {
	    if (tclock() - buttonStart < configTime) {
    1226:	0e 94 69 07 	call	0xed2	; 0xed2 <tclock>
    122a:	68 19       	sub	r22, r8
    122c:	79 09       	sbc	r23, r9
    122e:	8a 09       	sbc	r24, r10
    1230:	9b 09       	sbc	r25, r11
    1232:	68 32       	cpi	r22, 0x28	; 40
    1234:	71 05       	cpc	r23, r1
    1236:	81 05       	cpc	r24, r1
    1238:	91 05       	cpc	r25, r1
    123a:	08 f0       	brcs	.+2      	; 0x123e <loop+0x354>
    123c:	0b cf       	rjmp	.-490    	; 0x1054 <loop+0x16a>
	      changeProgram();
    123e:	0e 94 62 04 	call	0x8c4	; 0x8c4 <changeProgram>
	      buttonStart = tclock();
    1242:	0e 94 69 07 	call	0xed2	; 0xed2 <tclock>
    1246:	4b 01       	movw	r8, r22
    1248:	5c 01       	movw	r10, r24
    124a:	04 cf       	rjmp	.-504    	; 0x1054 <loop+0x16a>

	  programOn(program);
	}

	// sensitivity config
	if (in_config == 2) {
    124c:	8b 85       	ldd	r24, Y+11	; 0x0b
    124e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1250:	02 97       	sbiw	r24, 0x02	; 2
    1252:	09 f4       	brne	.+2      	; 0x1256 <loop+0x36c>
    1254:	69 cf       	rjmp	.-302    	; 0x1128 <loop+0x23e>
    1256:	7c cf       	rjmp	.-264    	; 0x1150 <loop+0x266>

00001258 <heat_fade>:
  }

  return ret;
}

int heat_fade(int ir, int activated, int current_val) {
    1258:	af 92       	push	r10
    125a:	bf 92       	push	r11
    125c:	cf 92       	push	r12
    125e:	df 92       	push	r13
    1260:	ef 92       	push	r14
    1262:	ff 92       	push	r15
    1264:	0f 93       	push	r16
    1266:	1f 93       	push	r17
    1268:	cf 93       	push	r28
    126a:	df 93       	push	r29
    126c:	00 d0       	rcall	.+0      	; 0x126e <heat_fade+0x16>
    126e:	cd b7       	in	r28, 0x3d	; 61
    1270:	de b7       	in	r29, 0x3e	; 62
    1272:	5c 01       	movw	r10, r24
    1274:	6b 01       	movw	r12, r22
  static unsigned long msteps[8] = {0, 0, 0, 0, 0, 0, 0, 0};
  int ret;

  if (activated) {
    1276:	61 15       	cp	r22, r1
    1278:	71 05       	cpc	r23, r1
    127a:	c1 f1       	breq	.+112    	; 0x12ec <heat_fade+0x94>
    if (tclock() - msteps[ir] > 0) {
    127c:	49 83       	std	Y+1, r20	; 0x01
    127e:	5a 83       	std	Y+2, r21	; 0x02
    1280:	0e 94 69 07 	call	0xed2	; 0xed2 <tclock>
    1284:	75 01       	movw	r14, r10
    1286:	ee 0c       	add	r14, r14
    1288:	ff 1c       	adc	r15, r15
    128a:	ee 0c       	add	r14, r14
    128c:	ff 1c       	adc	r15, r15
    128e:	f7 01       	movw	r30, r14
    1290:	e4 56       	subi	r30, 0x64	; 100
    1292:	fe 4f       	sbci	r31, 0xFE	; 254
    1294:	00 81       	ld	r16, Z
    1296:	11 81       	ldd	r17, Z+1	; 0x01
    1298:	22 81       	ldd	r18, Z+2	; 0x02
    129a:	33 81       	ldd	r19, Z+3	; 0x03
    129c:	49 81       	ldd	r20, Y+1	; 0x01
    129e:	5a 81       	ldd	r21, Y+2	; 0x02
    12a0:	60 17       	cp	r22, r16
    12a2:	71 07       	cpc	r23, r17
    12a4:	82 07       	cpc	r24, r18
    12a6:	93 07       	cpc	r25, r19
    12a8:	21 f0       	breq	.+8      	; 0x12b2 <heat_fade+0x5a>
      ret = current_val + hstep;
    12aa:	8a 01       	movw	r16, r20
    12ac:	00 5f       	subi	r16, 0xF0	; 240
    12ae:	1f 4f       	sbci	r17, 0xFF	; 255
    12b0:	07 c0       	rjmp	.+14     	; 0x12c0 <heat_fade+0x68>
    } else {
      ret = current_val;
      if (ret == 0) {
    12b2:	41 15       	cp	r20, r1
    12b4:	51 05       	cpc	r21, r1
    12b6:	11 f0       	breq	.+4      	; 0x12bc <heat_fade+0x64>
    12b8:	8a 01       	movw	r16, r20
    12ba:	02 c0       	rjmp	.+4      	; 0x12c0 <heat_fade+0x68>
	ret = hstep;
    12bc:	00 e1       	ldi	r16, 0x10	; 16
    12be:	10 e0       	ldi	r17, 0x00	; 0
      }
    }
    // call slow_fade to init counters
    _slow_fade(ir, activated, current_val, 2);
    12c0:	22 e0       	ldi	r18, 0x02	; 2
    12c2:	b6 01       	movw	r22, r12
    12c4:	c5 01       	movw	r24, r10
    12c6:	0e 94 1b 03 	call	0x636	; 0x636 <_slow_fade>
    msteps[ir] = tclock();
    12ca:	0e 94 69 07 	call	0xed2	; 0xed2 <tclock>
    12ce:	f7 01       	movw	r30, r14
    12d0:	e4 56       	subi	r30, 0x64	; 100
    12d2:	fe 4f       	sbci	r31, 0xFE	; 254
    12d4:	60 83       	st	Z, r22
    12d6:	71 83       	std	Z+1, r23	; 0x01
    12d8:	82 83       	std	Z+2, r24	; 0x02
    12da:	93 83       	std	Z+3, r25	; 0x03
    12dc:	c8 01       	movw	r24, r16
    12de:	0f 3f       	cpi	r16, 0xFF	; 255
    12e0:	11 05       	cpc	r17, r1
    12e2:	01 f1       	breq	.+64     	; 0x1324 <heat_fade+0xcc>
    12e4:	fc f0       	brlt	.+62     	; 0x1324 <heat_fade+0xcc>
    12e6:	8f ef       	ldi	r24, 0xFF	; 255
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	1c c0       	rjmp	.+56     	; 0x1324 <heat_fade+0xcc>
  } else {
    int fade = current_val >> 4;
    12ec:	9a 01       	movw	r18, r20
    12ee:	64 e0       	ldi	r22, 0x04	; 4
    12f0:	35 95       	asr	r19
    12f2:	27 95       	ror	r18
    12f4:	6a 95       	dec	r22
    12f6:	e1 f7       	brne	.-8      	; 0x12f0 <heat_fade+0x98>
    12f8:	27 30       	cpi	r18, 0x07	; 7
    12fa:	31 05       	cpc	r19, r1
    12fc:	14 f0       	brlt	.+4      	; 0x1302 <heat_fade+0xaa>
    12fe:	26 e0       	ldi	r18, 0x06	; 6
    1300:	30 e0       	ldi	r19, 0x00	; 0
    if (fade > 6) {
      fade = 6;
    }
    
    return _slow_fade(ir, activated, current_val, fade);
    1302:	60 e0       	ldi	r22, 0x00	; 0
    1304:	70 e0       	ldi	r23, 0x00	; 0
    1306:	c5 01       	movw	r24, r10
  if (ret > 255) {
    return 255;
  }

  return ret;
}
    1308:	0f 90       	pop	r0
    130a:	0f 90       	pop	r0
    130c:	df 91       	pop	r29
    130e:	cf 91       	pop	r28
    1310:	1f 91       	pop	r17
    1312:	0f 91       	pop	r16
    1314:	ff 90       	pop	r15
    1316:	ef 90       	pop	r14
    1318:	df 90       	pop	r13
    131a:	cf 90       	pop	r12
    131c:	bf 90       	pop	r11
    131e:	af 90       	pop	r10
    int fade = current_val >> 4;
    if (fade > 6) {
      fade = 6;
    }
    
    return _slow_fade(ir, activated, current_val, fade);
    1320:	0c 94 1b 03 	jmp	0x636	; 0x636 <_slow_fade>
  if (ret > 255) {
    return 255;
  }

  return ret;
}
    1324:	0f 90       	pop	r0
    1326:	0f 90       	pop	r0
    1328:	df 91       	pop	r29
    132a:	cf 91       	pop	r28
    132c:	1f 91       	pop	r17
    132e:	0f 91       	pop	r16
    1330:	ff 90       	pop	r15
    1332:	ef 90       	pop	r14
    1334:	df 90       	pop	r13
    1336:	cf 90       	pop	r12
    1338:	bf 90       	pop	r11
    133a:	af 90       	pop	r10
    133c:	08 95       	ret

0000133e <main>:
int sparkle_dir[8];
int sparkle_step[8];

int main (void)
{ 
  setup();
    133e:	0e 94 82 03 	call	0x704	; 0x704 <setup>
  loop();
    1342:	0e 94 75 07 	call	0xeea	; 0xeea <loop>

00001346 <__udivmodhi4>:
    1346:	aa 1b       	sub	r26, r26
    1348:	bb 1b       	sub	r27, r27
    134a:	51 e1       	ldi	r21, 0x11	; 17
    134c:	07 c0       	rjmp	.+14     	; 0x135c <__udivmodhi4_ep>

0000134e <__udivmodhi4_loop>:
    134e:	aa 1f       	adc	r26, r26
    1350:	bb 1f       	adc	r27, r27
    1352:	a6 17       	cp	r26, r22
    1354:	b7 07       	cpc	r27, r23
    1356:	10 f0       	brcs	.+4      	; 0x135c <__udivmodhi4_ep>
    1358:	a6 1b       	sub	r26, r22
    135a:	b7 0b       	sbc	r27, r23

0000135c <__udivmodhi4_ep>:
    135c:	88 1f       	adc	r24, r24
    135e:	99 1f       	adc	r25, r25
    1360:	5a 95       	dec	r21
    1362:	a9 f7       	brne	.-22     	; 0x134e <__udivmodhi4_loop>
    1364:	80 95       	com	r24
    1366:	90 95       	com	r25
    1368:	bc 01       	movw	r22, r24
    136a:	cd 01       	movw	r24, r26
    136c:	08 95       	ret

0000136e <__divmodhi4>:
    136e:	97 fb       	bst	r25, 7
    1370:	07 2e       	mov	r0, r23
    1372:	16 f4       	brtc	.+4      	; 0x1378 <__divmodhi4+0xa>
    1374:	00 94       	com	r0
    1376:	07 d0       	rcall	.+14     	; 0x1386 <__divmodhi4_neg1>
    1378:	77 fd       	sbrc	r23, 7
    137a:	09 d0       	rcall	.+18     	; 0x138e <__divmodhi4_neg2>
    137c:	0e 94 a3 09 	call	0x1346	; 0x1346 <__udivmodhi4>
    1380:	07 fc       	sbrc	r0, 7
    1382:	05 d0       	rcall	.+10     	; 0x138e <__divmodhi4_neg2>
    1384:	3e f4       	brtc	.+14     	; 0x1394 <__divmodhi4_exit>

00001386 <__divmodhi4_neg1>:
    1386:	90 95       	com	r25
    1388:	81 95       	neg	r24
    138a:	9f 4f       	sbci	r25, 0xFF	; 255
    138c:	08 95       	ret

0000138e <__divmodhi4_neg2>:
    138e:	70 95       	com	r23
    1390:	61 95       	neg	r22
    1392:	7f 4f       	sbci	r23, 0xFF	; 255

00001394 <__divmodhi4_exit>:
    1394:	08 95       	ret

00001396 <do_rand>:
    1396:	8f 92       	push	r8
    1398:	9f 92       	push	r9
    139a:	af 92       	push	r10
    139c:	bf 92       	push	r11
    139e:	cf 92       	push	r12
    13a0:	df 92       	push	r13
    13a2:	ef 92       	push	r14
    13a4:	ff 92       	push	r15
    13a6:	cf 93       	push	r28
    13a8:	df 93       	push	r29
    13aa:	ec 01       	movw	r28, r24
    13ac:	68 81       	ld	r22, Y
    13ae:	79 81       	ldd	r23, Y+1	; 0x01
    13b0:	8a 81       	ldd	r24, Y+2	; 0x02
    13b2:	9b 81       	ldd	r25, Y+3	; 0x03
    13b4:	61 15       	cp	r22, r1
    13b6:	71 05       	cpc	r23, r1
    13b8:	81 05       	cpc	r24, r1
    13ba:	91 05       	cpc	r25, r1
    13bc:	21 f4       	brne	.+8      	; 0x13c6 <do_rand+0x30>
    13be:	64 e2       	ldi	r22, 0x24	; 36
    13c0:	79 ed       	ldi	r23, 0xD9	; 217
    13c2:	8b e5       	ldi	r24, 0x5B	; 91
    13c4:	97 e0       	ldi	r25, 0x07	; 7
    13c6:	2d e1       	ldi	r18, 0x1D	; 29
    13c8:	33 ef       	ldi	r19, 0xF3	; 243
    13ca:	41 e0       	ldi	r20, 0x01	; 1
    13cc:	50 e0       	ldi	r21, 0x00	; 0
    13ce:	0e 94 3f 0a 	call	0x147e	; 0x147e <__divmodsi4>
    13d2:	49 01       	movw	r8, r18
    13d4:	5a 01       	movw	r10, r20
    13d6:	9b 01       	movw	r18, r22
    13d8:	ac 01       	movw	r20, r24
    13da:	a7 ea       	ldi	r26, 0xA7	; 167
    13dc:	b1 e4       	ldi	r27, 0x41	; 65
    13de:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <__muluhisi3>
    13e2:	6b 01       	movw	r12, r22
    13e4:	7c 01       	movw	r14, r24
    13e6:	ac ee       	ldi	r26, 0xEC	; 236
    13e8:	b4 ef       	ldi	r27, 0xF4	; 244
    13ea:	a5 01       	movw	r20, r10
    13ec:	94 01       	movw	r18, r8
    13ee:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <__mulohisi3>
    13f2:	c6 0e       	add	r12, r22
    13f4:	d7 1e       	adc	r13, r23
    13f6:	e8 1e       	adc	r14, r24
    13f8:	f9 1e       	adc	r15, r25
    13fa:	f7 fe       	sbrs	r15, 7
    13fc:	06 c0       	rjmp	.+12     	; 0x140a <do_rand+0x74>
    13fe:	81 e0       	ldi	r24, 0x01	; 1
    1400:	c8 1a       	sub	r12, r24
    1402:	d1 08       	sbc	r13, r1
    1404:	e1 08       	sbc	r14, r1
    1406:	80 e8       	ldi	r24, 0x80	; 128
    1408:	f8 0a       	sbc	r15, r24
    140a:	c8 82       	st	Y, r12
    140c:	d9 82       	std	Y+1, r13	; 0x01
    140e:	ea 82       	std	Y+2, r14	; 0x02
    1410:	fb 82       	std	Y+3, r15	; 0x03
    1412:	c6 01       	movw	r24, r12
    1414:	9f 77       	andi	r25, 0x7F	; 127
    1416:	df 91       	pop	r29
    1418:	cf 91       	pop	r28
    141a:	ff 90       	pop	r15
    141c:	ef 90       	pop	r14
    141e:	df 90       	pop	r13
    1420:	cf 90       	pop	r12
    1422:	bf 90       	pop	r11
    1424:	af 90       	pop	r10
    1426:	9f 90       	pop	r9
    1428:	8f 90       	pop	r8
    142a:	08 95       	ret

0000142c <rand_r>:
    142c:	0e 94 cb 09 	call	0x1396	; 0x1396 <do_rand>
    1430:	08 95       	ret

00001432 <rand>:
    1432:	86 e4       	ldi	r24, 0x46	; 70
    1434:	91 e0       	ldi	r25, 0x01	; 1
    1436:	0e 94 cb 09 	call	0x1396	; 0x1396 <do_rand>
    143a:	08 95       	ret

0000143c <srand>:
    143c:	a0 e0       	ldi	r26, 0x00	; 0
    143e:	b0 e0       	ldi	r27, 0x00	; 0
    1440:	80 93 46 01 	sts	0x0146, r24
    1444:	90 93 47 01 	sts	0x0147, r25
    1448:	a0 93 48 01 	sts	0x0148, r26
    144c:	b0 93 49 01 	sts	0x0149, r27
    1450:	08 95       	ret

00001452 <__eerd_byte_m164p>:
    1452:	f9 99       	sbic	0x1f, 1	; 31
    1454:	fe cf       	rjmp	.-4      	; 0x1452 <__eerd_byte_m164p>
    1456:	92 bd       	out	0x22, r25	; 34
    1458:	81 bd       	out	0x21, r24	; 33
    145a:	f8 9a       	sbi	0x1f, 0	; 31
    145c:	99 27       	eor	r25, r25
    145e:	80 b5       	in	r24, 0x20	; 32
    1460:	08 95       	ret

00001462 <__eewr_byte_m164p>:
    1462:	26 2f       	mov	r18, r22

00001464 <__eewr_r18_m164p>:
    1464:	f9 99       	sbic	0x1f, 1	; 31
    1466:	fe cf       	rjmp	.-4      	; 0x1464 <__eewr_r18_m164p>
    1468:	1f ba       	out	0x1f, r1	; 31
    146a:	92 bd       	out	0x22, r25	; 34
    146c:	81 bd       	out	0x21, r24	; 33
    146e:	20 bd       	out	0x20, r18	; 32
    1470:	0f b6       	in	r0, 0x3f	; 63
    1472:	f8 94       	cli
    1474:	fa 9a       	sbi	0x1f, 2	; 31
    1476:	f9 9a       	sbi	0x1f, 1	; 31
    1478:	0f be       	out	0x3f, r0	; 63
    147a:	01 96       	adiw	r24, 0x01	; 1
    147c:	08 95       	ret

0000147e <__divmodsi4>:
    147e:	05 2e       	mov	r0, r21
    1480:	97 fb       	bst	r25, 7
    1482:	1e f4       	brtc	.+6      	; 0x148a <__divmodsi4+0xc>
    1484:	00 94       	com	r0
    1486:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__negsi2>
    148a:	57 fd       	sbrc	r21, 7
    148c:	07 d0       	rcall	.+14     	; 0x149c <__divmodsi4_neg2>
    148e:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <__udivmodsi4>
    1492:	07 fc       	sbrc	r0, 7
    1494:	03 d0       	rcall	.+6      	; 0x149c <__divmodsi4_neg2>
    1496:	4e f4       	brtc	.+18     	; 0x14aa <__divmodsi4_exit>
    1498:	0c 94 56 0a 	jmp	0x14ac	; 0x14ac <__negsi2>

0000149c <__divmodsi4_neg2>:
    149c:	50 95       	com	r21
    149e:	40 95       	com	r20
    14a0:	30 95       	com	r19
    14a2:	21 95       	neg	r18
    14a4:	3f 4f       	sbci	r19, 0xFF	; 255
    14a6:	4f 4f       	sbci	r20, 0xFF	; 255
    14a8:	5f 4f       	sbci	r21, 0xFF	; 255

000014aa <__divmodsi4_exit>:
    14aa:	08 95       	ret

000014ac <__negsi2>:
    14ac:	90 95       	com	r25
    14ae:	80 95       	com	r24
    14b0:	70 95       	com	r23
    14b2:	61 95       	neg	r22
    14b4:	7f 4f       	sbci	r23, 0xFF	; 255
    14b6:	8f 4f       	sbci	r24, 0xFF	; 255
    14b8:	9f 4f       	sbci	r25, 0xFF	; 255
    14ba:	08 95       	ret

000014bc <__muluhisi3>:
    14bc:	0e 94 93 0a 	call	0x1526	; 0x1526 <__umulhisi3>
    14c0:	a5 9f       	mul	r26, r21
    14c2:	90 0d       	add	r25, r0
    14c4:	b4 9f       	mul	r27, r20
    14c6:	90 0d       	add	r25, r0
    14c8:	a4 9f       	mul	r26, r20
    14ca:	80 0d       	add	r24, r0
    14cc:	91 1d       	adc	r25, r1
    14ce:	11 24       	eor	r1, r1
    14d0:	08 95       	ret

000014d2 <__mulshisi3>:
    14d2:	b7 ff       	sbrs	r27, 7
    14d4:	0c 94 5e 0a 	jmp	0x14bc	; 0x14bc <__muluhisi3>

000014d8 <__mulohisi3>:
    14d8:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <__muluhisi3>
    14dc:	82 1b       	sub	r24, r18
    14de:	93 0b       	sbc	r25, r19
    14e0:	08 95       	ret

000014e2 <__udivmodsi4>:
    14e2:	a1 e2       	ldi	r26, 0x21	; 33
    14e4:	1a 2e       	mov	r1, r26
    14e6:	aa 1b       	sub	r26, r26
    14e8:	bb 1b       	sub	r27, r27
    14ea:	fd 01       	movw	r30, r26
    14ec:	0d c0       	rjmp	.+26     	; 0x1508 <__udivmodsi4_ep>

000014ee <__udivmodsi4_loop>:
    14ee:	aa 1f       	adc	r26, r26
    14f0:	bb 1f       	adc	r27, r27
    14f2:	ee 1f       	adc	r30, r30
    14f4:	ff 1f       	adc	r31, r31
    14f6:	a2 17       	cp	r26, r18
    14f8:	b3 07       	cpc	r27, r19
    14fa:	e4 07       	cpc	r30, r20
    14fc:	f5 07       	cpc	r31, r21
    14fe:	20 f0       	brcs	.+8      	; 0x1508 <__udivmodsi4_ep>
    1500:	a2 1b       	sub	r26, r18
    1502:	b3 0b       	sbc	r27, r19
    1504:	e4 0b       	sbc	r30, r20
    1506:	f5 0b       	sbc	r31, r21

00001508 <__udivmodsi4_ep>:
    1508:	66 1f       	adc	r22, r22
    150a:	77 1f       	adc	r23, r23
    150c:	88 1f       	adc	r24, r24
    150e:	99 1f       	adc	r25, r25
    1510:	1a 94       	dec	r1
    1512:	69 f7       	brne	.-38     	; 0x14ee <__udivmodsi4_loop>
    1514:	60 95       	com	r22
    1516:	70 95       	com	r23
    1518:	80 95       	com	r24
    151a:	90 95       	com	r25
    151c:	9b 01       	movw	r18, r22
    151e:	ac 01       	movw	r20, r24
    1520:	bd 01       	movw	r22, r26
    1522:	cf 01       	movw	r24, r30
    1524:	08 95       	ret

00001526 <__umulhisi3>:
    1526:	a2 9f       	mul	r26, r18
    1528:	b0 01       	movw	r22, r0
    152a:	b3 9f       	mul	r27, r19
    152c:	c0 01       	movw	r24, r0
    152e:	a3 9f       	mul	r26, r19
    1530:	70 0d       	add	r23, r0
    1532:	81 1d       	adc	r24, r1
    1534:	11 24       	eor	r1, r1
    1536:	91 1d       	adc	r25, r1
    1538:	b2 9f       	mul	r27, r18
    153a:	70 0d       	add	r23, r0
    153c:	81 1d       	adc	r24, r1
    153e:	11 24       	eor	r1, r1
    1540:	91 1d       	adc	r25, r1
    1542:	08 95       	ret

00001544 <_exit>:
    1544:	f8 94       	cli

00001546 <__stop_program>:
    1546:	ff cf       	rjmp	.-2      	; 0x1546 <__stop_program>
